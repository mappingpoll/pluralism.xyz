(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/preact-npm-10.6.4-71f87668fe-09c496bb3c.zip/node_modules/preact/dist/preact.js
  var require_preact = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/preact-npm-10.6.4-71f87668fe-09c496bb3c.zip/node_modules/preact/dist/preact.js"(exports) {
      var n;
      var l;
      var u;
      var t;
      var i;
      var r;
      var o;
      var f;
      var e = {};
      var c = [];
      var s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
      function a(n2, l2) {
        for (var u2 in l2)
          n2[u2] = l2[u2];
        return n2;
      }
      function v(n2) {
        var l2 = n2.parentNode;
        l2 && l2.removeChild(n2);
      }
      function h19(l2, u2, t2) {
        var i2, r2, o2, f2 = {};
        for (o2 in u2)
          o2 == "key" ? i2 = u2[o2] : o2 == "ref" ? r2 = u2[o2] : f2[o2] = u2[o2];
        if (arguments.length > 2 && (f2.children = arguments.length > 3 ? n.call(arguments, 2) : t2), typeof l2 == "function" && l2.defaultProps != null)
          for (o2 in l2.defaultProps)
            f2[o2] === void 0 && (f2[o2] = l2.defaultProps[o2]);
        return p(l2, f2, i2, r2, null);
      }
      function p(n2, t2, i2, r2, o2) {
        var f2 = { type: n2, props: t2, key: i2, ref: r2, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, __h: null, constructor: void 0, __v: o2 == null ? ++u : o2 };
        return o2 == null && l.vnode != null && l.vnode(f2), f2;
      }
      function y(n2) {
        return n2.children;
      }
      function d(n2, l2) {
        this.props = n2, this.context = l2;
      }
      function _(n2, l2) {
        if (l2 == null)
          return n2.__ ? _(n2.__, n2.__.__k.indexOf(n2) + 1) : null;
        for (var u2; l2 < n2.__k.length; l2++)
          if ((u2 = n2.__k[l2]) != null && u2.__e != null)
            return u2.__e;
        return typeof n2.type == "function" ? _(n2) : null;
      }
      function k(n2) {
        var l2, u2;
        if ((n2 = n2.__) != null && n2.__c != null) {
          for (n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++)
            if ((u2 = n2.__k[l2]) != null && u2.__e != null) {
              n2.__e = n2.__c.base = u2.__e;
              break;
            }
          return k(n2);
        }
      }
      function x(n2) {
        (!n2.__d && (n2.__d = true) && i.push(n2) && !b.__r++ || o !== l.debounceRendering) && ((o = l.debounceRendering) || r)(b);
      }
      function b() {
        for (var n2; b.__r = i.length; )
          n2 = i.sort(function(n3, l2) {
            return n3.__v.__b - l2.__v.__b;
          }), i = [], n2.some(function(n3) {
            var l2, u2, t2, i2, r2, o2;
            n3.__d && (r2 = (i2 = (l2 = n3).__v).__e, (o2 = l2.__P) && (u2 = [], (t2 = a({}, i2)).__v = i2.__v + 1, I(o2, i2, t2, l2.__n, o2.ownerSVGElement !== void 0, i2.__h != null ? [r2] : null, u2, r2 == null ? _(i2) : r2, i2.__h), T(u2, i2), i2.__e != r2 && k(i2)));
          });
      }
      function m(n2, l2, u2, t2, i2, r2, o2, f2, s2, a2) {
        var v2, h20, d2, k2, x2, b2, m2, A2 = t2 && t2.__k || c, P2 = A2.length;
        for (u2.__k = [], v2 = 0; v2 < l2.length; v2++)
          if ((k2 = u2.__k[v2] = (k2 = l2[v2]) == null || typeof k2 == "boolean" ? null : typeof k2 == "string" || typeof k2 == "number" || typeof k2 == "bigint" ? p(null, k2, null, null, k2) : Array.isArray(k2) ? p(y, { children: k2 }, null, null, null) : k2.__b > 0 ? p(k2.type, k2.props, k2.key, null, k2.__v) : k2) != null) {
            if (k2.__ = u2, k2.__b = u2.__b + 1, (d2 = A2[v2]) === null || d2 && k2.key == d2.key && k2.type === d2.type)
              A2[v2] = void 0;
            else
              for (h20 = 0; h20 < P2; h20++) {
                if ((d2 = A2[h20]) && k2.key == d2.key && k2.type === d2.type) {
                  A2[h20] = void 0;
                  break;
                }
                d2 = null;
              }
            I(n2, k2, d2 = d2 || e, i2, r2, o2, f2, s2, a2), x2 = k2.__e, (h20 = k2.ref) && d2.ref != h20 && (m2 || (m2 = []), d2.ref && m2.push(d2.ref, null, k2), m2.push(h20, k2.__c || x2, k2)), x2 != null ? (b2 == null && (b2 = x2), typeof k2.type == "function" && k2.__k === d2.__k ? k2.__d = s2 = g(k2, s2, n2) : s2 = w(n2, k2, d2, A2, x2, s2), typeof u2.type == "function" && (u2.__d = s2)) : s2 && d2.__e == s2 && s2.parentNode != n2 && (s2 = _(d2));
          }
        for (u2.__e = b2, v2 = P2; v2--; )
          A2[v2] != null && (typeof u2.type == "function" && A2[v2].__e != null && A2[v2].__e == u2.__d && (u2.__d = _(t2, v2 + 1)), L(A2[v2], A2[v2]));
        if (m2)
          for (v2 = 0; v2 < m2.length; v2++)
            z(m2[v2], m2[++v2], m2[++v2]);
      }
      function g(n2, l2, u2) {
        for (var t2, i2 = n2.__k, r2 = 0; i2 && r2 < i2.length; r2++)
          (t2 = i2[r2]) && (t2.__ = n2, l2 = typeof t2.type == "function" ? g(t2, l2, u2) : w(u2, t2, t2, i2, t2.__e, l2));
        return l2;
      }
      function w(n2, l2, u2, t2, i2, r2) {
        var o2, f2, e2;
        if (l2.__d !== void 0)
          o2 = l2.__d, l2.__d = void 0;
        else if (u2 == null || i2 != r2 || i2.parentNode == null)
          n:
            if (r2 == null || r2.parentNode !== n2)
              n2.appendChild(i2), o2 = null;
            else {
              for (f2 = r2, e2 = 0; (f2 = f2.nextSibling) && e2 < t2.length; e2 += 2)
                if (f2 == i2)
                  break n;
              n2.insertBefore(i2, r2), o2 = r2;
            }
        return o2 !== void 0 ? o2 : i2.nextSibling;
      }
      function A(n2, l2, u2, t2, i2) {
        var r2;
        for (r2 in u2)
          r2 === "children" || r2 === "key" || r2 in l2 || C(n2, r2, null, u2[r2], t2);
        for (r2 in l2)
          i2 && typeof l2[r2] != "function" || r2 === "children" || r2 === "key" || r2 === "value" || r2 === "checked" || u2[r2] === l2[r2] || C(n2, r2, l2[r2], u2[r2], t2);
      }
      function P(n2, l2, u2) {
        l2[0] === "-" ? n2.setProperty(l2, u2) : n2[l2] = u2 == null ? "" : typeof u2 != "number" || s.test(l2) ? u2 : u2 + "px";
      }
      function C(n2, l2, u2, t2, i2) {
        var r2;
        n:
          if (l2 === "style")
            if (typeof u2 == "string")
              n2.style.cssText = u2;
            else {
              if (typeof t2 == "string" && (n2.style.cssText = t2 = ""), t2)
                for (l2 in t2)
                  u2 && l2 in u2 || P(n2.style, l2, "");
              if (u2)
                for (l2 in u2)
                  t2 && u2[l2] === t2[l2] || P(n2.style, l2, u2[l2]);
            }
          else if (l2[0] === "o" && l2[1] === "n")
            r2 = l2 !== (l2 = l2.replace(/Capture$/, "")), l2 = l2.toLowerCase() in n2 ? l2.toLowerCase().slice(2) : l2.slice(2), n2.l || (n2.l = {}), n2.l[l2 + r2] = u2, u2 ? t2 || n2.addEventListener(l2, r2 ? H : $, r2) : n2.removeEventListener(l2, r2 ? H : $, r2);
          else if (l2 !== "dangerouslySetInnerHTML") {
            if (i2)
              l2 = l2.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");
            else if (l2 !== "href" && l2 !== "list" && l2 !== "form" && l2 !== "tabIndex" && l2 !== "download" && l2 in n2)
              try {
                n2[l2] = u2 == null ? "" : u2;
                break n;
              } catch (n3) {
              }
            typeof u2 == "function" || (u2 != null && (u2 !== false || l2[0] === "a" && l2[1] === "r") ? n2.setAttribute(l2, u2) : n2.removeAttribute(l2));
          }
      }
      function $(n2) {
        this.l[n2.type + false](l.event ? l.event(n2) : n2);
      }
      function H(n2) {
        this.l[n2.type + true](l.event ? l.event(n2) : n2);
      }
      function I(n2, u2, t2, i2, r2, o2, f2, e2, c2) {
        var s2, v2, h20, p2, _2, k2, x2, b2, g2, w2, A2, P2 = u2.type;
        if (u2.constructor !== void 0)
          return null;
        t2.__h != null && (c2 = t2.__h, e2 = u2.__e = t2.__e, u2.__h = null, o2 = [e2]), (s2 = l.__b) && s2(u2);
        try {
          n:
            if (typeof P2 == "function") {
              if (b2 = u2.props, g2 = (s2 = P2.contextType) && i2[s2.__c], w2 = s2 ? g2 ? g2.props.value : s2.__ : i2, t2.__c ? x2 = (v2 = u2.__c = t2.__c).__ = v2.__E : ("prototype" in P2 && P2.prototype.render ? u2.__c = v2 = new P2(b2, w2) : (u2.__c = v2 = new d(b2, w2), v2.constructor = P2, v2.render = M), g2 && g2.sub(v2), v2.props = b2, v2.state || (v2.state = {}), v2.context = w2, v2.__n = i2, h20 = v2.__d = true, v2.__h = []), v2.__s == null && (v2.__s = v2.state), P2.getDerivedStateFromProps != null && (v2.__s == v2.state && (v2.__s = a({}, v2.__s)), a(v2.__s, P2.getDerivedStateFromProps(b2, v2.__s))), p2 = v2.props, _2 = v2.state, h20)
                P2.getDerivedStateFromProps == null && v2.componentWillMount != null && v2.componentWillMount(), v2.componentDidMount != null && v2.__h.push(v2.componentDidMount);
              else {
                if (P2.getDerivedStateFromProps == null && b2 !== p2 && v2.componentWillReceiveProps != null && v2.componentWillReceiveProps(b2, w2), !v2.__e && v2.shouldComponentUpdate != null && v2.shouldComponentUpdate(b2, v2.__s, w2) === false || u2.__v === t2.__v) {
                  v2.props = b2, v2.state = v2.__s, u2.__v !== t2.__v && (v2.__d = false), v2.__v = u2, u2.__e = t2.__e, u2.__k = t2.__k, u2.__k.forEach(function(n3) {
                    n3 && (n3.__ = u2);
                  }), v2.__h.length && f2.push(v2);
                  break n;
                }
                v2.componentWillUpdate != null && v2.componentWillUpdate(b2, v2.__s, w2), v2.componentDidUpdate != null && v2.__h.push(function() {
                  v2.componentDidUpdate(p2, _2, k2);
                });
              }
              v2.context = w2, v2.props = b2, v2.state = v2.__s, (s2 = l.__r) && s2(u2), v2.__d = false, v2.__v = u2, v2.__P = n2, s2 = v2.render(v2.props, v2.state, v2.context), v2.state = v2.__s, v2.getChildContext != null && (i2 = a(a({}, i2), v2.getChildContext())), h20 || v2.getSnapshotBeforeUpdate == null || (k2 = v2.getSnapshotBeforeUpdate(p2, _2)), A2 = s2 != null && s2.type === y && s2.key == null ? s2.props.children : s2, m(n2, Array.isArray(A2) ? A2 : [A2], u2, t2, i2, r2, o2, f2, e2, c2), v2.base = u2.__e, u2.__h = null, v2.__h.length && f2.push(v2), x2 && (v2.__E = v2.__ = null), v2.__e = false;
            } else
              o2 == null && u2.__v === t2.__v ? (u2.__k = t2.__k, u2.__e = t2.__e) : u2.__e = j(t2.__e, u2, t2, i2, r2, o2, f2, c2);
          (s2 = l.diffed) && s2(u2);
        } catch (n3) {
          u2.__v = null, (c2 || o2 != null) && (u2.__e = e2, u2.__h = !!c2, o2[o2.indexOf(e2)] = null), l.__e(n3, u2, t2);
        }
      }
      function T(n2, u2) {
        l.__c && l.__c(u2, n2), n2.some(function(u3) {
          try {
            n2 = u3.__h, u3.__h = [], n2.some(function(n3) {
              n3.call(u3);
            });
          } catch (n3) {
            l.__e(n3, u3.__v);
          }
        });
      }
      function j(l2, u2, t2, i2, r2, o2, f2, c2) {
        var s2, a2, h20, p2 = t2.props, y2 = u2.props, d2 = u2.type, k2 = 0;
        if (d2 === "svg" && (r2 = true), o2 != null) {
          for (; k2 < o2.length; k2++)
            if ((s2 = o2[k2]) && "setAttribute" in s2 == !!d2 && (d2 ? s2.localName === d2 : s2.nodeType === 3)) {
              l2 = s2, o2[k2] = null;
              break;
            }
        }
        if (l2 == null) {
          if (d2 === null)
            return document.createTextNode(y2);
          l2 = r2 ? document.createElementNS("http://www.w3.org/2000/svg", d2) : document.createElement(d2, y2.is && y2), o2 = null, c2 = false;
        }
        if (d2 === null)
          p2 === y2 || c2 && l2.data === y2 || (l2.data = y2);
        else {
          if (o2 = o2 && n.call(l2.childNodes), a2 = (p2 = t2.props || e).dangerouslySetInnerHTML, h20 = y2.dangerouslySetInnerHTML, !c2) {
            if (o2 != null)
              for (p2 = {}, k2 = 0; k2 < l2.attributes.length; k2++)
                p2[l2.attributes[k2].name] = l2.attributes[k2].value;
            (h20 || a2) && (h20 && (a2 && h20.__html == a2.__html || h20.__html === l2.innerHTML) || (l2.innerHTML = h20 && h20.__html || ""));
          }
          if (A(l2, y2, p2, r2, c2), h20)
            u2.__k = [];
          else if (k2 = u2.props.children, m(l2, Array.isArray(k2) ? k2 : [k2], u2, t2, i2, r2 && d2 !== "foreignObject", o2, f2, o2 ? o2[0] : t2.__k && _(t2, 0), c2), o2 != null)
            for (k2 = o2.length; k2--; )
              o2[k2] != null && v(o2[k2]);
          c2 || ("value" in y2 && (k2 = y2.value) !== void 0 && (k2 !== p2.value || k2 !== l2.value || d2 === "progress" && !k2) && C(l2, "value", k2, p2.value, false), "checked" in y2 && (k2 = y2.checked) !== void 0 && k2 !== l2.checked && C(l2, "checked", k2, p2.checked, false));
        }
        return l2;
      }
      function z(n2, u2, t2) {
        try {
          typeof n2 == "function" ? n2(u2) : n2.current = u2;
        } catch (n3) {
          l.__e(n3, t2);
        }
      }
      function L(n2, u2, t2) {
        var i2, r2;
        if (l.unmount && l.unmount(n2), (i2 = n2.ref) && (i2.current && i2.current !== n2.__e || z(i2, null, u2)), (i2 = n2.__c) != null) {
          if (i2.componentWillUnmount)
            try {
              i2.componentWillUnmount();
            } catch (n3) {
              l.__e(n3, u2);
            }
          i2.base = i2.__P = null;
        }
        if (i2 = n2.__k)
          for (r2 = 0; r2 < i2.length; r2++)
            i2[r2] && L(i2[r2], u2, typeof n2.type != "function");
        t2 || n2.__e == null || v(n2.__e), n2.__e = n2.__d = void 0;
      }
      function M(n2, l2, u2) {
        return this.constructor(n2, u2);
      }
      function N(u2, t2, i2) {
        var r2, o2, f2;
        l.__ && l.__(u2, t2), o2 = (r2 = typeof i2 == "function") ? null : i2 && i2.__k || t2.__k, f2 = [], I(t2, u2 = (!r2 && i2 || t2).__k = h19(y, null, [u2]), o2 || e, e, t2.ownerSVGElement !== void 0, !r2 && i2 ? [i2] : o2 ? null : t2.firstChild ? n.call(t2.childNodes) : null, f2, !r2 && i2 ? i2 : o2 ? o2.__e : t2.firstChild, r2), T(f2, u2);
      }
      n = c.slice, l = { __e: function(n2, l2) {
        for (var u2, t2, i2; l2 = l2.__; )
          if ((u2 = l2.__c) && !u2.__)
            try {
              if ((t2 = u2.constructor) && t2.getDerivedStateFromError != null && (u2.setState(t2.getDerivedStateFromError(n2)), i2 = u2.__d), u2.componentDidCatch != null && (u2.componentDidCatch(n2), i2 = u2.__d), i2)
                return u2.__E = u2;
            } catch (l3) {
              n2 = l3;
            }
        throw n2;
      } }, u = 0, t = function(n2) {
        return n2 != null && n2.constructor === void 0;
      }, d.prototype.setState = function(n2, l2) {
        var u2;
        u2 = this.__s != null && this.__s !== this.state ? this.__s : this.__s = a({}, this.state), typeof n2 == "function" && (n2 = n2(a({}, u2), this.props)), n2 && a(u2, n2), n2 != null && this.__v && (l2 && this.__h.push(l2), x(this));
      }, d.prototype.forceUpdate = function(n2) {
        this.__v && (this.__e = true, n2 && this.__h.push(n2), x(this));
      }, d.prototype.render = y, i = [], r = typeof Promise == "function" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, b.__r = 0, f = 0, exports.render = N, exports.hydrate = function n2(l2, u2) {
        N(l2, u2, n2);
      }, exports.createElement = h19, exports.h = h19, exports.Fragment = y, exports.createRef = function() {
        return { current: null };
      }, exports.isValidElement = t, exports.Component = d, exports.cloneElement = function(l2, u2, t2) {
        var i2, r2, o2, f2 = a({}, l2.props);
        for (o2 in u2)
          o2 == "key" ? i2 = u2[o2] : o2 == "ref" ? r2 = u2[o2] : f2[o2] = u2[o2];
        return arguments.length > 2 && (f2.children = arguments.length > 3 ? n.call(arguments, 2) : t2), p(l2.type, f2, i2 || l2.key, r2 || l2.ref, null);
      }, exports.createContext = function(n2, l2) {
        var u2 = { __c: l2 = "__cC" + f++, __: n2, Consumer: function(n3, l3) {
          return n3.children(l3);
        }, Provider: function(n3) {
          var u3, t2;
          return this.getChildContext || (u3 = [], (t2 = {})[l2] = this, this.getChildContext = function() {
            return t2;
          }, this.shouldComponentUpdate = function(n4) {
            this.props.value !== n4.value && u3.some(x);
          }, this.sub = function(n4) {
            u3.push(n4);
            var l3 = n4.componentWillUnmount;
            n4.componentWillUnmount = function() {
              u3.splice(u3.indexOf(n4), 1), l3 && l3.call(n4);
            };
          }), n3.children;
        } };
        return u2.Provider.__ = u2.Consumer.contextType = u2;
      }, exports.toChildArray = function n2(l2, u2) {
        return u2 = u2 || [], l2 == null || typeof l2 == "boolean" || (Array.isArray(l2) ? l2.some(function(l3) {
          n2(l3, u2);
        }) : u2.push(l2)), u2;
      }, exports.options = l;
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/preact-npm-10.6.4-71f87668fe-09c496bb3c.zip/node_modules/preact/hooks/dist/hooks.js
  var require_hooks = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/preact-npm-10.6.4-71f87668fe-09c496bb3c.zip/node_modules/preact/hooks/dist/hooks.js"(exports) {
      var n;
      var t;
      var r;
      var u = require_preact();
      var o = 0;
      var i = [];
      var c = u.options.__b;
      var e = u.options.__r;
      var f = u.options.diffed;
      var a = u.options.__c;
      var v = u.options.unmount;
      function p(n2, r2) {
        u.options.__h && u.options.__h(t, n2, o || r2), o = 0;
        var i2 = t.__H || (t.__H = { __: [], __h: [] });
        return n2 >= i2.__.length && i2.__.push({}), i2.__[n2];
      }
      function s(n2) {
        return o = 1, x(A, n2);
      }
      function x(r2, u2, o2) {
        var i2 = p(n++, 2);
        return i2.t = r2, i2.__c || (i2.__ = [o2 ? o2(u2) : A(void 0, u2), function(n2) {
          var t2 = i2.t(i2.__[0], n2);
          i2.__[0] !== t2 && (i2.__ = [t2, i2.__[1]], i2.__c.setState({}));
        }], i2.__c = t), i2.__;
      }
      function l(r2, o2) {
        var i2 = p(n++, 4);
        !u.options.__s && q(i2.__H, o2) && (i2.__ = r2, i2.__H = o2, t.__h.push(i2));
      }
      function m(t2, r2) {
        var u2 = p(n++, 7);
        return q(u2.__H, r2) && (u2.__ = t2(), u2.__H = r2, u2.__h = t2), u2.__;
      }
      function y() {
        var n2;
        for (i.sort(function(n3, t2) {
          return n3.__v.__b - t2.__v.__b;
        }); n2 = i.pop(); )
          if (n2.__P)
            try {
              n2.__H.__h.forEach(_), n2.__H.__h.forEach(d), n2.__H.__h = [];
            } catch (t2) {
              n2.__H.__h = [], u.options.__e(t2, n2.__v);
            }
      }
      u.options.__b = function(n2) {
        t = null, c && c(n2);
      }, u.options.__r = function(r2) {
        e && e(r2), n = 0;
        var u2 = (t = r2.__c).__H;
        u2 && (u2.__h.forEach(_), u2.__h.forEach(d), u2.__h = []);
      }, u.options.diffed = function(n2) {
        f && f(n2);
        var o2 = n2.__c;
        o2 && o2.__H && o2.__H.__h.length && (i.push(o2) !== 1 && r === u.options.requestAnimationFrame || ((r = u.options.requestAnimationFrame) || function(n3) {
          var t2, r2 = function() {
            clearTimeout(u2), h19 && cancelAnimationFrame(t2), setTimeout(n3);
          }, u2 = setTimeout(r2, 100);
          h19 && (t2 = requestAnimationFrame(r2));
        })(y)), t = null;
      }, u.options.__c = function(n2, t2) {
        t2.some(function(n3) {
          try {
            n3.__h.forEach(_), n3.__h = n3.__h.filter(function(n4) {
              return !n4.__ || d(n4);
            });
          } catch (r2) {
            t2.some(function(n4) {
              n4.__h && (n4.__h = []);
            }), t2 = [], u.options.__e(r2, n3.__v);
          }
        }), a && a(n2, t2);
      }, u.options.unmount = function(n2) {
        v && v(n2);
        var t2, r2 = n2.__c;
        r2 && r2.__H && (r2.__H.__.forEach(function(n3) {
          try {
            _(n3);
          } catch (n4) {
            t2 = n4;
          }
        }), t2 && u.options.__e(t2, r2.__v));
      };
      var h19 = typeof requestAnimationFrame == "function";
      function _(n2) {
        var r2 = t, u2 = n2.__c;
        typeof u2 == "function" && (n2.__c = void 0, u2()), t = r2;
      }
      function d(n2) {
        var r2 = t;
        n2.__c = n2.__(), t = r2;
      }
      function q(n2, t2) {
        return !n2 || n2.length !== t2.length || t2.some(function(t3, r2) {
          return t3 !== n2[r2];
        });
      }
      function A(n2, t2) {
        return typeof t2 == "function" ? t2(n2) : t2;
      }
      exports.useState = s, exports.useReducer = x, exports.useEffect = function(r2, o2) {
        var i2 = p(n++, 3);
        !u.options.__s && q(i2.__H, o2) && (i2.__ = r2, i2.__H = o2, t.__H.__h.push(i2));
      }, exports.useLayoutEffect = l, exports.useRef = function(n2) {
        return o = 5, m(function() {
          return { current: n2 };
        }, []);
      }, exports.useImperativeHandle = function(n2, t2, r2) {
        o = 6, l(function() {
          typeof n2 == "function" ? n2(t2()) : n2 && (n2.current = t2());
        }, r2 == null ? r2 : r2.concat(n2));
      }, exports.useMemo = m, exports.useCallback = function(n2, t2) {
        return o = 8, m(function() {
          return n2;
        }, t2);
      }, exports.useContext = function(r2) {
        var u2 = t.context[r2.__c], o2 = p(n++, 9);
        return o2.c = r2, u2 ? (o2.__ == null && (o2.__ = true, u2.sub(t)), u2.props.value) : r2.__;
      }, exports.useDebugValue = function(n2, t2) {
        u.options.useDebugValue && u.options.useDebugValue(t2 ? t2(n2) : n2);
      }, exports.useErrorBoundary = function(r2) {
        var u2 = p(n++, 10), o2 = s();
        return u2.__ = r2, t.componentDidCatch || (t.componentDidCatch = function(n2) {
          u2.__ && u2.__(n2), o2[1](n2);
        }), [o2[0], function() {
          o2[1](void 0);
        }];
      };
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/dlv-npm-1.1.3-187c903a21-d7381bca22.zip/node_modules/dlv/dist/dlv.js
  var require_dlv = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/dlv-npm-1.1.3-187c903a21-d7381bca22.zip/node_modules/dlv/dist/dlv.js"(exports, module) {
      module.exports = function(t, e, l, n, o) {
        for (e = e.split ? e.split(".") : e, n = 0; n < e.length; n++)
          t = t ? t[e[n]] : o;
        return t === o ? l : t;
      };
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/__virtual__/preact-i18n-virtual-694c3fb153/0/cache/preact-i18n-npm-2.3.0-preactx-2b0ac7dcbe-796c462067.zip/node_modules/preact-i18n/dist/preact-i18n.js
  var require_preact_i18n = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/__virtual__/preact-i18n-virtual-694c3fb153/0/cache/preact-i18n-npm-2.3.0-preactx-2b0ac7dcbe-796c462067.zip/node_modules/preact-i18n/dist/preact-i18n.js"(exports) {
      function t(t2) {
        return t2 && typeof t2 == "object" && "default" in t2 ? t2.default : t2;
      }
      Object.defineProperty(exports, "__esModule", { value: true });
      var l = require_preact();
      var a = require_hooks();
      var p = t(require_dlv());
      var c = l.createContext({ intl: {} });
      function f(t2) {
        return t2 != null;
      }
      function u(t2, n2) {
        for (var r2 in n2)
          t2[r2] = n2[r2];
        return t2;
      }
      function s(t2, n2) {
        var r2 = u({}, t2);
        for (var e2 in n2)
          n2.hasOwnProperty(e2) && (t2[e2] && n2[e2] && typeof t2[e2] == "object" && typeof n2[e2] == "object" ? r2[e2] = s(t2[e2], n2[e2]) : r2[e2] = t2[e2] || n2[e2]);
        return r2;
      }
      function d(t2) {
        if (typeof (t2 = t2 || {}) == "string" && (t2 = t2.split(",")), "join" in t2) {
          for (var n2 = {}, r2 = 0; r2 < t2.length; r2++) {
            var e2 = t2[r2].trim();
            e2 && (n2[e2.split(".").pop()] = e2);
          }
          return n2;
        }
        return t2;
      }
      function h19(t2, n2) {
        var r2 = {};
        for (var e2 in t2)
          Object.prototype.hasOwnProperty.call(t2, e2) && n2.indexOf(e2) === -1 && (r2[e2] = t2[e2]);
        return r2;
      }
      var v = /[?&#]intl=show/;
      function e(t2) {
        var n2 = t2.scope, r2 = t2.mark, e2 = t2.definition, o2 = h19(t2, ["scope", "mark", "definition"]), i2 = u({}, a.useContext(c).intl || {});
        return n2 && (i2.scope = n2), e2 && (i2.dictionary = s(i2.dictionary || {}, e2)), (r2 || typeof location != "undefined" && String(location).match(v)) && (i2.mark = true), l.h(c.Provider, { value: { intl: i2 } }, o2.children);
      }
      function o(n2, r2) {
        if (arguments.length < 2)
          return r2 = n2, function(t3) {
            return o(t3, r2);
          };
        function t2(t3) {
          return l.h(e, r2 || {}, l.h(n2, t3));
        }
        return t2.getWrappedComponent = n2 && n2.getWrappedComponent || function() {
          return n2;
        }, t2;
      }
      var i = {};
      function x(t2, n2, r2, e2) {
        return t2 && t2.replace(/\{\{([\w.-]+)\}\}/g, y.bind(null, n2 || i, r2, e2));
      }
      function y(t2, n2, r2, e2, o2) {
        for (var i2 = o2.split("."), u2 = t2, l2 = 0; l2 < i2.length; l2++) {
          if ((u2 = u2[i2[l2]]) == null)
            return "";
          if (u2 && u2.type === b)
            return g(u2.props.id, n2, r2, u2.props.fields, u2.props.plural, u2.props.fallback);
        }
        return typeof u2 == "string" && u2.match(/\{\{/) && (u2 = x(u2, t2)), u2;
      }
      function g(t2, n2, r2, e2, o2, i2) {
        n2 && (t2 = n2 + "." + t2);
        var u2 = r2 && p(r2, t2);
        return (o2 || o2 === 0) && u2 && typeof u2 == "object" && (u2 = u2.splice ? u2[o2] || u2[0] : o2 === 0 && f(u2.none) ? u2.none : o2 === 1 && f(u2.one || u2.singular) ? u2.one || u2.singular : u2.some || u2.many || u2.plural || u2.other || u2), u2 && x(u2, e2, n2, r2) || i2 || null;
      }
      function m(t2) {
        var n2 = t2.value, r2 = t2.id, e2 = a.useContext(c).intl;
        if (e2 && e2.mark) {
          var o2 = "dictionary" + (e2 && e2.scope ? "." + e2.scope : "") + "." + r2;
          return l.h("mark", { style: { background: n2 ? p(e2, o2) ? "rgba(119,231,117,.5)" : "rgba(229,226,41,.5)" : "rgba(228,147,51,.5)" }, title: r2 }, n2);
        }
        return n2;
      }
      function b(t2) {
        var n2 = t2.id, r2 = t2.children, e2 = t2.plural, o2 = t2.fields, i2 = a.useContext(c).intl, u2 = g(n2, i2 && i2.scope, i2 && i2.dictionary, o2, e2, r2);
        return l.h(m, { id: n2, value: u2 });
      }
      function C(t2, n2, r2) {
        var e2, o2 = {};
        for (var i2 in n2 = n2 || {}, t2 = d(t2)) {
          t2.hasOwnProperty(i2) && t2[i2] && (e2 = t2[i2], r2 || typeof e2 != "string" ? e2.type === b && (e2 = u({ fallback: e2.props.children }, e2.props), o2[i2] = g(e2.id, n2.scope, n2.dictionary, e2.fields, e2.plural, e2.fallback)) : o2[i2] = g(e2, n2.scope, n2.dictionary));
        }
        return o2;
      }
      function n(t2) {
        var n2 = t2.children, r2 = a.useContext(c).intl;
        return n2 && n2.length ? n2.map(function(t3) {
          return l.cloneElement(t3, C(t3.props, r2, true));
        }) : n2 && l.cloneElement(n2, C(n2.props, r2, true));
      }
      function r(t2) {
        return l.h(n, null, l.h(k, { html: l.h(b, t2), id: t2.id }));
      }
      function k(t2) {
        var n2 = t2.html, r2 = t2.id, e2 = n2 ? typeof n2 == "string" ? l.h("span", { dangerouslySetInnerHTML: { __html: n2 } }) : l.h("span", null, n2) : n2;
        return l.h(m, { id: r2, value: e2 });
      }
      function T(i2) {
        return function(o2) {
          function t2(t3, n2) {
            var r2 = a.useContext(c).intl, e2 = C(typeof i2 == "function" ? i2(t3, { intl: r2 }) : i2, r2);
            return l.h(o2, u(u({}, t3), e2));
          }
          return t2.getWrappedComponent = o2 && o2.getWrappedComponent || function() {
            return o2;
          }, t2;
        };
      }
      function j(t2) {
        var n2 = a.useContext(c).intl;
        return C(typeof t2 == "function" ? t2({ intl: n2 }) : t2, n2);
      }
      (o.intl = o).IntlContext = c, o.IntlProvider = e, o.Text = b, o.MarkupText = r, o.Localizer = n, o.withText = T, o.useText = j, o.translate = g, exports.IntlContext = c, exports.IntlProvider = e, exports.Localizer = n, exports.MarkupText = r, exports.Text = b, exports.default = o, exports.intl = o, exports.translate = g, exports.useText = j, exports.withText = T;
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js"(exports, module) {
      (function() {
        var undefined2;
        var VERSION = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        function arrayEach(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEvery(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        function arrayIncludesWith(array, value, comparator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset = array.length;
          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        function arraySome(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
          });
          return accumulator;
        }
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        function baseSum(array, iteratee) {
          var result, index = -1, length = array.length;
          while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        function baseTimes(n, iteratee) {
          var index = -1, result = Array(n);
          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length = strSymbols.length;
          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function countHolders(array, placeholder) {
          var length = array.length, result = 0;
          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        function getValue(object, key) {
          return object == null ? undefined2 : object[key];
        }
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        function iteratorToArray(iterator) {
          var data, result = [];
          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        function mapToArray(map) {
          var index = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        function replaceHolders(array, placeholder) {
          var index = -1, length = array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }
        function setToArray(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }
        function setToPairs(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = [value, value];
          });
          return result;
        }
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }
          return index;
        }
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        function trimmedEndIndex(string) {
          var index = string.length;
          while (index-- && reWhitespace.test(string.charAt(index))) {
          }
          return index;
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context) {
          context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root._;
          var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap && new WeakMap();
          var realNames = {};
          var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          var baseCreate = function() {
            function object() {
            }
            return function(proto) {
              if (!isObject(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result2 = new object();
              object.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            "escape": reEscape,
            "evaluate": reEvaluate,
            "interpolate": reInterpolate,
            "variable": "",
            "imports": {
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value = array[index];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined2;
          }
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
          }
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined2 : data[index][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values2) {
            var index = -1, length = values2 == null ? 0 : values2.length;
            this.__data__ = new MapCache();
            while (++index < length) {
              this.add(values2[index]);
            }
          }
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
          }
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          function assignMergeValue(object, key, value) {
            if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          function baseAt(object, paths) {
            var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
            while (++index < length) {
              result2[index] = skip ? undefined2 : get(object, paths[index]);
            }
            return result2;
          }
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          function baseConforms(source) {
            var props = keys(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (length--) {
              var key = props[length], predicate = source[key], value = object[key];
              if (value === undefined2 && !(key in object) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function baseDifference(array, values2, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
            if (!length) {
              return result2;
            }
            if (iteratee2) {
              values2 = arrayMap(values2, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values2.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values2 = new SetCache(values2);
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values2[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values2, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value, index, collection2) {
              result2 = !!predicate(value, index, collection2);
              return result2;
            });
            return result2;
          }
          function baseExtremum(array, iteratee2, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
              var value = array[index], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value;
              }
            }
            return result2;
          }
          function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end === undefined2 || end > length ? length : toInteger(end);
            if (end < 0) {
              end += length;
            }
            end = start > end ? 0 : toLength(end);
            while (start < end) {
              array[start++] = value;
            }
            return array;
          }
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value, index, collection2) {
              if (predicate(value, index, collection2)) {
                result2.push(value);
              }
            });
            return result2;
          }
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index < length) {
              var value = array[index];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys);
          }
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys);
          }
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction(object[key]);
            });
          }
          function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined2;
          }
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object);
            return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
          }
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
          }
          function baseGt(value, other) {
            return value > other;
          }
          function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
          }
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
              while (++index < length && result2.length < maxLength) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value, key, object2) {
              setter(accumulator, iteratee2(value), key, object2);
            });
            return accumulator;
          }
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined2 : apply(func, object, args);
          }
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (index--) {
              var data = matchData[index];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result2 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty.call(object, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result2 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseLt(value, other) {
            return value < other;
          }
          function baseMap(collection, iteratee2) {
            var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result2[++index] = iteratee2(value, key, collection2);
            });
            return result2;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          function baseNth(array, n) {
            var length = array.length;
            if (!length) {
              return;
            }
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined2;
          }
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index, "value": value };
            });
            return baseSortBy(result2, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
              return hasIn(object, path);
            });
          }
          function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result2 = {};
            while (++index < length) {
              var path = paths[index], value = baseGet(object, path);
              if (predicate(value, path)) {
                baseSet(result2, castPath(path, object), value);
              }
            }
            return result2;
          }
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          function basePullAll(array, values2, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
            if (array === values2) {
              values2 = copyArray(values2);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index < length) {
              var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
              var index = indexes[length];
              if (length == lastIndex || index !== previous) {
                var previous = index;
                if (isIndex(index)) {
                  splice.call(array, index, 1);
                } else {
                  baseUnset(array, index);
                }
              }
            }
            return array;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
            while (length--) {
              result2[fromRight ? length : ++index] = start;
              start += step;
            }
            return result2;
          }
          function baseRepeat(string, n) {
            var result2 = "";
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
              return result2;
            }
            do {
              if (n % 2) {
                result2 += string;
              }
              n = nativeFloor(n / 2);
              if (n) {
                string += string;
              }
            } while (n);
            return result2;
          }
          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
          }
          function baseSample(collection) {
            return arraySample(values(collection));
          }
          function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
          }
          function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
              return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
              var key = toKey(path[index]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object;
          }
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end > length ? length : end;
            if (end < 0) {
              end += length;
            }
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result2 = Array2(length);
            while (++index < length) {
              result2[index] = array[index + start];
            }
            return result2;
          }
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value, index, collection2) {
              result2 = predicate(value, index, collection2);
              return !result2;
            });
            return !!result2;
          }
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array, iteratee2) {
            var index = -1, length = array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function baseUniq(array, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set2 = iteratee2 ? null : createSet(array);
              if (set2) {
                return setToArray(set2);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
          }
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result2 = Array2(length);
            while (++index < length) {
              var array = arrays[index], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index) {
                  result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values2, assignFunc) {
            var index = -1, length = props.length, valsLength = values2.length, result2 = {};
            while (++index < length) {
              var value = index < valsLength ? values2[index] : undefined2;
              assignFunc(result2, props[index], value);
            }
            return result2;
          }
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
          }
          var castRest = baseRest;
          function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined2 ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
          }
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result2);
            return result2;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
              var result2 = compareAscending(objCriteria[index], othCriteria[index]);
              if (result2) {
                if (index >= ordersLength) {
                  return result2;
                }
                var order = orders[index];
                return result2 * (order == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array2(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object = Object2(object);
              while (++index < length) {
                var source = sources[index];
                if (source) {
                  assigner(object, source, index, customizer);
                }
              }
              return object;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index-- : ++index < length) {
                if (iteratee2(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject(result2) ? result2 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
              while (index--) {
                args[index] = arguments[index];
              }
              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
              }
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply(fn, this, args);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys(collection);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index = findIndexFunc(collection, predicate, fromIndex);
              return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index--) {
                var func = funcs[index];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index = wrapper ? index : length;
              while (++index < length) {
                func = funcs[index];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value();
                }
                var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
                while (++index2 < length) {
                  result2 = funcs[index2].call(this, result2);
                }
                return result2;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length;
              while (index--) {
                args[index] = arguments[index];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
              }
              var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root && this instanceof wrapper) {
                fn = Ctor || createCtor(fn);
              }
              return fn.apply(thisBinding, args);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args);
                });
              });
            });
          }
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start, end, step) {
              if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                end = step = undefined2;
              }
              start = toFinite(start);
              if (end === undefined2) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
              return baseRange(start, end, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
            return new Set2(values2);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value) {
            return isPlainObject(value) ? undefined2 : value;
          }
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
              var arrValue = array[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result2 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result2;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          function getHolder(func) {
            var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          function getMatchData(object) {
            var result2 = keys(object), length = result2.length;
            while (length--) {
              var key = result2[length], value = object[key];
              result2[length] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined2;
          }
          function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result2 = [];
            while (object) {
              arrayPush(result2, getSymbols(object));
              object = getPrototype(object);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
            getTag = function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            };
          }
          function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
              var data = transforms[index], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start += size2;
                  break;
                case "dropRight":
                  end -= size2;
                  break;
                case "take":
                  end = nativeMin(end, start + size2);
                  break;
                case "takeRight":
                  start = nativeMax(start, end - size2);
                  break;
              }
            }
            return { "start": start, "end": end };
          }
          function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
          }
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result2 = false;
            while (++index < length) {
              var key = toKey(path[index]);
              if (!(result2 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result2 || ++index != length) {
              return result2;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
          }
          function initCloneArray(array) {
            var length = array.length, result2 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
              return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
              return eq(object[index], value);
            }
            return false;
          }
          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
          }
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          function memoizeCapped(func) {
            var result2 = memoize(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });
            var cache = result2.cache;
            return result2;
          }
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          function nativeKeysIn(object) {
            var result2 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result2.push(key);
              }
            }
            return result2;
          }
          function objectToString(value) {
            return nativeObjectToString.call(value);
          }
          function overRest(func, start, transform2) {
            start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
            return function() {
              var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
              while (++index < length) {
                array[index] = args[start + index];
              }
              index = -1;
              var otherArgs = Array2(start + 1);
              while (++index < start) {
                otherArgs[index] = args[index];
              }
              otherArgs[start] = transform2(array);
              return apply(func, this, otherArgs);
            };
          }
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index = indexes[length];
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
            }
            return array;
          }
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array, size2) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index < size2) {
              var rand = baseRandom(index, lastIndex), value = array[rand];
              array[rand] = array[index];
              array[index] = value;
            }
            array.length = size2;
            return array;
          }
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match, number, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {
              }
              try {
                return func + "";
              } catch (e) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
            while (index < length) {
              result2[resIndex++] = baseSlice(array, index, index += size2);
            }
            return result2;
          }
          function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          function concat() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index = length;
            while (index--) {
              args[index - 1] = arguments[index];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          var difference = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values2) {
            var iteratee2 = last(values2);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values2) {
            var comparator = last(values2);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
              start = 0;
              end = length;
            }
            return baseFill(array, value, start, end);
          }
          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
          }
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
          }
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index < length) {
              var pair = pairs[index];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value, index);
          }
          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
          }
          function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array, values2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
          }
          function pullAllBy(array, values2, iteratee2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
          }
          function pullAllWith(array, values2, comparator) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
          }
          var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result2.push(value);
                indexes.push(index);
              }
            }
            basePullAt(array, indexes);
            return result2;
          }
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
              start = 0;
              end = length;
            } else {
              start = start == null ? 0 : toInteger(start);
              end = end === undefined2 ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
          }
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value);
              if (index < length && eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          function take(array, n, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index) {
              return arrayMap(array, baseProperty(index));
            });
          }
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values2) {
            return baseZipObject(props || [], values2 || [], assignValue);
          }
          function zipObjectDeep(props, values2) {
            return baseZipObject(props || [], values2 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          function thru(value, interceptor) {
            return interceptor(value);
          }
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
              return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
              return this.thru(interceptor);
            }
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone2 = wrapperClone(parent2);
              clone2.__index__ = 0;
              clone2.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone2;
              } else {
                result2 = clone2;
              }
              var previous = clone2;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          var find = createFind(findIndex);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          function forEach(collection, iteratee2) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection, iteratee2) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          var groupBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map(collection, iteratee2) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          var partition = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
          }
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now = ctxNow || function() {
            return root.Date.now();
          };
          function after(n, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n, guard) {
            n = guard ? undefined2 : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
          }
          function before(n, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time = now();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush() {
              return timerId === undefined2 ? result2 : trailingEdge(now());
            }
            function debounced() {
              var time = now(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache.set(key, result2) || cache;
              return result2;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }
          memoize.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index = -1, length = nativeMin(args.length, funcsLength);
              while (++index < length) {
                args[index] = transforms[index].call(this, args[index]);
              }
              return apply(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start === undefined2 ? start : toInteger(start);
            return baseRest(func, start);
          }
          function spread(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
              var array = args[start], otherArgs = castSlice(args, 0, start);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
          }
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep4(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          var gt = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
          }
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
          }
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual(value, other) {
            return baseIsEqual(value, other);
          }
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          function isError(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
          }
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          function isFunction(value) {
            if (!isObject(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
          }
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          function isNaN2(value) {
            return isNumber(value) && value != +value;
          }
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          function isNull(value) {
            return value === null;
          }
          function isNil(value) {
            return value == null;
          }
          function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined(value) {
            return value === undefined2;
          }
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          var lt = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
          }
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          function toInteger(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          function toString(value) {
            return value == null ? "" : baseToString(value);
          }
          var assign2 = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          var at = flatRest(baseAt);
          function create(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          var defaults = baseRest(function(object, sources) {
            object = Object2(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args);
          });
          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          function get(object, path, defaultValue) {
            var result2 = object == null ? undefined2 : baseGet(object, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          var invert = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          function mapKeys(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, iteratee2(value, key, object2), value);
            });
            return result2;
          }
          function mapValues(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, key, iteratee2(value, key, object2));
            });
            return result2;
          }
          var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result2 = {};
            if (object == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result2, paths[length]);
            }
            return result2;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            if (!length) {
              length = 1;
              object = undefined2;
            }
            while (++index < length) {
              var value = object == null ? undefined2 : object[toKey(path[index])];
              if (value === undefined2) {
                index = length;
                value = defaultValue;
              }
              object = isFunction(value) ? value.call(object) : value;
            }
            return object;
          }
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          var toPairs = createToPairs(keys);
          var toPairsIn = createToPairs(keysIn);
          function transform(object, iteratee2, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject(object)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
              return iteratee2(accumulator, value, index, object2);
            });
            return accumulator;
          }
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          function clamp(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          function inRange2(number, start, end) {
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            number = toNumber(number);
            return baseInRange(number, start, end);
          }
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase = createCompounder(function(result2, word, index) {
            word = word.toLowerCase();
            return result2 + (index ? capitalize(word) : word);
          });
          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
          }
          function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
          }
          function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          var kebabCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad2(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
              return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          function parseInt2(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
          }
          function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            return baseRepeat(toString(string), n);
          }
          function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          var snakeCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "_" : "") + word.toLowerCase();
          });
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          var startCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + upperFirst(word);
          });
          function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
          }
          function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined2;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
            var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index = offset + match.length;
              return match;
            });
            source += "';\n";
            var variable = hasOwnProperty.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError(result2)) {
              throw result2;
            }
            return result2;
          }
          function toLower(value) {
            return toString(value).toLowerCase();
          }
          function toUpper(value) {
            return toString(value).toUpperCase();
          }
          function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return baseTrim(string);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join("");
          }
          function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join("");
          }
          function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join("");
          }
          function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length = "length" in options ? toInteger(options.length) : length;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string;
            }
            var end = length - stringSize(omission);
            if (end < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end += result2.length - end;
            }
            if (isRegExp(separator)) {
              if (string.slice(end).search(separator)) {
                var match, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match = separator.exec(substring)) {
                  var newEnd = match.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end) != end) {
              var index = result2.lastIndexOf(separator);
              if (index > -1) {
                result2 = result2.slice(0, index);
              }
            }
            return result2 + omission;
          }
          function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          var upperCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args) {
            try {
              return apply(func, undefined2, args);
            } catch (e) {
              return isError(e) ? e : new Error2(e);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index = -1;
              while (++index < length) {
                var pair = pairs[index];
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }
            var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }
            return this;
          }
          function noop() {
          }
          function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
              return baseNth(args, n);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n, iteratee2) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) {
              return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length, iteratee2);
            while (++index < n) {
              iteratee2(index);
            }
            return result2;
          }
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
          }
          function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
          }
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array) {
            return baseMean(array, identity);
          }
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign2;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce;
          lodash.defaults = defaults;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep4;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange2;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate;
          lodash.isElement = isElement;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction;
          lodash.isInteger = isInteger;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop;
          lodash.now = now;
          lodash.pad = pad2;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
              n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
              var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
              return this.reverse()[methodName](n).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result2 = this;
            if (result2.__filtered__ && (start > 0 || end < 0)) {
              return new LazyWrapper(result2);
            }
            if (start < 0) {
              result2 = result2.takeRight(-start);
            } else if (start) {
              result2 = result2.drop(start);
            }
            if (end !== undefined2) {
              end = toInteger(end);
              result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
              var interceptor = function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result3[0] : result3;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _ = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _;
          define(function() {
            return _;
          });
        } else if (freeModule) {
          (freeModule.exports = _)._ = _;
          freeExports._ = _;
        } else {
          root._ = _;
        }
      }).call(exports);
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/lodash.assign-npm-4.2.0-18b16126b9-75bbc6733c.zip/node_modules/lodash.assign/index.js
  var require_lodash2 = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/lodash.assign-npm-4.2.0-18b16126b9-75bbc6733c.zip/node_modules/lodash.assign/index.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var argsTag = "[object Arguments]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeKeys = overArg(Object.keys, Object);
      var nativeMax = Math.max;
      var nonEnumShadows = !propertyIsEnumerable.call({ "valueOf": 1 }, "valueOf");
      function arrayLikeKeys(value, inherited) {
        var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
        var length = result.length, skipIndexes = !!length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
          object[key] = value;
        }
      }
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      function baseRest(func, start) {
        start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = array;
          return apply(func, this, otherArgs);
        };
      }
      function copyObject(source, props, object, customizer) {
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          assignValue(object, key, newValue === void 0 ? source[key] : newValue);
        }
        return object;
      }
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? void 0 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
          return eq(object[index], value);
        }
        return false;
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      function isArguments(value) {
        return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
      }
      var isArray = Array.isArray;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      var assign2 = createAssigner(function(object, source) {
        if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      module.exports = assign2;
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-array-npm-2.12.1-104e51ecda-97853b7b52.zip/node_modules/d3-array/dist/d3-array.js
  var require_d3_array = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-array-npm-2.12.1-104e51ecda-97853b7b52.zip/node_modules/d3-array/dist/d3-array.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        function ascending(a, b) {
          return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
        }
        function bisector(f) {
          let delta = f;
          let compare = f;
          if (f.length === 1) {
            delta = (d, x) => f(d) - x;
            compare = ascendingComparator(f);
          }
          function left(a, x, lo, hi) {
            if (lo == null)
              lo = 0;
            if (hi == null)
              hi = a.length;
            while (lo < hi) {
              const mid = lo + hi >>> 1;
              if (compare(a[mid], x) < 0)
                lo = mid + 1;
              else
                hi = mid;
            }
            return lo;
          }
          function right(a, x, lo, hi) {
            if (lo == null)
              lo = 0;
            if (hi == null)
              hi = a.length;
            while (lo < hi) {
              const mid = lo + hi >>> 1;
              if (compare(a[mid], x) > 0)
                hi = mid;
              else
                lo = mid + 1;
            }
            return lo;
          }
          function center(a, x, lo, hi) {
            if (lo == null)
              lo = 0;
            if (hi == null)
              hi = a.length;
            const i = left(a, x, lo, hi - 1);
            return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
          }
          return { left, center, right };
        }
        function ascendingComparator(f) {
          return (d, x) => ascending(f(d), x);
        }
        function number(x) {
          return x === null ? NaN : +x;
        }
        function* numbers(values, valueof) {
          if (valueof === void 0) {
            for (let value of values) {
              if (value != null && (value = +value) >= value) {
                yield value;
              }
            }
          } else {
            let index2 = -1;
            for (let value of values) {
              if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
                yield value;
              }
            }
          }
        }
        const ascendingBisect = bisector(ascending);
        const bisectRight = ascendingBisect.right;
        const bisectLeft = ascendingBisect.left;
        const bisectCenter = bisector(number).center;
        function count(values, valueof) {
          let count2 = 0;
          if (valueof === void 0) {
            for (let value of values) {
              if (value != null && (value = +value) >= value) {
                ++count2;
              }
            }
          } else {
            let index2 = -1;
            for (let value of values) {
              if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
                ++count2;
              }
            }
          }
          return count2;
        }
        function length$1(array2) {
          return array2.length | 0;
        }
        function empty(length2) {
          return !(length2 > 0);
        }
        function arrayify(values) {
          return typeof values !== "object" || "length" in values ? values : Array.from(values);
        }
        function reducer2(reduce2) {
          return (values) => reduce2(...values);
        }
        function cross(...values) {
          const reduce2 = typeof values[values.length - 1] === "function" && reducer2(values.pop());
          values = values.map(arrayify);
          const lengths = values.map(length$1);
          const j = values.length - 1;
          const index2 = new Array(j + 1).fill(0);
          const product = [];
          if (j < 0 || lengths.some(empty))
            return product;
          while (true) {
            product.push(index2.map((j2, i2) => values[i2][j2]));
            let i = j;
            while (++index2[i] === lengths[i]) {
              if (i === 0)
                return reduce2 ? product.map(reduce2) : product;
              index2[i--] = 0;
            }
          }
        }
        function cumsum(values, valueof) {
          var sum2 = 0, index2 = 0;
          return Float64Array.from(values, valueof === void 0 ? (v) => sum2 += +v || 0 : (v) => sum2 += +valueof(v, index2++, values) || 0);
        }
        function descending(a, b) {
          return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
        }
        function variance(values, valueof) {
          let count2 = 0;
          let delta;
          let mean2 = 0;
          let sum2 = 0;
          if (valueof === void 0) {
            for (let value of values) {
              if (value != null && (value = +value) >= value) {
                delta = value - mean2;
                mean2 += delta / ++count2;
                sum2 += delta * (value - mean2);
              }
            }
          } else {
            let index2 = -1;
            for (let value of values) {
              if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
                delta = value - mean2;
                mean2 += delta / ++count2;
                sum2 += delta * (value - mean2);
              }
            }
          }
          if (count2 > 1)
            return sum2 / (count2 - 1);
        }
        function deviation(values, valueof) {
          const v = variance(values, valueof);
          return v ? Math.sqrt(v) : v;
        }
        function extent(values, valueof) {
          let min2;
          let max2;
          if (valueof === void 0) {
            for (const value of values) {
              if (value != null) {
                if (min2 === void 0) {
                  if (value >= value)
                    min2 = max2 = value;
                } else {
                  if (min2 > value)
                    min2 = value;
                  if (max2 < value)
                    max2 = value;
                }
              }
            }
          } else {
            let index2 = -1;
            for (let value of values) {
              if ((value = valueof(value, ++index2, values)) != null) {
                if (min2 === void 0) {
                  if (value >= value)
                    min2 = max2 = value;
                } else {
                  if (min2 > value)
                    min2 = value;
                  if (max2 < value)
                    max2 = value;
                }
              }
            }
          }
          return [min2, max2];
        }
        class Adder {
          constructor() {
            this._partials = new Float64Array(32);
            this._n = 0;
          }
          add(x) {
            const p = this._partials;
            let i = 0;
            for (let j = 0; j < this._n && j < 32; j++) {
              const y = p[j], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
              if (lo)
                p[i++] = lo;
              x = hi;
            }
            p[i] = x;
            this._n = i + 1;
            return this;
          }
          valueOf() {
            const p = this._partials;
            let n = this._n, x, y, lo, hi = 0;
            if (n > 0) {
              hi = p[--n];
              while (n > 0) {
                x = hi;
                y = p[--n];
                hi = x + y;
                lo = y - (hi - x);
                if (lo)
                  break;
              }
              if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
                y = lo * 2;
                x = hi + y;
                if (y == x - hi)
                  hi = x;
              }
            }
            return hi;
          }
        }
        function fsum(values, valueof) {
          const adder = new Adder();
          if (valueof === void 0) {
            for (let value of values) {
              if (value = +value) {
                adder.add(value);
              }
            }
          } else {
            let index2 = -1;
            for (let value of values) {
              if (value = +valueof(value, ++index2, values)) {
                adder.add(value);
              }
            }
          }
          return +adder;
        }
        function fcumsum(values, valueof) {
          const adder = new Adder();
          let index2 = -1;
          return Float64Array.from(values, valueof === void 0 ? (v) => adder.add(+v || 0) : (v) => adder.add(+valueof(v, ++index2, values) || 0));
        }
        class InternMap extends Map {
          constructor(entries, key = keyof) {
            super();
            Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
            if (entries != null)
              for (const [key2, value] of entries)
                this.set(key2, value);
          }
          get(key) {
            return super.get(intern_get(this, key));
          }
          has(key) {
            return super.has(intern_get(this, key));
          }
          set(key, value) {
            return super.set(intern_set(this, key), value);
          }
          delete(key) {
            return super.delete(intern_delete(this, key));
          }
        }
        class InternSet extends Set {
          constructor(values, key = keyof) {
            super();
            Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
            if (values != null)
              for (const value of values)
                this.add(value);
          }
          has(value) {
            return super.has(intern_get(this, value));
          }
          add(value) {
            return super.add(intern_set(this, value));
          }
          delete(value) {
            return super.delete(intern_delete(this, value));
          }
        }
        function intern_get({ _intern, _key }, value) {
          const key = _key(value);
          return _intern.has(key) ? _intern.get(key) : value;
        }
        function intern_set({ _intern, _key }, value) {
          const key = _key(value);
          if (_intern.has(key))
            return _intern.get(key);
          _intern.set(key, value);
          return value;
        }
        function intern_delete({ _intern, _key }, value) {
          const key = _key(value);
          if (_intern.has(key)) {
            value = _intern.get(value);
            _intern.delete(key);
          }
          return value;
        }
        function keyof(value) {
          return value !== null && typeof value === "object" ? value.valueOf() : value;
        }
        function identity(x) {
          return x;
        }
        function group(values, ...keys) {
          return nest(values, identity, identity, keys);
        }
        function groups(values, ...keys) {
          return nest(values, Array.from, identity, keys);
        }
        function rollup(values, reduce2, ...keys) {
          return nest(values, identity, reduce2, keys);
        }
        function rollups(values, reduce2, ...keys) {
          return nest(values, Array.from, reduce2, keys);
        }
        function index(values, ...keys) {
          return nest(values, identity, unique, keys);
        }
        function indexes(values, ...keys) {
          return nest(values, Array.from, unique, keys);
        }
        function unique(values) {
          if (values.length !== 1)
            throw new Error("duplicate key");
          return values[0];
        }
        function nest(values, map2, reduce2, keys) {
          return function regroup(values2, i) {
            if (i >= keys.length)
              return reduce2(values2);
            const groups2 = new InternMap();
            const keyof2 = keys[i++];
            let index2 = -1;
            for (const value of values2) {
              const key = keyof2(value, ++index2, values2);
              const group2 = groups2.get(key);
              if (group2)
                group2.push(value);
              else
                groups2.set(key, [value]);
            }
            for (const [key, values3] of groups2) {
              groups2.set(key, regroup(values3, i));
            }
            return map2(groups2);
          }(values, 0);
        }
        function permute(source, keys) {
          return Array.from(keys, (key) => source[key]);
        }
        function sort(values, ...F) {
          if (typeof values[Symbol.iterator] !== "function")
            throw new TypeError("values is not iterable");
          values = Array.from(values);
          let [f = ascending] = F;
          if (f.length === 1 || F.length > 1) {
            const index2 = Uint32Array.from(values, (d, i) => i);
            if (F.length > 1) {
              F = F.map((f2) => values.map(f2));
              index2.sort((i, j) => {
                for (const f2 of F) {
                  const c = ascending(f2[i], f2[j]);
                  if (c)
                    return c;
                }
              });
            } else {
              f = values.map(f);
              index2.sort((i, j) => ascending(f[i], f[j]));
            }
            return permute(values, index2);
          }
          return values.sort(f);
        }
        function groupSort(values, reduce2, key) {
          return (reduce2.length === 1 ? sort(rollup(values, reduce2, key), ([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)) : sort(group(values, key), ([ak, av], [bk, bv]) => reduce2(av, bv) || ascending(ak, bk))).map(([key2]) => key2);
        }
        var array = Array.prototype;
        var slice = array.slice;
        function constant(x) {
          return function() {
            return x;
          };
        }
        var e10 = Math.sqrt(50), e5 = Math.sqrt(10), e2 = Math.sqrt(2);
        function ticks(start, stop, count2) {
          var reverse2, i = -1, n, ticks2, step;
          stop = +stop, start = +start, count2 = +count2;
          if (start === stop && count2 > 0)
            return [start];
          if (reverse2 = stop < start)
            n = start, start = stop, stop = n;
          if ((step = tickIncrement(start, stop, count2)) === 0 || !isFinite(step))
            return [];
          if (step > 0) {
            let r0 = Math.round(start / step), r1 = Math.round(stop / step);
            if (r0 * step < start)
              ++r0;
            if (r1 * step > stop)
              --r1;
            ticks2 = new Array(n = r1 - r0 + 1);
            while (++i < n)
              ticks2[i] = (r0 + i) * step;
          } else {
            step = -step;
            let r0 = Math.round(start * step), r1 = Math.round(stop * step);
            if (r0 / step < start)
              ++r0;
            if (r1 / step > stop)
              --r1;
            ticks2 = new Array(n = r1 - r0 + 1);
            while (++i < n)
              ticks2[i] = (r0 + i) / step;
          }
          if (reverse2)
            ticks2.reverse();
          return ticks2;
        }
        function tickIncrement(start, stop, count2) {
          var step = (stop - start) / Math.max(0, count2), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
          return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
        }
        function tickStep(start, stop, count2) {
          var step0 = Math.abs(stop - start) / Math.max(0, count2), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
          if (error >= e10)
            step1 *= 10;
          else if (error >= e5)
            step1 *= 5;
          else if (error >= e2)
            step1 *= 2;
          return stop < start ? -step1 : step1;
        }
        function nice(start, stop, count2) {
          let prestep;
          while (true) {
            const step = tickIncrement(start, stop, count2);
            if (step === prestep || step === 0 || !isFinite(step)) {
              return [start, stop];
            } else if (step > 0) {
              start = Math.floor(start / step) * step;
              stop = Math.ceil(stop / step) * step;
            } else if (step < 0) {
              start = Math.ceil(start * step) / step;
              stop = Math.floor(stop * step) / step;
            }
            prestep = step;
          }
        }
        function sturges(values) {
          return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
        }
        function bin() {
          var value = identity, domain = extent, threshold = sturges;
          function histogram(data) {
            if (!Array.isArray(data))
              data = Array.from(data);
            var i, n = data.length, x, values = new Array(n);
            for (i = 0; i < n; ++i) {
              values[i] = value(data[i], i, data);
            }
            var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
            if (!Array.isArray(tz)) {
              const max2 = x1, tn = +tz;
              if (domain === extent)
                [x0, x1] = nice(x0, x1, tn);
              tz = ticks(x0, x1, tn);
              if (tz[tz.length - 1] >= x1) {
                if (max2 >= x1 && domain === extent) {
                  const step = tickIncrement(x0, x1, tn);
                  if (isFinite(step)) {
                    if (step > 0) {
                      x1 = (Math.floor(x1 / step) + 1) * step;
                    } else if (step < 0) {
                      x1 = (Math.ceil(x1 * -step) + 1) / -step;
                    }
                  }
                } else {
                  tz.pop();
                }
              }
            }
            var m = tz.length;
            while (tz[0] <= x0)
              tz.shift(), --m;
            while (tz[m - 1] > x1)
              tz.pop(), --m;
            var bins = new Array(m + 1), bin2;
            for (i = 0; i <= m; ++i) {
              bin2 = bins[i] = [];
              bin2.x0 = i > 0 ? tz[i - 1] : x0;
              bin2.x1 = i < m ? tz[i] : x1;
            }
            for (i = 0; i < n; ++i) {
              x = values[i];
              if (x0 <= x && x <= x1) {
                bins[bisectRight(tz, x, 0, m)].push(data[i]);
              }
            }
            return bins;
          }
          histogram.value = function(_) {
            return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
          };
          histogram.domain = function(_) {
            return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
          };
          histogram.thresholds = function(_) {
            return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
          };
          return histogram;
        }
        function max(values, valueof) {
          let max2;
          if (valueof === void 0) {
            for (const value of values) {
              if (value != null && (max2 < value || max2 === void 0 && value >= value)) {
                max2 = value;
              }
            }
          } else {
            let index2 = -1;
            for (let value of values) {
              if ((value = valueof(value, ++index2, values)) != null && (max2 < value || max2 === void 0 && value >= value)) {
                max2 = value;
              }
            }
          }
          return max2;
        }
        function min(values, valueof) {
          let min2;
          if (valueof === void 0) {
            for (const value of values) {
              if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
                min2 = value;
              }
            }
          } else {
            let index2 = -1;
            for (let value of values) {
              if ((value = valueof(value, ++index2, values)) != null && (min2 > value || min2 === void 0 && value >= value)) {
                min2 = value;
              }
            }
          }
          return min2;
        }
        function quickselect(array2, k, left = 0, right = array2.length - 1, compare = ascending) {
          while (right > left) {
            if (right - left > 600) {
              const n = right - left + 1;
              const m = k - left + 1;
              const z = Math.log(n);
              const s = 0.5 * Math.exp(2 * z / 3);
              const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
              const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
              const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
              quickselect(array2, k, newLeft, newRight, compare);
            }
            const t = array2[k];
            let i = left;
            let j = right;
            swap(array2, left, k);
            if (compare(array2[right], t) > 0)
              swap(array2, left, right);
            while (i < j) {
              swap(array2, i, j), ++i, --j;
              while (compare(array2[i], t) < 0)
                ++i;
              while (compare(array2[j], t) > 0)
                --j;
            }
            if (compare(array2[left], t) === 0)
              swap(array2, left, j);
            else
              ++j, swap(array2, j, right);
            if (j <= k)
              left = j + 1;
            if (k <= j)
              right = j - 1;
          }
          return array2;
        }
        function swap(array2, i, j) {
          const t = array2[i];
          array2[i] = array2[j];
          array2[j] = t;
        }
        function quantile(values, p, valueof) {
          values = Float64Array.from(numbers(values, valueof));
          if (!(n = values.length))
            return;
          if ((p = +p) <= 0 || n < 2)
            return min(values);
          if (p >= 1)
            return max(values);
          var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = max(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min(values.subarray(i0 + 1));
          return value0 + (value1 - value0) * (i - i0);
        }
        function quantileSorted(values, p, valueof = number) {
          if (!(n = values.length))
            return;
          if ((p = +p) <= 0 || n < 2)
            return +valueof(values[0], 0, values);
          if (p >= 1)
            return +valueof(values[n - 1], n - 1, values);
          var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
          return value0 + (value1 - value0) * (i - i0);
        }
        function freedmanDiaconis(values, min2, max2) {
          return Math.ceil((max2 - min2) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));
        }
        function scott(values, min2, max2) {
          return Math.ceil((max2 - min2) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));
        }
        function maxIndex(values, valueof) {
          let max2;
          let maxIndex2 = -1;
          let index2 = -1;
          if (valueof === void 0) {
            for (const value of values) {
              ++index2;
              if (value != null && (max2 < value || max2 === void 0 && value >= value)) {
                max2 = value, maxIndex2 = index2;
              }
            }
          } else {
            for (let value of values) {
              if ((value = valueof(value, ++index2, values)) != null && (max2 < value || max2 === void 0 && value >= value)) {
                max2 = value, maxIndex2 = index2;
              }
            }
          }
          return maxIndex2;
        }
        function mean(values, valueof) {
          let count2 = 0;
          let sum2 = 0;
          if (valueof === void 0) {
            for (let value of values) {
              if (value != null && (value = +value) >= value) {
                ++count2, sum2 += value;
              }
            }
          } else {
            let index2 = -1;
            for (let value of values) {
              if ((value = valueof(value, ++index2, values)) != null && (value = +value) >= value) {
                ++count2, sum2 += value;
              }
            }
          }
          if (count2)
            return sum2 / count2;
        }
        function median(values, valueof) {
          return quantile(values, 0.5, valueof);
        }
        function* flatten(arrays) {
          for (const array2 of arrays) {
            yield* array2;
          }
        }
        function merge(arrays) {
          return Array.from(flatten(arrays));
        }
        function minIndex(values, valueof) {
          let min2;
          let minIndex2 = -1;
          let index2 = -1;
          if (valueof === void 0) {
            for (const value of values) {
              ++index2;
              if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
                min2 = value, minIndex2 = index2;
              }
            }
          } else {
            for (let value of values) {
              if ((value = valueof(value, ++index2, values)) != null && (min2 > value || min2 === void 0 && value >= value)) {
                min2 = value, minIndex2 = index2;
              }
            }
          }
          return minIndex2;
        }
        function pairs(values, pairof = pair) {
          const pairs2 = [];
          let previous;
          let first = false;
          for (const value of values) {
            if (first)
              pairs2.push(pairof(previous, value));
            previous = value;
            first = true;
          }
          return pairs2;
        }
        function pair(a, b) {
          return [a, b];
        }
        function range(start, stop, step) {
          start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
          var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range2 = new Array(n);
          while (++i < n) {
            range2[i] = start + i * step;
          }
          return range2;
        }
        function least(values, compare = ascending) {
          let min2;
          let defined = false;
          if (compare.length === 1) {
            let minValue;
            for (const element of values) {
              const value = compare(element);
              if (defined ? ascending(value, minValue) < 0 : ascending(value, value) === 0) {
                min2 = element;
                minValue = value;
                defined = true;
              }
            }
          } else {
            for (const value of values) {
              if (defined ? compare(value, min2) < 0 : compare(value, value) === 0) {
                min2 = value;
                defined = true;
              }
            }
          }
          return min2;
        }
        function leastIndex(values, compare = ascending) {
          if (compare.length === 1)
            return minIndex(values, compare);
          let minValue;
          let min2 = -1;
          let index2 = -1;
          for (const value of values) {
            ++index2;
            if (min2 < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {
              minValue = value;
              min2 = index2;
            }
          }
          return min2;
        }
        function greatest(values, compare = ascending) {
          let max2;
          let defined = false;
          if (compare.length === 1) {
            let maxValue;
            for (const element of values) {
              const value = compare(element);
              if (defined ? ascending(value, maxValue) > 0 : ascending(value, value) === 0) {
                max2 = element;
                maxValue = value;
                defined = true;
              }
            }
          } else {
            for (const value of values) {
              if (defined ? compare(value, max2) > 0 : compare(value, value) === 0) {
                max2 = value;
                defined = true;
              }
            }
          }
          return max2;
        }
        function greatestIndex(values, compare = ascending) {
          if (compare.length === 1)
            return maxIndex(values, compare);
          let maxValue;
          let max2 = -1;
          let index2 = -1;
          for (const value of values) {
            ++index2;
            if (max2 < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {
              maxValue = value;
              max2 = index2;
            }
          }
          return max2;
        }
        function scan(values, compare) {
          const index2 = leastIndex(values, compare);
          return index2 < 0 ? void 0 : index2;
        }
        var shuffle = shuffler(Math.random);
        function shuffler(random) {
          return function shuffle2(array2, i0 = 0, i1 = array2.length) {
            let m = i1 - (i0 = +i0);
            while (m) {
              const i = random() * m-- | 0, t = array2[m + i0];
              array2[m + i0] = array2[i + i0];
              array2[i + i0] = t;
            }
            return array2;
          };
        }
        function sum(values, valueof) {
          let sum2 = 0;
          if (valueof === void 0) {
            for (let value of values) {
              if (value = +value) {
                sum2 += value;
              }
            }
          } else {
            let index2 = -1;
            for (let value of values) {
              if (value = +valueof(value, ++index2, values)) {
                sum2 += value;
              }
            }
          }
          return sum2;
        }
        function transpose(matrix) {
          if (!(n = matrix.length))
            return [];
          for (var i = -1, m = min(matrix, length), transpose2 = new Array(m); ++i < m; ) {
            for (var j = -1, n, row = transpose2[i] = new Array(n); ++j < n; ) {
              row[j] = matrix[j][i];
            }
          }
          return transpose2;
        }
        function length(d) {
          return d.length;
        }
        function zip() {
          return transpose(arguments);
        }
        function every(values, test) {
          if (typeof test !== "function")
            throw new TypeError("test is not a function");
          let index2 = -1;
          for (const value of values) {
            if (!test(value, ++index2, values)) {
              return false;
            }
          }
          return true;
        }
        function some(values, test) {
          if (typeof test !== "function")
            throw new TypeError("test is not a function");
          let index2 = -1;
          for (const value of values) {
            if (test(value, ++index2, values)) {
              return true;
            }
          }
          return false;
        }
        function filter(values, test) {
          if (typeof test !== "function")
            throw new TypeError("test is not a function");
          const array2 = [];
          let index2 = -1;
          for (const value of values) {
            if (test(value, ++index2, values)) {
              array2.push(value);
            }
          }
          return array2;
        }
        function map(values, mapper) {
          if (typeof values[Symbol.iterator] !== "function")
            throw new TypeError("values is not iterable");
          if (typeof mapper !== "function")
            throw new TypeError("mapper is not a function");
          return Array.from(values, (value, index2) => mapper(value, index2, values));
        }
        function reduce(values, reducer3, value) {
          if (typeof reducer3 !== "function")
            throw new TypeError("reducer is not a function");
          const iterator = values[Symbol.iterator]();
          let done, next, index2 = -1;
          if (arguments.length < 3) {
            ({ done, value } = iterator.next());
            if (done)
              return;
            ++index2;
          }
          while ({ done, value: next } = iterator.next(), !done) {
            value = reducer3(value, next, ++index2, values);
          }
          return value;
        }
        function reverse(values) {
          if (typeof values[Symbol.iterator] !== "function")
            throw new TypeError("values is not iterable");
          return Array.from(values).reverse();
        }
        function difference(values, ...others) {
          values = new Set(values);
          for (const other of others) {
            for (const value of other) {
              values.delete(value);
            }
          }
          return values;
        }
        function disjoint(values, other) {
          const iterator = other[Symbol.iterator](), set2 = /* @__PURE__ */ new Set();
          for (const v of values) {
            if (set2.has(v))
              return false;
            let value, done;
            while ({ value, done } = iterator.next()) {
              if (done)
                break;
              if (Object.is(v, value))
                return false;
              set2.add(value);
            }
          }
          return true;
        }
        function set(values) {
          return values instanceof Set ? values : new Set(values);
        }
        function intersection(values, ...others) {
          values = new Set(values);
          others = others.map(set);
          out:
            for (const value of values) {
              for (const other of others) {
                if (!other.has(value)) {
                  values.delete(value);
                  continue out;
                }
              }
            }
          return values;
        }
        function superset(values, other) {
          const iterator = values[Symbol.iterator](), set2 = /* @__PURE__ */ new Set();
          for (const o of other) {
            if (set2.has(o))
              continue;
            let value, done;
            while ({ value, done } = iterator.next()) {
              if (done)
                return false;
              set2.add(value);
              if (Object.is(o, value))
                break;
            }
          }
          return true;
        }
        function subset(values, other) {
          return superset(other, values);
        }
        function union(...others) {
          const set2 = /* @__PURE__ */ new Set();
          for (const other of others) {
            for (const o of other) {
              set2.add(o);
            }
          }
          return set2;
        }
        exports2.Adder = Adder;
        exports2.InternMap = InternMap;
        exports2.InternSet = InternSet;
        exports2.ascending = ascending;
        exports2.bin = bin;
        exports2.bisect = bisectRight;
        exports2.bisectCenter = bisectCenter;
        exports2.bisectLeft = bisectLeft;
        exports2.bisectRight = bisectRight;
        exports2.bisector = bisector;
        exports2.count = count;
        exports2.cross = cross;
        exports2.cumsum = cumsum;
        exports2.descending = descending;
        exports2.deviation = deviation;
        exports2.difference = difference;
        exports2.disjoint = disjoint;
        exports2.every = every;
        exports2.extent = extent;
        exports2.fcumsum = fcumsum;
        exports2.filter = filter;
        exports2.fsum = fsum;
        exports2.greatest = greatest;
        exports2.greatestIndex = greatestIndex;
        exports2.group = group;
        exports2.groupSort = groupSort;
        exports2.groups = groups;
        exports2.histogram = bin;
        exports2.index = index;
        exports2.indexes = indexes;
        exports2.intersection = intersection;
        exports2.least = least;
        exports2.leastIndex = leastIndex;
        exports2.map = map;
        exports2.max = max;
        exports2.maxIndex = maxIndex;
        exports2.mean = mean;
        exports2.median = median;
        exports2.merge = merge;
        exports2.min = min;
        exports2.minIndex = minIndex;
        exports2.nice = nice;
        exports2.pairs = pairs;
        exports2.permute = permute;
        exports2.quantile = quantile;
        exports2.quantileSorted = quantileSorted;
        exports2.quickselect = quickselect;
        exports2.range = range;
        exports2.reduce = reduce;
        exports2.reverse = reverse;
        exports2.rollup = rollup;
        exports2.rollups = rollups;
        exports2.scan = scan;
        exports2.shuffle = shuffle;
        exports2.shuffler = shuffler;
        exports2.some = some;
        exports2.sort = sort;
        exports2.subset = subset;
        exports2.sum = sum;
        exports2.superset = superset;
        exports2.thresholdFreedmanDiaconis = freedmanDiaconis;
        exports2.thresholdScott = scott;
        exports2.thresholdSturges = sturges;
        exports2.tickIncrement = tickIncrement;
        exports2.tickStep = tickStep;
        exports2.ticks = ticks;
        exports2.transpose = transpose;
        exports2.union = union;
        exports2.variance = variance;
        exports2.zip = zip;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-axis-npm-2.1.0-816aebf886-43d80f68e5.zip/node_modules/d3-axis/dist/d3-axis.js
  var require_d3_axis = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-axis-npm-2.1.0-816aebf886-43d80f68e5.zip/node_modules/d3-axis/dist/d3-axis.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        var slice = Array.prototype.slice;
        function identity(x) {
          return x;
        }
        var top = 1, right = 2, bottom = 3, left = 4, epsilon = 1e-6;
        function translateX(x) {
          return "translate(" + x + ",0)";
        }
        function translateY(y) {
          return "translate(0," + y + ")";
        }
        function number(scale) {
          return (d) => +scale(d);
        }
        function center(scale, offset) {
          offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
          if (scale.round())
            offset = Math.round(offset);
          return (d) => +scale(d) + offset;
        }
        function entering() {
          return !this.__axis;
        }
        function axis(orient, scale) {
          var tickArguments = [], tickValues = null, tickFormat = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5, k = orient === top || orient === left ? -1 : 1, x = orient === left || orient === right ? "x" : "y", transform = orient === top || orient === bottom ? translateX : translateY;
          function axis2(context) {
            var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, range = scale.range(), range0 = +range[0] + offset, range1 = +range[range.length - 1] + offset, position = (scale.bandwidth ? center : number)(scale.copy(), offset), selection = context.selection ? context.selection() : context, path = selection.selectAll(".domain").data([null]), tick = selection.selectAll(".tick").data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line2 = tick.select("line"), text = tick.select("text");
            path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
            tick = tick.merge(tickEnter);
            line2 = line2.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
            text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
            if (context !== selection) {
              path = path.transition(context);
              tick = tick.transition(context);
              line2 = line2.transition(context);
              text = text.transition(context);
              tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function(d) {
                return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform");
              });
              tickEnter.attr("opacity", epsilon).attr("transform", function(d) {
                var p = this.parentNode.__axis;
                return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset);
              });
            }
            tickExit.remove();
            path.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1);
            tick.attr("opacity", 1).attr("transform", function(d) {
              return transform(position(d) + offset);
            });
            line2.attr(x + "2", k * tickSizeInner);
            text.attr(x, k * spacing).text(format);
            selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
            selection.each(function() {
              this.__axis = position;
            });
          }
          axis2.scale = function(_) {
            return arguments.length ? (scale = _, axis2) : scale;
          };
          axis2.ticks = function() {
            return tickArguments = slice.call(arguments), axis2;
          };
          axis2.tickArguments = function(_) {
            return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis2) : tickArguments.slice();
          };
          axis2.tickValues = function(_) {
            return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis2) : tickValues && tickValues.slice();
          };
          axis2.tickFormat = function(_) {
            return arguments.length ? (tickFormat = _, axis2) : tickFormat;
          };
          axis2.tickSize = function(_) {
            return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis2) : tickSizeInner;
          };
          axis2.tickSizeInner = function(_) {
            return arguments.length ? (tickSizeInner = +_, axis2) : tickSizeInner;
          };
          axis2.tickSizeOuter = function(_) {
            return arguments.length ? (tickSizeOuter = +_, axis2) : tickSizeOuter;
          };
          axis2.tickPadding = function(_) {
            return arguments.length ? (tickPadding = +_, axis2) : tickPadding;
          };
          axis2.offset = function(_) {
            return arguments.length ? (offset = +_, axis2) : offset;
          };
          return axis2;
        }
        function axisTop(scale) {
          return axis(top, scale);
        }
        function axisRight(scale) {
          return axis(right, scale);
        }
        function axisBottom2(scale) {
          return axis(bottom, scale);
        }
        function axisLeft2(scale) {
          return axis(left, scale);
        }
        exports2.axisBottom = axisBottom2;
        exports2.axisLeft = axisLeft2;
        exports2.axisRight = axisRight;
        exports2.axisTop = axisTop;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-dispatch-npm-2.0.0-1417ab6cc8-cf473676ae.zip/node_modules/d3-dispatch/dist/d3-dispatch.js
  var require_d3_dispatch = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-dispatch-npm-2.0.0-1417ab6cc8-cf473676ae.zip/node_modules/d3-dispatch/dist/d3-dispatch.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        var noop = { value: () => {
        } };
        function dispatch() {
          for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
            if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
              throw new Error("illegal type: " + t);
            _[t] = [];
          }
          return new Dispatch(_);
        }
        function Dispatch(_) {
          this._ = _;
        }
        function parseTypenames(typenames, types) {
          return typenames.trim().split(/^|\s+/).map(function(t) {
            var name = "", i = t.indexOf(".");
            if (i >= 0)
              name = t.slice(i + 1), t = t.slice(0, i);
            if (t && !types.hasOwnProperty(t))
              throw new Error("unknown type: " + t);
            return { type: t, name };
          });
        }
        Dispatch.prototype = dispatch.prototype = {
          constructor: Dispatch,
          on: function(typename, callback) {
            var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
            if (arguments.length < 2) {
              while (++i < n)
                if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name)))
                  return t;
              return;
            }
            if (callback != null && typeof callback !== "function")
              throw new Error("invalid callback: " + callback);
            while (++i < n) {
              if (t = (typename = T[i]).type)
                _[t] = set(_[t], typename.name, callback);
              else if (callback == null)
                for (t in _)
                  _[t] = set(_[t], typename.name, null);
            }
            return this;
          },
          copy: function() {
            var copy = {}, _ = this._;
            for (var t in _)
              copy[t] = _[t].slice();
            return new Dispatch(copy);
          },
          call: function(type, that) {
            if ((n = arguments.length - 2) > 0)
              for (var args = new Array(n), i = 0, n, t; i < n; ++i)
                args[i] = arguments[i + 2];
            if (!this._.hasOwnProperty(type))
              throw new Error("unknown type: " + type);
            for (t = this._[type], i = 0, n = t.length; i < n; ++i)
              t[i].value.apply(that, args);
          },
          apply: function(type, that, args) {
            if (!this._.hasOwnProperty(type))
              throw new Error("unknown type: " + type);
            for (var t = this._[type], i = 0, n = t.length; i < n; ++i)
              t[i].value.apply(that, args);
          }
        };
        function get(type, name) {
          for (var i = 0, n = type.length, c; i < n; ++i) {
            if ((c = type[i]).name === name) {
              return c.value;
            }
          }
        }
        function set(type, name, callback) {
          for (var i = 0, n = type.length; i < n; ++i) {
            if (type[i].name === name) {
              type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
              break;
            }
          }
          if (callback != null)
            type.push({ name, value: callback });
          return type;
        }
        exports2.dispatch = dispatch;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-selection-npm-2.0.0-b10bfedd78-c00143f55d.zip/node_modules/d3-selection/dist/d3-selection.js
  var require_d3_selection = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-selection-npm-2.0.0-b10bfedd78-c00143f55d.zip/node_modules/d3-selection/dist/d3-selection.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        var xhtml = "http://www.w3.org/1999/xhtml";
        var namespaces = {
          svg: "http://www.w3.org/2000/svg",
          xhtml,
          xlink: "http://www.w3.org/1999/xlink",
          xml: "http://www.w3.org/XML/1998/namespace",
          xmlns: "http://www.w3.org/2000/xmlns/"
        };
        function namespace(name) {
          var prefix = name += "", i = prefix.indexOf(":");
          if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns")
            name = name.slice(i + 1);
          return namespaces.hasOwnProperty(prefix) ? { space: namespaces[prefix], local: name } : name;
        }
        function creatorInherit(name) {
          return function() {
            var document2 = this.ownerDocument, uri = this.namespaceURI;
            return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
          };
        }
        function creatorFixed(fullname) {
          return function() {
            return this.ownerDocument.createElementNS(fullname.space, fullname.local);
          };
        }
        function creator(name) {
          var fullname = namespace(name);
          return (fullname.local ? creatorFixed : creatorInherit)(fullname);
        }
        function none() {
        }
        function selector(selector2) {
          return selector2 == null ? none : function() {
            return this.querySelector(selector2);
          };
        }
        function selection_select(select3) {
          if (typeof select3 !== "function")
            select3 = selector(select3);
          for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
              if ((node = group[i]) && (subnode = select3.call(node, node.__data__, i, group))) {
                if ("__data__" in node)
                  subnode.__data__ = node.__data__;
                subgroup[i] = subnode;
              }
            }
          }
          return new Selection(subgroups, this._parents);
        }
        function array(x) {
          return typeof x === "object" && "length" in x ? x : Array.from(x);
        }
        function empty() {
          return [];
        }
        function selectorAll(selector2) {
          return selector2 == null ? empty : function() {
            return this.querySelectorAll(selector2);
          };
        }
        function arrayAll(select3) {
          return function() {
            var group = select3.apply(this, arguments);
            return group == null ? [] : array(group);
          };
        }
        function selection_selectAll(select3) {
          if (typeof select3 === "function")
            select3 = arrayAll(select3);
          else
            select3 = selectorAll(select3);
          for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
              if (node = group[i]) {
                subgroups.push(select3.call(node, node.__data__, i, group));
                parents.push(node);
              }
            }
          }
          return new Selection(subgroups, parents);
        }
        function matcher(selector2) {
          return function() {
            return this.matches(selector2);
          };
        }
        function childMatcher(selector2) {
          return function(node) {
            return node.matches(selector2);
          };
        }
        var find = Array.prototype.find;
        function childFind(match) {
          return function() {
            return find.call(this.children, match);
          };
        }
        function childFirst() {
          return this.firstElementChild;
        }
        function selection_selectChild(match) {
          return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
        }
        var filter = Array.prototype.filter;
        function children() {
          return this.children;
        }
        function childrenFilter(match) {
          return function() {
            return filter.call(this.children, match);
          };
        }
        function selection_selectChildren(match) {
          return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
        }
        function selection_filter(match) {
          if (typeof match !== "function")
            match = matcher(match);
          for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
              if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                subgroup.push(node);
              }
            }
          }
          return new Selection(subgroups, this._parents);
        }
        function sparse(update) {
          return new Array(update.length);
        }
        function selection_enter() {
          return new Selection(this._enter || this._groups.map(sparse), this._parents);
        }
        function EnterNode(parent, datum2) {
          this.ownerDocument = parent.ownerDocument;
          this.namespaceURI = parent.namespaceURI;
          this._next = null;
          this._parent = parent;
          this.__data__ = datum2;
        }
        EnterNode.prototype = {
          constructor: EnterNode,
          appendChild: function(child) {
            return this._parent.insertBefore(child, this._next);
          },
          insertBefore: function(child, next) {
            return this._parent.insertBefore(child, next);
          },
          querySelector: function(selector2) {
            return this._parent.querySelector(selector2);
          },
          querySelectorAll: function(selector2) {
            return this._parent.querySelectorAll(selector2);
          }
        };
        function constant(x) {
          return function() {
            return x;
          };
        }
        function bindIndex(parent, group, enter, update, exit, data) {
          var i = 0, node, groupLength = group.length, dataLength = data.length;
          for (; i < dataLength; ++i) {
            if (node = group[i]) {
              node.__data__ = data[i];
              update[i] = node;
            } else {
              enter[i] = new EnterNode(parent, data[i]);
            }
          }
          for (; i < groupLength; ++i) {
            if (node = group[i]) {
              exit[i] = node;
            }
          }
        }
        function bindKey(parent, group, enter, update, exit, data, key) {
          var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
          for (i = 0; i < groupLength; ++i) {
            if (node = group[i]) {
              keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
              if (nodeByKeyValue.has(keyValue)) {
                exit[i] = node;
              } else {
                nodeByKeyValue.set(keyValue, node);
              }
            }
          }
          for (i = 0; i < dataLength; ++i) {
            keyValue = key.call(parent, data[i], i, data) + "";
            if (node = nodeByKeyValue.get(keyValue)) {
              update[i] = node;
              node.__data__ = data[i];
              nodeByKeyValue.delete(keyValue);
            } else {
              enter[i] = new EnterNode(parent, data[i]);
            }
          }
          for (i = 0; i < groupLength; ++i) {
            if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
              exit[i] = node;
            }
          }
        }
        function datum(node) {
          return node.__data__;
        }
        function selection_data(value, key) {
          if (!arguments.length)
            return Array.from(this, datum);
          var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
          if (typeof value !== "function")
            value = constant(value);
          for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
            var parent = parents[j], group = groups[j], groupLength = group.length, data = array(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
            bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
            for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
              if (previous = enterGroup[i0]) {
                if (i0 >= i1)
                  i1 = i0 + 1;
                while (!(next = updateGroup[i1]) && ++i1 < dataLength)
                  ;
                previous._next = next || null;
              }
            }
          }
          update = new Selection(update, parents);
          update._enter = enter;
          update._exit = exit;
          return update;
        }
        function selection_exit() {
          return new Selection(this._exit || this._groups.map(sparse), this._parents);
        }
        function selection_join(onenter, onupdate, onexit) {
          var enter = this.enter(), update = this, exit = this.exit();
          enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
          if (onupdate != null)
            update = onupdate(update);
          if (onexit == null)
            exit.remove();
          else
            onexit(exit);
          return enter && update ? enter.merge(update).order() : update;
        }
        function selection_merge(selection2) {
          if (!(selection2 instanceof Selection))
            throw new Error("invalid merge");
          for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
            for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
              if (node = group0[i] || group1[i]) {
                merge[i] = node;
              }
            }
          }
          for (; j < m0; ++j) {
            merges[j] = groups0[j];
          }
          return new Selection(merges, this._parents);
        }
        function selection_order() {
          for (var groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
            for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
              if (node = group[i]) {
                if (next && node.compareDocumentPosition(next) ^ 4)
                  next.parentNode.insertBefore(node, next);
                next = node;
              }
            }
          }
          return this;
        }
        function selection_sort(compare) {
          if (!compare)
            compare = ascending;
          function compareNode(a, b) {
            return a && b ? compare(a.__data__, b.__data__) : !a - !b;
          }
          for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
              if (node = group[i]) {
                sortgroup[i] = node;
              }
            }
            sortgroup.sort(compareNode);
          }
          return new Selection(sortgroups, this._parents).order();
        }
        function ascending(a, b) {
          return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
        }
        function selection_call() {
          var callback = arguments[0];
          arguments[0] = this;
          callback.apply(null, arguments);
          return this;
        }
        function selection_nodes() {
          return Array.from(this);
        }
        function selection_node() {
          for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
            for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
              var node = group[i];
              if (node)
                return node;
            }
          }
          return null;
        }
        function selection_size() {
          let size = 0;
          for (const node of this)
            ++size;
          return size;
        }
        function selection_empty() {
          return !this.node();
        }
        function selection_each(callback) {
          for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
            for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
              if (node = group[i])
                callback.call(node, node.__data__, i, group);
            }
          }
          return this;
        }
        function attrRemove(name) {
          return function() {
            this.removeAttribute(name);
          };
        }
        function attrRemoveNS(fullname) {
          return function() {
            this.removeAttributeNS(fullname.space, fullname.local);
          };
        }
        function attrConstant(name, value) {
          return function() {
            this.setAttribute(name, value);
          };
        }
        function attrConstantNS(fullname, value) {
          return function() {
            this.setAttributeNS(fullname.space, fullname.local, value);
          };
        }
        function attrFunction(name, value) {
          return function() {
            var v = value.apply(this, arguments);
            if (v == null)
              this.removeAttribute(name);
            else
              this.setAttribute(name, v);
          };
        }
        function attrFunctionNS(fullname, value) {
          return function() {
            var v = value.apply(this, arguments);
            if (v == null)
              this.removeAttributeNS(fullname.space, fullname.local);
            else
              this.setAttributeNS(fullname.space, fullname.local, v);
          };
        }
        function selection_attr(name, value) {
          var fullname = namespace(name);
          if (arguments.length < 2) {
            var node = this.node();
            return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
          }
          return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
        }
        function defaultView(node) {
          return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
        }
        function styleRemove(name) {
          return function() {
            this.style.removeProperty(name);
          };
        }
        function styleConstant(name, value, priority) {
          return function() {
            this.style.setProperty(name, value, priority);
          };
        }
        function styleFunction(name, value, priority) {
          return function() {
            var v = value.apply(this, arguments);
            if (v == null)
              this.style.removeProperty(name);
            else
              this.style.setProperty(name, v, priority);
          };
        }
        function selection_style(name, value, priority) {
          return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
        }
        function styleValue(node, name) {
          return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
        }
        function propertyRemove(name) {
          return function() {
            delete this[name];
          };
        }
        function propertyConstant(name, value) {
          return function() {
            this[name] = value;
          };
        }
        function propertyFunction(name, value) {
          return function() {
            var v = value.apply(this, arguments);
            if (v == null)
              delete this[name];
            else
              this[name] = v;
          };
        }
        function selection_property(name, value) {
          return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
        }
        function classArray(string) {
          return string.trim().split(/^|\s+/);
        }
        function classList(node) {
          return node.classList || new ClassList(node);
        }
        function ClassList(node) {
          this._node = node;
          this._names = classArray(node.getAttribute("class") || "");
        }
        ClassList.prototype = {
          add: function(name) {
            var i = this._names.indexOf(name);
            if (i < 0) {
              this._names.push(name);
              this._node.setAttribute("class", this._names.join(" "));
            }
          },
          remove: function(name) {
            var i = this._names.indexOf(name);
            if (i >= 0) {
              this._names.splice(i, 1);
              this._node.setAttribute("class", this._names.join(" "));
            }
          },
          contains: function(name) {
            return this._names.indexOf(name) >= 0;
          }
        };
        function classedAdd(node, names) {
          var list = classList(node), i = -1, n = names.length;
          while (++i < n)
            list.add(names[i]);
        }
        function classedRemove(node, names) {
          var list = classList(node), i = -1, n = names.length;
          while (++i < n)
            list.remove(names[i]);
        }
        function classedTrue(names) {
          return function() {
            classedAdd(this, names);
          };
        }
        function classedFalse(names) {
          return function() {
            classedRemove(this, names);
          };
        }
        function classedFunction(names, value) {
          return function() {
            (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
          };
        }
        function selection_classed(name, value) {
          var names = classArray(name + "");
          if (arguments.length < 2) {
            var list = classList(this.node()), i = -1, n = names.length;
            while (++i < n)
              if (!list.contains(names[i]))
                return false;
            return true;
          }
          return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
        }
        function textRemove() {
          this.textContent = "";
        }
        function textConstant(value) {
          return function() {
            this.textContent = value;
          };
        }
        function textFunction(value) {
          return function() {
            var v = value.apply(this, arguments);
            this.textContent = v == null ? "" : v;
          };
        }
        function selection_text(value) {
          return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
        }
        function htmlRemove() {
          this.innerHTML = "";
        }
        function htmlConstant(value) {
          return function() {
            this.innerHTML = value;
          };
        }
        function htmlFunction(value) {
          return function() {
            var v = value.apply(this, arguments);
            this.innerHTML = v == null ? "" : v;
          };
        }
        function selection_html(value) {
          return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
        }
        function raise() {
          if (this.nextSibling)
            this.parentNode.appendChild(this);
        }
        function selection_raise() {
          return this.each(raise);
        }
        function lower() {
          if (this.previousSibling)
            this.parentNode.insertBefore(this, this.parentNode.firstChild);
        }
        function selection_lower() {
          return this.each(lower);
        }
        function selection_append(name) {
          var create2 = typeof name === "function" ? name : creator(name);
          return this.select(function() {
            return this.appendChild(create2.apply(this, arguments));
          });
        }
        function constantNull() {
          return null;
        }
        function selection_insert(name, before) {
          var create2 = typeof name === "function" ? name : creator(name), select3 = before == null ? constantNull : typeof before === "function" ? before : selector(before);
          return this.select(function() {
            return this.insertBefore(create2.apply(this, arguments), select3.apply(this, arguments) || null);
          });
        }
        function remove() {
          var parent = this.parentNode;
          if (parent)
            parent.removeChild(this);
        }
        function selection_remove() {
          return this.each(remove);
        }
        function selection_cloneShallow() {
          var clone = this.cloneNode(false), parent = this.parentNode;
          return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
        }
        function selection_cloneDeep() {
          var clone = this.cloneNode(true), parent = this.parentNode;
          return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
        }
        function selection_clone(deep) {
          return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
        }
        function selection_datum(value) {
          return arguments.length ? this.property("__data__", value) : this.node().__data__;
        }
        function contextListener(listener) {
          return function(event) {
            listener.call(this, event, this.__data__);
          };
        }
        function parseTypenames(typenames) {
          return typenames.trim().split(/^|\s+/).map(function(t) {
            var name = "", i = t.indexOf(".");
            if (i >= 0)
              name = t.slice(i + 1), t = t.slice(0, i);
            return { type: t, name };
          });
        }
        function onRemove(typename) {
          return function() {
            var on = this.__on;
            if (!on)
              return;
            for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
              if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
                this.removeEventListener(o.type, o.listener, o.options);
              } else {
                on[++i] = o;
              }
            }
            if (++i)
              on.length = i;
            else
              delete this.__on;
          };
        }
        function onAdd(typename, value, options) {
          return function() {
            var on = this.__on, o, listener = contextListener(value);
            if (on)
              for (var j = 0, m = on.length; j < m; ++j) {
                if ((o = on[j]).type === typename.type && o.name === typename.name) {
                  this.removeEventListener(o.type, o.listener, o.options);
                  this.addEventListener(o.type, o.listener = listener, o.options = options);
                  o.value = value;
                  return;
                }
              }
            this.addEventListener(typename.type, listener, options);
            o = { type: typename.type, name: typename.name, value, listener, options };
            if (!on)
              this.__on = [o];
            else
              on.push(o);
          };
        }
        function selection_on(typename, value, options) {
          var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;
          if (arguments.length < 2) {
            var on = this.node().__on;
            if (on)
              for (var j = 0, m = on.length, o; j < m; ++j) {
                for (i = 0, o = on[j]; i < n; ++i) {
                  if ((t = typenames[i]).type === o.type && t.name === o.name) {
                    return o.value;
                  }
                }
              }
            return;
          }
          on = value ? onAdd : onRemove;
          for (i = 0; i < n; ++i)
            this.each(on(typenames[i], value, options));
          return this;
        }
        function dispatchEvent(node, type, params) {
          var window2 = defaultView(node), event = window2.CustomEvent;
          if (typeof event === "function") {
            event = new event(type, params);
          } else {
            event = window2.document.createEvent("Event");
            if (params)
              event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
            else
              event.initEvent(type, false, false);
          }
          node.dispatchEvent(event);
        }
        function dispatchConstant(type, params) {
          return function() {
            return dispatchEvent(this, type, params);
          };
        }
        function dispatchFunction(type, params) {
          return function() {
            return dispatchEvent(this, type, params.apply(this, arguments));
          };
        }
        function selection_dispatch(type, params) {
          return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
        }
        function* selection_iterator() {
          for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
            for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
              if (node = group[i])
                yield node;
            }
          }
        }
        var root = [null];
        function Selection(groups, parents) {
          this._groups = groups;
          this._parents = parents;
        }
        function selection() {
          return new Selection([[document.documentElement]], root);
        }
        function selection_selection() {
          return this;
        }
        Selection.prototype = selection.prototype = {
          constructor: Selection,
          select: selection_select,
          selectAll: selection_selectAll,
          selectChild: selection_selectChild,
          selectChildren: selection_selectChildren,
          filter: selection_filter,
          data: selection_data,
          enter: selection_enter,
          exit: selection_exit,
          join: selection_join,
          merge: selection_merge,
          selection: selection_selection,
          order: selection_order,
          sort: selection_sort,
          call: selection_call,
          nodes: selection_nodes,
          node: selection_node,
          size: selection_size,
          empty: selection_empty,
          each: selection_each,
          attr: selection_attr,
          style: selection_style,
          property: selection_property,
          classed: selection_classed,
          text: selection_text,
          html: selection_html,
          raise: selection_raise,
          lower: selection_lower,
          append: selection_append,
          insert: selection_insert,
          remove: selection_remove,
          clone: selection_clone,
          datum: selection_datum,
          on: selection_on,
          dispatch: selection_dispatch,
          [Symbol.iterator]: selection_iterator
        };
        function select2(selector2) {
          return typeof selector2 === "string" ? new Selection([[document.querySelector(selector2)]], [document.documentElement]) : new Selection([[selector2]], root);
        }
        function create(name) {
          return select2(creator(name).call(document.documentElement));
        }
        var nextId = 0;
        function local() {
          return new Local();
        }
        function Local() {
          this._ = "@" + (++nextId).toString(36);
        }
        Local.prototype = local.prototype = {
          constructor: Local,
          get: function(node) {
            var id = this._;
            while (!(id in node))
              if (!(node = node.parentNode))
                return;
            return node[id];
          },
          set: function(node, value) {
            return node[this._] = value;
          },
          remove: function(node) {
            return this._ in node && delete node[this._];
          },
          toString: function() {
            return this._;
          }
        };
        function sourceEvent(event) {
          let sourceEvent2;
          while (sourceEvent2 = event.sourceEvent)
            event = sourceEvent2;
          return event;
        }
        function pointer(event, node) {
          event = sourceEvent(event);
          if (node === void 0)
            node = event.currentTarget;
          if (node) {
            var svg2 = node.ownerSVGElement || node;
            if (svg2.createSVGPoint) {
              var point = svg2.createSVGPoint();
              point.x = event.clientX, point.y = event.clientY;
              point = point.matrixTransform(node.getScreenCTM().inverse());
              return [point.x, point.y];
            }
            if (node.getBoundingClientRect) {
              var rect = node.getBoundingClientRect();
              return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
            }
          }
          return [event.pageX, event.pageY];
        }
        function pointers(events, node) {
          if (events.target) {
            events = sourceEvent(events);
            if (node === void 0)
              node = events.currentTarget;
            events = events.touches || [events];
          }
          return Array.from(events, (event) => pointer(event, node));
        }
        function selectAll(selector2) {
          return typeof selector2 === "string" ? new Selection([document.querySelectorAll(selector2)], [document.documentElement]) : new Selection([selector2 == null ? [] : array(selector2)], root);
        }
        exports2.create = create;
        exports2.creator = creator;
        exports2.local = local;
        exports2.matcher = matcher;
        exports2.namespace = namespace;
        exports2.namespaces = namespaces;
        exports2.pointer = pointer;
        exports2.pointers = pointers;
        exports2.select = select2;
        exports2.selectAll = selectAll;
        exports2.selection = selection;
        exports2.selector = selector;
        exports2.selectorAll = selectorAll;
        exports2.style = styleValue;
        exports2.window = defaultView;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-drag-npm-2.0.0-0dcad4151e-47f0bcdd09.zip/node_modules/d3-drag/dist/d3-drag.js
  var require_d3_drag = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-drag-npm-2.0.0-0dcad4151e-47f0bcdd09.zip/node_modules/d3-drag/dist/d3-drag.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_dispatch(), require_d3_selection()) : typeof define === "function" && define.amd ? define(["exports", "d3-dispatch", "d3-selection"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3, global2.d3));
      })(exports, function(exports2, d3Dispatch, d3Selection) {
        "use strict";
        function nopropagation(event) {
          event.stopImmediatePropagation();
        }
        function noevent(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
        }
        function nodrag(view) {
          var root = view.document.documentElement, selection = d3Selection.select(view).on("dragstart.drag", noevent, true);
          if ("onselectstart" in root) {
            selection.on("selectstart.drag", noevent, true);
          } else {
            root.__noselect = root.style.MozUserSelect;
            root.style.MozUserSelect = "none";
          }
        }
        function yesdrag(view, noclick) {
          var root = view.document.documentElement, selection = d3Selection.select(view).on("dragstart.drag", null);
          if (noclick) {
            selection.on("click.drag", noevent, true);
            setTimeout(function() {
              selection.on("click.drag", null);
            }, 0);
          }
          if ("onselectstart" in root) {
            selection.on("selectstart.drag", null);
          } else {
            root.style.MozUserSelect = root.__noselect;
            delete root.__noselect;
          }
        }
        var constant = (x) => () => x;
        function DragEvent(type, {
          sourceEvent,
          subject,
          target,
          identifier,
          active,
          x,
          y,
          dx,
          dy,
          dispatch
        }) {
          Object.defineProperties(this, {
            type: { value: type, enumerable: true, configurable: true },
            sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
            subject: { value: subject, enumerable: true, configurable: true },
            target: { value: target, enumerable: true, configurable: true },
            identifier: { value: identifier, enumerable: true, configurable: true },
            active: { value: active, enumerable: true, configurable: true },
            x: { value: x, enumerable: true, configurable: true },
            y: { value: y, enumerable: true, configurable: true },
            dx: { value: dx, enumerable: true, configurable: true },
            dy: { value: dy, enumerable: true, configurable: true },
            _: { value: dispatch }
          });
        }
        DragEvent.prototype.on = function() {
          var value = this._.on.apply(this._, arguments);
          return value === this._ ? this : value;
        };
        function defaultFilter(event) {
          return !event.ctrlKey && !event.button;
        }
        function defaultContainer() {
          return this.parentNode;
        }
        function defaultSubject(event, d) {
          return d == null ? { x: event.x, y: event.y } : d;
        }
        function defaultTouchable() {
          return navigator.maxTouchPoints || "ontouchstart" in this;
        }
        function drag() {
          var filter = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = d3Dispatch.dispatch("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
          function drag2(selection) {
            selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
          }
          function mousedowned(event, d) {
            if (touchending || !filter.call(this, event, d))
              return;
            var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
            if (!gesture)
              return;
            d3Selection.select(event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
            nodrag(event.view);
            nopropagation(event);
            mousemoving = false;
            mousedownx = event.clientX;
            mousedowny = event.clientY;
            gesture("start", event);
          }
          function mousemoved(event) {
            noevent(event);
            if (!mousemoving) {
              var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
              mousemoving = dx * dx + dy * dy > clickDistance2;
            }
            gestures.mouse("drag", event);
          }
          function mouseupped(event) {
            d3Selection.select(event.view).on("mousemove.drag mouseup.drag", null);
            yesdrag(event.view, mousemoving);
            noevent(event);
            gestures.mouse("end", event);
          }
          function touchstarted(event, d) {
            if (!filter.call(this, event, d))
              return;
            var touches = event.changedTouches, c = container.call(this, event, d), n = touches.length, i, gesture;
            for (i = 0; i < n; ++i) {
              if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {
                nopropagation(event);
                gesture("start", event, touches[i]);
              }
            }
          }
          function touchmoved(event) {
            var touches = event.changedTouches, n = touches.length, i, gesture;
            for (i = 0; i < n; ++i) {
              if (gesture = gestures[touches[i].identifier]) {
                noevent(event);
                gesture("drag", event, touches[i]);
              }
            }
          }
          function touchended(event) {
            var touches = event.changedTouches, n = touches.length, i, gesture;
            if (touchending)
              clearTimeout(touchending);
            touchending = setTimeout(function() {
              touchending = null;
            }, 500);
            for (i = 0; i < n; ++i) {
              if (gesture = gestures[touches[i].identifier]) {
                nopropagation(event);
                gesture("end", event, touches[i]);
              }
            }
          }
          function beforestart(that, container2, event, d, identifier, touch) {
            var dispatch = listeners.copy(), p = d3Selection.pointer(touch || event, container2), dx, dy, s;
            if ((s = subject.call(that, new DragEvent("beforestart", {
              sourceEvent: event,
              target: drag2,
              identifier,
              active,
              x: p[0],
              y: p[1],
              dx: 0,
              dy: 0,
              dispatch
            }), d)) == null)
              return;
            dx = s.x - p[0] || 0;
            dy = s.y - p[1] || 0;
            return function gesture(type, event2, touch2) {
              var p0 = p, n;
              switch (type) {
                case "start":
                  gestures[identifier] = gesture, n = active++;
                  break;
                case "end":
                  delete gestures[identifier], --active;
                case "drag":
                  p = d3Selection.pointer(touch2 || event2, container2), n = active;
                  break;
              }
              dispatch.call(type, that, new DragEvent(type, {
                sourceEvent: event2,
                subject: s,
                target: drag2,
                identifier,
                active: n,
                x: p[0] + dx,
                y: p[1] + dy,
                dx: p[0] - p0[0],
                dy: p[1] - p0[1],
                dispatch
              }), d);
            };
          }
          drag2.filter = function(_) {
            return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), drag2) : filter;
          };
          drag2.container = function(_) {
            return arguments.length ? (container = typeof _ === "function" ? _ : constant(_), drag2) : container;
          };
          drag2.subject = function(_) {
            return arguments.length ? (subject = typeof _ === "function" ? _ : constant(_), drag2) : subject;
          };
          drag2.touchable = function(_) {
            return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), drag2) : touchable;
          };
          drag2.on = function() {
            var value = listeners.on.apply(listeners, arguments);
            return value === listeners ? drag2 : value;
          };
          drag2.clickDistance = function(_) {
            return arguments.length ? (clickDistance2 = (_ = +_) * _, drag2) : Math.sqrt(clickDistance2);
          };
          return drag2;
        }
        exports2.drag = drag;
        exports2.dragDisable = nodrag;
        exports2.dragEnable = yesdrag;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-color-npm-2.0.0-e7f04a5d87-b887354aa3.zip/node_modules/d3-color/dist/d3-color.js
  var require_d3_color = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-color-npm-2.0.0-e7f04a5d87-b887354aa3.zip/node_modules/d3-color/dist/d3-color.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        function define2(constructor, factory, prototype) {
          constructor.prototype = factory.prototype = prototype;
          prototype.constructor = constructor;
        }
        function extend(parent, definition) {
          var prototype = Object.create(parent.prototype);
          for (var key in definition)
            prototype[key] = definition[key];
          return prototype;
        }
        function Color() {
        }
        var darker = 0.7;
        var brighter = 1 / darker;
        var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"), reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"), reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"), reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"), reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"), reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
        var named = {
          aliceblue: 15792383,
          antiquewhite: 16444375,
          aqua: 65535,
          aquamarine: 8388564,
          azure: 15794175,
          beige: 16119260,
          bisque: 16770244,
          black: 0,
          blanchedalmond: 16772045,
          blue: 255,
          blueviolet: 9055202,
          brown: 10824234,
          burlywood: 14596231,
          cadetblue: 6266528,
          chartreuse: 8388352,
          chocolate: 13789470,
          coral: 16744272,
          cornflowerblue: 6591981,
          cornsilk: 16775388,
          crimson: 14423100,
          cyan: 65535,
          darkblue: 139,
          darkcyan: 35723,
          darkgoldenrod: 12092939,
          darkgray: 11119017,
          darkgreen: 25600,
          darkgrey: 11119017,
          darkkhaki: 12433259,
          darkmagenta: 9109643,
          darkolivegreen: 5597999,
          darkorange: 16747520,
          darkorchid: 10040012,
          darkred: 9109504,
          darksalmon: 15308410,
          darkseagreen: 9419919,
          darkslateblue: 4734347,
          darkslategray: 3100495,
          darkslategrey: 3100495,
          darkturquoise: 52945,
          darkviolet: 9699539,
          deeppink: 16716947,
          deepskyblue: 49151,
          dimgray: 6908265,
          dimgrey: 6908265,
          dodgerblue: 2003199,
          firebrick: 11674146,
          floralwhite: 16775920,
          forestgreen: 2263842,
          fuchsia: 16711935,
          gainsboro: 14474460,
          ghostwhite: 16316671,
          gold: 16766720,
          goldenrod: 14329120,
          gray: 8421504,
          green: 32768,
          greenyellow: 11403055,
          grey: 8421504,
          honeydew: 15794160,
          hotpink: 16738740,
          indianred: 13458524,
          indigo: 4915330,
          ivory: 16777200,
          khaki: 15787660,
          lavender: 15132410,
          lavenderblush: 16773365,
          lawngreen: 8190976,
          lemonchiffon: 16775885,
          lightblue: 11393254,
          lightcoral: 15761536,
          lightcyan: 14745599,
          lightgoldenrodyellow: 16448210,
          lightgray: 13882323,
          lightgreen: 9498256,
          lightgrey: 13882323,
          lightpink: 16758465,
          lightsalmon: 16752762,
          lightseagreen: 2142890,
          lightskyblue: 8900346,
          lightslategray: 7833753,
          lightslategrey: 7833753,
          lightsteelblue: 11584734,
          lightyellow: 16777184,
          lime: 65280,
          limegreen: 3329330,
          linen: 16445670,
          magenta: 16711935,
          maroon: 8388608,
          mediumaquamarine: 6737322,
          mediumblue: 205,
          mediumorchid: 12211667,
          mediumpurple: 9662683,
          mediumseagreen: 3978097,
          mediumslateblue: 8087790,
          mediumspringgreen: 64154,
          mediumturquoise: 4772300,
          mediumvioletred: 13047173,
          midnightblue: 1644912,
          mintcream: 16121850,
          mistyrose: 16770273,
          moccasin: 16770229,
          navajowhite: 16768685,
          navy: 128,
          oldlace: 16643558,
          olive: 8421376,
          olivedrab: 7048739,
          orange: 16753920,
          orangered: 16729344,
          orchid: 14315734,
          palegoldenrod: 15657130,
          palegreen: 10025880,
          paleturquoise: 11529966,
          palevioletred: 14381203,
          papayawhip: 16773077,
          peachpuff: 16767673,
          peru: 13468991,
          pink: 16761035,
          plum: 14524637,
          powderblue: 11591910,
          purple: 8388736,
          rebeccapurple: 6697881,
          red: 16711680,
          rosybrown: 12357519,
          royalblue: 4286945,
          saddlebrown: 9127187,
          salmon: 16416882,
          sandybrown: 16032864,
          seagreen: 3050327,
          seashell: 16774638,
          sienna: 10506797,
          silver: 12632256,
          skyblue: 8900331,
          slateblue: 6970061,
          slategray: 7372944,
          slategrey: 7372944,
          snow: 16775930,
          springgreen: 65407,
          steelblue: 4620980,
          tan: 13808780,
          teal: 32896,
          thistle: 14204888,
          tomato: 16737095,
          turquoise: 4251856,
          violet: 15631086,
          wheat: 16113331,
          white: 16777215,
          whitesmoke: 16119285,
          yellow: 16776960,
          yellowgreen: 10145074
        };
        define2(Color, color, {
          copy: function(channels) {
            return Object.assign(new this.constructor(), this, channels);
          },
          displayable: function() {
            return this.rgb().displayable();
          },
          hex: color_formatHex,
          formatHex: color_formatHex,
          formatHsl: color_formatHsl,
          formatRgb: color_formatRgb,
          toString: color_formatRgb
        });
        function color_formatHex() {
          return this.rgb().formatHex();
        }
        function color_formatHsl() {
          return hslConvert(this).formatHsl();
        }
        function color_formatRgb() {
          return this.rgb().formatRgb();
        }
        function color(format) {
          var m, l;
          format = (format + "").trim().toLowerCase();
          return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
        }
        function rgbn(n) {
          return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
        }
        function rgba(r, g, b, a) {
          if (a <= 0)
            r = g = b = NaN;
          return new Rgb(r, g, b, a);
        }
        function rgbConvert(o) {
          if (!(o instanceof Color))
            o = color(o);
          if (!o)
            return new Rgb();
          o = o.rgb();
          return new Rgb(o.r, o.g, o.b, o.opacity);
        }
        function rgb(r, g, b, opacity) {
          return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
        }
        function Rgb(r, g, b, opacity) {
          this.r = +r;
          this.g = +g;
          this.b = +b;
          this.opacity = +opacity;
        }
        define2(Rgb, rgb, extend(Color, {
          brighter: function(k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
          },
          darker: function(k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
          },
          rgb: function() {
            return this;
          },
          displayable: function() {
            return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
          },
          hex: rgb_formatHex,
          formatHex: rgb_formatHex,
          formatRgb: rgb_formatRgb,
          toString: rgb_formatRgb
        }));
        function rgb_formatHex() {
          return "#" + hex(this.r) + hex(this.g) + hex(this.b);
        }
        function rgb_formatRgb() {
          var a = this.opacity;
          a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
          return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
        }
        function hex(value) {
          value = Math.max(0, Math.min(255, Math.round(value) || 0));
          return (value < 16 ? "0" : "") + value.toString(16);
        }
        function hsla(h19, s, l, a) {
          if (a <= 0)
            h19 = s = l = NaN;
          else if (l <= 0 || l >= 1)
            h19 = s = NaN;
          else if (s <= 0)
            h19 = NaN;
          return new Hsl(h19, s, l, a);
        }
        function hslConvert(o) {
          if (o instanceof Hsl)
            return new Hsl(o.h, o.s, o.l, o.opacity);
          if (!(o instanceof Color))
            o = color(o);
          if (!o)
            return new Hsl();
          if (o instanceof Hsl)
            return o;
          o = o.rgb();
          var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h19 = NaN, s = max - min, l = (max + min) / 2;
          if (s) {
            if (r === max)
              h19 = (g - b) / s + (g < b) * 6;
            else if (g === max)
              h19 = (b - r) / s + 2;
            else
              h19 = (r - g) / s + 4;
            s /= l < 0.5 ? max + min : 2 - max - min;
            h19 *= 60;
          } else {
            s = l > 0 && l < 1 ? 0 : h19;
          }
          return new Hsl(h19, s, l, o.opacity);
        }
        function hsl(h19, s, l, opacity) {
          return arguments.length === 1 ? hslConvert(h19) : new Hsl(h19, s, l, opacity == null ? 1 : opacity);
        }
        function Hsl(h19, s, l, opacity) {
          this.h = +h19;
          this.s = +s;
          this.l = +l;
          this.opacity = +opacity;
        }
        define2(Hsl, hsl, extend(Color, {
          brighter: function(k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Hsl(this.h, this.s, this.l * k, this.opacity);
          },
          darker: function(k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Hsl(this.h, this.s, this.l * k, this.opacity);
          },
          rgb: function() {
            var h19 = this.h % 360 + (this.h < 0) * 360, s = isNaN(h19) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
            return new Rgb(hsl2rgb(h19 >= 240 ? h19 - 240 : h19 + 120, m1, m2), hsl2rgb(h19, m1, m2), hsl2rgb(h19 < 120 ? h19 + 240 : h19 - 120, m1, m2), this.opacity);
          },
          displayable: function() {
            return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
          },
          formatHsl: function() {
            var a = this.opacity;
            a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
            return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
          }
        }));
        function hsl2rgb(h19, m1, m2) {
          return (h19 < 60 ? m1 + (m2 - m1) * h19 / 60 : h19 < 180 ? m2 : h19 < 240 ? m1 + (m2 - m1) * (240 - h19) / 60 : m1) * 255;
        }
        const radians = Math.PI / 180;
        const degrees = 180 / Math.PI;
        const K = 18, Xn = 0.96422, Yn = 1, Zn = 0.82521, t0 = 4 / 29, t1 = 6 / 29, t2 = 3 * t1 * t1, t3 = t1 * t1 * t1;
        function labConvert(o) {
          if (o instanceof Lab)
            return new Lab(o.l, o.a, o.b, o.opacity);
          if (o instanceof Hcl)
            return hcl2lab(o);
          if (!(o instanceof Rgb))
            o = rgbConvert(o);
          var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
          if (r === g && g === b)
            x = z = y;
          else {
            x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
            z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
          }
          return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
        }
        function gray(l, opacity) {
          return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
        }
        function lab(l, a, b, opacity) {
          return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
        }
        function Lab(l, a, b, opacity) {
          this.l = +l;
          this.a = +a;
          this.b = +b;
          this.opacity = +opacity;
        }
        define2(Lab, lab, extend(Color, {
          brighter: function(k) {
            return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
          },
          darker: function(k) {
            return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
          },
          rgb: function() {
            var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
            x = Xn * lab2xyz(x);
            y = Yn * lab2xyz(y);
            z = Zn * lab2xyz(z);
            return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.033454 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
          }
        }));
        function xyz2lab(t) {
          return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
        }
        function lab2xyz(t) {
          return t > t1 ? t * t * t : t2 * (t - t0);
        }
        function lrgb2rgb(x) {
          return 255 * (x <= 31308e-7 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
        }
        function rgb2lrgb(x) {
          return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
        }
        function hclConvert(o) {
          if (o instanceof Hcl)
            return new Hcl(o.h, o.c, o.l, o.opacity);
          if (!(o instanceof Lab))
            o = labConvert(o);
          if (o.a === 0 && o.b === 0)
            return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
          var h19 = Math.atan2(o.b, o.a) * degrees;
          return new Hcl(h19 < 0 ? h19 + 360 : h19, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
        }
        function lch(l, c, h19, opacity) {
          return arguments.length === 1 ? hclConvert(l) : new Hcl(h19, c, l, opacity == null ? 1 : opacity);
        }
        function hcl(h19, c, l, opacity) {
          return arguments.length === 1 ? hclConvert(h19) : new Hcl(h19, c, l, opacity == null ? 1 : opacity);
        }
        function Hcl(h19, c, l, opacity) {
          this.h = +h19;
          this.c = +c;
          this.l = +l;
          this.opacity = +opacity;
        }
        function hcl2lab(o) {
          if (isNaN(o.h))
            return new Lab(o.l, 0, 0, o.opacity);
          var h19 = o.h * radians;
          return new Lab(o.l, Math.cos(h19) * o.c, Math.sin(h19) * o.c, o.opacity);
        }
        define2(Hcl, hcl, extend(Color, {
          brighter: function(k) {
            return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
          },
          darker: function(k) {
            return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
          },
          rgb: function() {
            return hcl2lab(this).rgb();
          }
        }));
        var A = -0.14861, B = 1.78277, C = -0.29227, D = -0.90649, E = 1.97294, ED = E * D, EB = E * B, BC_DA = B * C - D * A;
        function cubehelixConvert(o) {
          if (o instanceof Cubehelix)
            return new Cubehelix(o.h, o.s, o.l, o.opacity);
          if (!(o instanceof Rgb))
            o = rgbConvert(o);
          var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), h19 = s ? Math.atan2(k, bl) * degrees - 120 : NaN;
          return new Cubehelix(h19 < 0 ? h19 + 360 : h19, s, l, o.opacity);
        }
        function cubehelix(h19, s, l, opacity) {
          return arguments.length === 1 ? cubehelixConvert(h19) : new Cubehelix(h19, s, l, opacity == null ? 1 : opacity);
        }
        function Cubehelix(h19, s, l, opacity) {
          this.h = +h19;
          this.s = +s;
          this.l = +l;
          this.opacity = +opacity;
        }
        define2(Cubehelix, cubehelix, extend(Color, {
          brighter: function(k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
          },
          darker: function(k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
          },
          rgb: function() {
            var h19 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h19), sinh = Math.sin(h19);
            return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
          }
        }));
        exports2.color = color;
        exports2.cubehelix = cubehelix;
        exports2.gray = gray;
        exports2.hcl = hcl;
        exports2.hsl = hsl;
        exports2.lab = lab;
        exports2.lch = lch;
        exports2.rgb = rgb;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-interpolate-npm-2.0.1-7e198300b3-4a2018ac34.zip/node_modules/d3-interpolate/dist/d3-interpolate.js
  var require_d3_interpolate = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-interpolate-npm-2.0.1-7e198300b3-4a2018ac34.zip/node_modules/d3-interpolate/dist/d3-interpolate.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_color()) : typeof define === "function" && define.amd ? define(["exports", "d3-color"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3));
      })(exports, function(exports2, d3Color) {
        "use strict";
        function basis(t1, v0, v1, v2, v3) {
          var t2 = t1 * t1, t3 = t2 * t1;
          return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
        }
        function basis$1(values) {
          var n = values.length - 1;
          return function(t) {
            var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
            return basis((t - i / n) * n, v0, v1, v2, v3);
          };
        }
        function basisClosed(values) {
          var n = values.length;
          return function(t) {
            var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
            return basis((t - i / n) * n, v0, v1, v2, v3);
          };
        }
        var constant = (x) => () => x;
        function linear(a, d) {
          return function(t) {
            return a + t * d;
          };
        }
        function exponential(a, b, y) {
          return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
            return Math.pow(a + t * b, y);
          };
        }
        function hue(a, b) {
          var d = b - a;
          return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);
        }
        function gamma(y) {
          return (y = +y) === 1 ? nogamma : function(a, b) {
            return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
          };
        }
        function nogamma(a, b) {
          var d = b - a;
          return d ? linear(a, d) : constant(isNaN(a) ? b : a);
        }
        var rgb = function rgbGamma(y) {
          var color = gamma(y);
          function rgb2(start, end) {
            var r = color((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
            return function(t) {
              start.r = r(t);
              start.g = g(t);
              start.b = b(t);
              start.opacity = opacity(t);
              return start + "";
            };
          }
          rgb2.gamma = rgbGamma;
          return rgb2;
        }(1);
        function rgbSpline(spline) {
          return function(colors) {
            var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color;
            for (i = 0; i < n; ++i) {
              color = d3Color.rgb(colors[i]);
              r[i] = color.r || 0;
              g[i] = color.g || 0;
              b[i] = color.b || 0;
            }
            r = spline(r);
            g = spline(g);
            b = spline(b);
            color.opacity = 1;
            return function(t) {
              color.r = r(t);
              color.g = g(t);
              color.b = b(t);
              return color + "";
            };
          };
        }
        var rgbBasis = rgbSpline(basis$1);
        var rgbBasisClosed = rgbSpline(basisClosed);
        function numberArray(a, b) {
          if (!b)
            b = [];
          var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
          return function(t) {
            for (i = 0; i < n; ++i)
              c[i] = a[i] * (1 - t) + b[i] * t;
            return c;
          };
        }
        function isNumberArray(x) {
          return ArrayBuffer.isView(x) && !(x instanceof DataView);
        }
        function array(a, b) {
          return (isNumberArray(b) ? numberArray : genericArray)(a, b);
        }
        function genericArray(a, b) {
          var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
          for (i = 0; i < na; ++i)
            x[i] = value(a[i], b[i]);
          for (; i < nb; ++i)
            c[i] = b[i];
          return function(t) {
            for (i = 0; i < na; ++i)
              c[i] = x[i](t);
            return c;
          };
        }
        function date(a, b) {
          var d = new Date();
          return a = +a, b = +b, function(t) {
            return d.setTime(a * (1 - t) + b * t), d;
          };
        }
        function number(a, b) {
          return a = +a, b = +b, function(t) {
            return a * (1 - t) + b * t;
          };
        }
        function object(a, b) {
          var i = {}, c = {}, k;
          if (a === null || typeof a !== "object")
            a = {};
          if (b === null || typeof b !== "object")
            b = {};
          for (k in b) {
            if (k in a) {
              i[k] = value(a[k], b[k]);
            } else {
              c[k] = b[k];
            }
          }
          return function(t) {
            for (k in i)
              c[k] = i[k](t);
            return c;
          };
        }
        var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
        function zero(b) {
          return function() {
            return b;
          };
        }
        function one(b) {
          return function(t) {
            return b(t) + "";
          };
        }
        function string(a, b) {
          var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
          a = a + "", b = b + "";
          while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
            if ((bs = bm.index) > bi) {
              bs = b.slice(bi, bs);
              if (s[i])
                s[i] += bs;
              else
                s[++i] = bs;
            }
            if ((am = am[0]) === (bm = bm[0])) {
              if (s[i])
                s[i] += bm;
              else
                s[++i] = bm;
            } else {
              s[++i] = null;
              q.push({ i, x: number(am, bm) });
            }
            bi = reB.lastIndex;
          }
          if (bi < b.length) {
            bs = b.slice(bi);
            if (s[i])
              s[i] += bs;
            else
              s[++i] = bs;
          }
          return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
            for (var i2 = 0, o; i2 < b; ++i2)
              s[(o = q[i2]).i] = o.x(t);
            return s.join("");
          });
        }
        function value(a, b) {
          var t = typeof b, c;
          return b == null || t === "boolean" ? constant(b) : (t === "number" ? number : t === "string" ? (c = d3Color.color(b)) ? (b = c, rgb) : string : b instanceof d3Color.color ? rgb : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : number)(a, b);
        }
        function discrete(range) {
          var n = range.length;
          return function(t) {
            return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
          };
        }
        function hue$1(a, b) {
          var i = hue(+a, +b);
          return function(t) {
            var x = i(t);
            return x - 360 * Math.floor(x / 360);
          };
        }
        function round(a, b) {
          return a = +a, b = +b, function(t) {
            return Math.round(a * (1 - t) + b * t);
          };
        }
        var degrees = 180 / Math.PI;
        var identity = {
          translateX: 0,
          translateY: 0,
          rotate: 0,
          skewX: 0,
          scaleX: 1,
          scaleY: 1
        };
        function decompose(a, b, c, d, e, f) {
          var scaleX, scaleY, skewX;
          if (scaleX = Math.sqrt(a * a + b * b))
            a /= scaleX, b /= scaleX;
          if (skewX = a * c + b * d)
            c -= a * skewX, d -= b * skewX;
          if (scaleY = Math.sqrt(c * c + d * d))
            c /= scaleY, d /= scaleY, skewX /= scaleY;
          if (a * d < b * c)
            a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
          return {
            translateX: e,
            translateY: f,
            rotate: Math.atan2(b, a) * degrees,
            skewX: Math.atan(skewX) * degrees,
            scaleX,
            scaleY
          };
        }
        var svgNode;
        function parseCss(value2) {
          const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value2 + "");
          return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
        }
        function parseSvg(value2) {
          if (value2 == null)
            return identity;
          if (!svgNode)
            svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
          svgNode.setAttribute("transform", value2);
          if (!(value2 = svgNode.transform.baseVal.consolidate()))
            return identity;
          value2 = value2.matrix;
          return decompose(value2.a, value2.b, value2.c, value2.d, value2.e, value2.f);
        }
        function interpolateTransform(parse, pxComma, pxParen, degParen) {
          function pop(s) {
            return s.length ? s.pop() + " " : "";
          }
          function translate(xa, ya, xb, yb, s, q) {
            if (xa !== xb || ya !== yb) {
              var i = s.push("translate(", null, pxComma, null, pxParen);
              q.push({ i: i - 4, x: number(xa, xb) }, { i: i - 2, x: number(ya, yb) });
            } else if (xb || yb) {
              s.push("translate(" + xb + pxComma + yb + pxParen);
            }
          }
          function rotate(a, b, s, q) {
            if (a !== b) {
              if (a - b > 180)
                b += 360;
              else if (b - a > 180)
                a += 360;
              q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number(a, b) });
            } else if (b) {
              s.push(pop(s) + "rotate(" + b + degParen);
            }
          }
          function skewX(a, b, s, q) {
            if (a !== b) {
              q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number(a, b) });
            } else if (b) {
              s.push(pop(s) + "skewX(" + b + degParen);
            }
          }
          function scale(xa, ya, xb, yb, s, q) {
            if (xa !== xb || ya !== yb) {
              var i = s.push(pop(s) + "scale(", null, ",", null, ")");
              q.push({ i: i - 4, x: number(xa, xb) }, { i: i - 2, x: number(ya, yb) });
            } else if (xb !== 1 || yb !== 1) {
              s.push(pop(s) + "scale(" + xb + "," + yb + ")");
            }
          }
          return function(a, b) {
            var s = [], q = [];
            a = parse(a), b = parse(b);
            translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
            rotate(a.rotate, b.rotate, s, q);
            skewX(a.skewX, b.skewX, s, q);
            scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
            a = b = null;
            return function(t) {
              var i = -1, n = q.length, o;
              while (++i < n)
                s[(o = q[i]).i] = o.x(t);
              return s.join("");
            };
          };
        }
        var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
        var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
        var epsilon2 = 1e-12;
        function cosh(x) {
          return ((x = Math.exp(x)) + 1 / x) / 2;
        }
        function sinh(x) {
          return ((x = Math.exp(x)) - 1 / x) / 2;
        }
        function tanh(x) {
          return ((x = Math.exp(2 * x)) - 1) / (x + 1);
        }
        var zoom = function zoomRho(rho, rho2, rho4) {
          function zoom2(p0, p1) {
            var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
            if (d2 < epsilon2) {
              S = Math.log(w1 / w0) / rho;
              i = function(t) {
                return [
                  ux0 + t * dx,
                  uy0 + t * dy,
                  w0 * Math.exp(rho * t * S)
                ];
              };
            } else {
              var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
              S = (r1 - r0) / rho;
              i = function(t) {
                var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
                return [
                  ux0 + u * dx,
                  uy0 + u * dy,
                  w0 * coshr0 / cosh(rho * s + r0)
                ];
              };
            }
            i.duration = S * 1e3 * rho / Math.SQRT2;
            return i;
          }
          zoom2.rho = function(_) {
            var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
            return zoomRho(_1, _2, _4);
          };
          return zoom2;
        }(Math.SQRT2, 2, 4);
        function hsl(hue2) {
          return function(start, end) {
            var h19 = hue2((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
            return function(t) {
              start.h = h19(t);
              start.s = s(t);
              start.l = l(t);
              start.opacity = opacity(t);
              return start + "";
            };
          };
        }
        var hsl$1 = hsl(hue);
        var hslLong = hsl(nogamma);
        function lab(start, end) {
          var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l), a = nogamma(start.a, end.a), b = nogamma(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
          return function(t) {
            start.l = l(t);
            start.a = a(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + "";
          };
        }
        function hcl(hue2) {
          return function(start, end) {
            var h19 = hue2((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h), c = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
            return function(t) {
              start.h = h19(t);
              start.c = c(t);
              start.l = l(t);
              start.opacity = opacity(t);
              return start + "";
            };
          };
        }
        var hcl$1 = hcl(hue);
        var hclLong = hcl(nogamma);
        function cubehelix(hue2) {
          return function cubehelixGamma(y) {
            y = +y;
            function cubehelix2(start, end) {
              var h19 = hue2((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
              return function(t) {
                start.h = h19(t);
                start.s = s(t);
                start.l = l(Math.pow(t, y));
                start.opacity = opacity(t);
                return start + "";
              };
            }
            cubehelix2.gamma = cubehelixGamma;
            return cubehelix2;
          }(1);
        }
        var cubehelix$1 = cubehelix(hue);
        var cubehelixLong = cubehelix(nogamma);
        function piecewise(interpolate, values) {
          if (values === void 0)
            values = interpolate, interpolate = value;
          var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
          while (i < n)
            I[i] = interpolate(v, v = values[++i]);
          return function(t) {
            var i2 = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
            return I[i2](t - i2);
          };
        }
        function quantize(interpolator, n) {
          var samples = new Array(n);
          for (var i = 0; i < n; ++i)
            samples[i] = interpolator(i / (n - 1));
          return samples;
        }
        exports2.interpolate = value;
        exports2.interpolateArray = array;
        exports2.interpolateBasis = basis$1;
        exports2.interpolateBasisClosed = basisClosed;
        exports2.interpolateCubehelix = cubehelix$1;
        exports2.interpolateCubehelixLong = cubehelixLong;
        exports2.interpolateDate = date;
        exports2.interpolateDiscrete = discrete;
        exports2.interpolateHcl = hcl$1;
        exports2.interpolateHclLong = hclLong;
        exports2.interpolateHsl = hsl$1;
        exports2.interpolateHslLong = hslLong;
        exports2.interpolateHue = hue$1;
        exports2.interpolateLab = lab;
        exports2.interpolateNumber = number;
        exports2.interpolateNumberArray = numberArray;
        exports2.interpolateObject = object;
        exports2.interpolateRgb = rgb;
        exports2.interpolateRgbBasis = rgbBasis;
        exports2.interpolateRgbBasisClosed = rgbBasisClosed;
        exports2.interpolateRound = round;
        exports2.interpolateString = string;
        exports2.interpolateTransformCss = interpolateTransformCss;
        exports2.interpolateTransformSvg = interpolateTransformSvg;
        exports2.interpolateZoom = zoom;
        exports2.piecewise = piecewise;
        exports2.quantize = quantize;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-timer-npm-2.0.0-590adf27a0-70733c3baf.zip/node_modules/d3-timer/dist/d3-timer.js
  var require_d3_timer = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-timer-npm-2.0.0-590adf27a0-70733c3baf.zip/node_modules/d3-timer/dist/d3-timer.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        var frame = 0, timeout = 0, interval = 0, pokeDelay = 1e3, taskHead, taskTail, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance === "object" && performance.now ? performance : Date, setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
          setTimeout(f, 17);
        };
        function now() {
          return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
        }
        function clearNow() {
          clockNow = 0;
        }
        function Timer() {
          this._call = this._time = this._next = null;
        }
        Timer.prototype = timer.prototype = {
          constructor: Timer,
          restart: function(callback, delay, time) {
            if (typeof callback !== "function")
              throw new TypeError("callback is not a function");
            time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
            if (!this._next && taskTail !== this) {
              if (taskTail)
                taskTail._next = this;
              else
                taskHead = this;
              taskTail = this;
            }
            this._call = callback;
            this._time = time;
            sleep();
          },
          stop: function() {
            if (this._call) {
              this._call = null;
              this._time = Infinity;
              sleep();
            }
          }
        };
        function timer(callback, delay, time) {
          var t = new Timer();
          t.restart(callback, delay, time);
          return t;
        }
        function timerFlush() {
          now();
          ++frame;
          var t = taskHead, e;
          while (t) {
            if ((e = clockNow - t._time) >= 0)
              t._call.call(null, e);
            t = t._next;
          }
          --frame;
        }
        function wake() {
          clockNow = (clockLast = clock.now()) + clockSkew;
          frame = timeout = 0;
          try {
            timerFlush();
          } finally {
            frame = 0;
            nap();
            clockNow = 0;
          }
        }
        function poke() {
          var now2 = clock.now(), delay = now2 - clockLast;
          if (delay > pokeDelay)
            clockSkew -= delay, clockLast = now2;
        }
        function nap() {
          var t0, t1 = taskHead, t2, time = Infinity;
          while (t1) {
            if (t1._call) {
              if (time > t1._time)
                time = t1._time;
              t0 = t1, t1 = t1._next;
            } else {
              t2 = t1._next, t1._next = null;
              t1 = t0 ? t0._next = t2 : taskHead = t2;
            }
          }
          taskTail = t0;
          sleep(time);
        }
        function sleep(time) {
          if (frame)
            return;
          if (timeout)
            timeout = clearTimeout(timeout);
          var delay = time - clockNow;
          if (delay > 24) {
            if (time < Infinity)
              timeout = setTimeout(wake, time - clock.now() - clockSkew);
            if (interval)
              interval = clearInterval(interval);
          } else {
            if (!interval)
              clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
            frame = 1, setFrame(wake);
          }
        }
        function timeout$1(callback, delay, time) {
          var t = new Timer();
          delay = delay == null ? 0 : +delay;
          t.restart((elapsed) => {
            t.stop();
            callback(elapsed + delay);
          }, delay, time);
          return t;
        }
        function interval$1(callback, delay, time) {
          var t = new Timer(), total = delay;
          if (delay == null)
            return t.restart(callback, delay, time), t;
          t._restart = t.restart;
          t.restart = function(callback2, delay2, time2) {
            delay2 = +delay2, time2 = time2 == null ? now() : +time2;
            t._restart(function tick(elapsed) {
              elapsed += total;
              t._restart(tick, total += delay2, time2);
              callback2(elapsed);
            }, delay2, time2);
          };
          t.restart(callback, delay, time);
          return t;
        }
        exports2.interval = interval$1;
        exports2.now = now;
        exports2.timeout = timeout$1;
        exports2.timer = timer;
        exports2.timerFlush = timerFlush;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-ease-npm-2.0.0-b648d66f09-1a9f6dfc83.zip/node_modules/d3-ease/dist/d3-ease.js
  var require_d3_ease = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-ease-npm-2.0.0-b648d66f09-1a9f6dfc83.zip/node_modules/d3-ease/dist/d3-ease.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        const linear = (t) => +t;
        function quadIn(t) {
          return t * t;
        }
        function quadOut(t) {
          return t * (2 - t);
        }
        function quadInOut(t) {
          return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
        }
        function cubicIn(t) {
          return t * t * t;
        }
        function cubicOut(t) {
          return --t * t * t + 1;
        }
        function cubicInOut(t) {
          return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
        }
        var exponent = 3;
        var polyIn = function custom(e) {
          e = +e;
          function polyIn2(t) {
            return Math.pow(t, e);
          }
          polyIn2.exponent = custom;
          return polyIn2;
        }(exponent);
        var polyOut = function custom(e) {
          e = +e;
          function polyOut2(t) {
            return 1 - Math.pow(1 - t, e);
          }
          polyOut2.exponent = custom;
          return polyOut2;
        }(exponent);
        var polyInOut = function custom(e) {
          e = +e;
          function polyInOut2(t) {
            return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
          }
          polyInOut2.exponent = custom;
          return polyInOut2;
        }(exponent);
        var pi = Math.PI, halfPi = pi / 2;
        function sinIn(t) {
          return +t === 1 ? 1 : 1 - Math.cos(t * halfPi);
        }
        function sinOut(t) {
          return Math.sin(t * halfPi);
        }
        function sinInOut(t) {
          return (1 - Math.cos(pi * t)) / 2;
        }
        function tpmt(x) {
          return (Math.pow(2, -10 * x) - 9765625e-10) * 1.0009775171065494;
        }
        function expIn(t) {
          return tpmt(1 - +t);
        }
        function expOut(t) {
          return 1 - tpmt(t);
        }
        function expInOut(t) {
          return ((t *= 2) <= 1 ? tpmt(1 - t) : 2 - tpmt(t - 1)) / 2;
        }
        function circleIn(t) {
          return 1 - Math.sqrt(1 - t * t);
        }
        function circleOut(t) {
          return Math.sqrt(1 - --t * t);
        }
        function circleInOut(t) {
          return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
        }
        var b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 3 / 4, b5 = 9 / 11, b6 = 10 / 11, b7 = 15 / 16, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;
        function bounceIn(t) {
          return 1 - bounceOut(1 - t);
        }
        function bounceOut(t) {
          return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
        }
        function bounceInOut(t) {
          return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
        }
        var overshoot = 1.70158;
        var backIn = function custom(s) {
          s = +s;
          function backIn2(t) {
            return (t = +t) * t * (s * (t - 1) + t);
          }
          backIn2.overshoot = custom;
          return backIn2;
        }(overshoot);
        var backOut = function custom(s) {
          s = +s;
          function backOut2(t) {
            return --t * t * ((t + 1) * s + t) + 1;
          }
          backOut2.overshoot = custom;
          return backOut2;
        }(overshoot);
        var backInOut = function custom(s) {
          s = +s;
          function backInOut2(t) {
            return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
          }
          backInOut2.overshoot = custom;
          return backInOut2;
        }(overshoot);
        var tau = 2 * Math.PI, amplitude = 1, period = 0.3;
        var elasticIn = function custom(a, p) {
          var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
          function elasticIn2(t) {
            return a * tpmt(- --t) * Math.sin((s - t) / p);
          }
          elasticIn2.amplitude = function(a2) {
            return custom(a2, p * tau);
          };
          elasticIn2.period = function(p2) {
            return custom(a, p2);
          };
          return elasticIn2;
        }(amplitude, period);
        var elasticOut = function custom(a, p) {
          var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
          function elasticOut2(t) {
            return 1 - a * tpmt(t = +t) * Math.sin((t + s) / p);
          }
          elasticOut2.amplitude = function(a2) {
            return custom(a2, p * tau);
          };
          elasticOut2.period = function(p2) {
            return custom(a, p2);
          };
          return elasticOut2;
        }(amplitude, period);
        var elasticInOut = function custom(a, p) {
          var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
          function elasticInOut2(t) {
            return ((t = t * 2 - 1) < 0 ? a * tpmt(-t) * Math.sin((s - t) / p) : 2 - a * tpmt(t) * Math.sin((s + t) / p)) / 2;
          }
          elasticInOut2.amplitude = function(a2) {
            return custom(a2, p * tau);
          };
          elasticInOut2.period = function(p2) {
            return custom(a, p2);
          };
          return elasticInOut2;
        }(amplitude, period);
        exports2.easeBack = backInOut;
        exports2.easeBackIn = backIn;
        exports2.easeBackInOut = backInOut;
        exports2.easeBackOut = backOut;
        exports2.easeBounce = bounceOut;
        exports2.easeBounceIn = bounceIn;
        exports2.easeBounceInOut = bounceInOut;
        exports2.easeBounceOut = bounceOut;
        exports2.easeCircle = circleInOut;
        exports2.easeCircleIn = circleIn;
        exports2.easeCircleInOut = circleInOut;
        exports2.easeCircleOut = circleOut;
        exports2.easeCubic = cubicInOut;
        exports2.easeCubicIn = cubicIn;
        exports2.easeCubicInOut = cubicInOut;
        exports2.easeCubicOut = cubicOut;
        exports2.easeElastic = elasticOut;
        exports2.easeElasticIn = elasticIn;
        exports2.easeElasticInOut = elasticInOut;
        exports2.easeElasticOut = elasticOut;
        exports2.easeExp = expInOut;
        exports2.easeExpIn = expIn;
        exports2.easeExpInOut = expInOut;
        exports2.easeExpOut = expOut;
        exports2.easeLinear = linear;
        exports2.easePoly = polyInOut;
        exports2.easePolyIn = polyIn;
        exports2.easePolyInOut = polyInOut;
        exports2.easePolyOut = polyOut;
        exports2.easeQuad = quadInOut;
        exports2.easeQuadIn = quadIn;
        exports2.easeQuadInOut = quadInOut;
        exports2.easeQuadOut = quadOut;
        exports2.easeSin = sinInOut;
        exports2.easeSinIn = sinIn;
        exports2.easeSinInOut = sinInOut;
        exports2.easeSinOut = sinOut;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/__virtual__/d3-transition-virtual-e20bc0a565/0/cache/d3-transition-npm-2.0.0-580e508660-8f29d195ad.zip/node_modules/d3-transition/dist/d3-transition.js
  var require_d3_transition = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/__virtual__/d3-transition-virtual-e20bc0a565/0/cache/d3-transition-npm-2.0.0-580e508660-8f29d195ad.zip/node_modules/d3-transition/dist/d3-transition.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_selection(), require_d3_dispatch(), require_d3_timer(), require_d3_interpolate(), require_d3_color(), require_d3_ease()) : typeof define === "function" && define.amd ? define(["exports", "d3-selection", "d3-dispatch", "d3-timer", "d3-interpolate", "d3-color", "d3-ease"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3));
      })(exports, function(exports2, d3Selection, d3Dispatch, d3Timer, d3Interpolate, d3Color, d3Ease) {
        "use strict";
        var emptyOn = d3Dispatch.dispatch("start", "end", "cancel", "interrupt");
        var emptyTween = [];
        var CREATED = 0;
        var SCHEDULED = 1;
        var STARTING = 2;
        var STARTED = 3;
        var RUNNING = 4;
        var ENDING = 5;
        var ENDED = 6;
        function schedule(node, name, id2, index, group, timing) {
          var schedules = node.__transition;
          if (!schedules)
            node.__transition = {};
          else if (id2 in schedules)
            return;
          create(node, id2, {
            name,
            index,
            group,
            on: emptyOn,
            tween: emptyTween,
            time: timing.time,
            delay: timing.delay,
            duration: timing.duration,
            ease: timing.ease,
            timer: null,
            state: CREATED
          });
        }
        function init(node, id2) {
          var schedule2 = get(node, id2);
          if (schedule2.state > CREATED)
            throw new Error("too late; already scheduled");
          return schedule2;
        }
        function set(node, id2) {
          var schedule2 = get(node, id2);
          if (schedule2.state > STARTED)
            throw new Error("too late; already running");
          return schedule2;
        }
        function get(node, id2) {
          var schedule2 = node.__transition;
          if (!schedule2 || !(schedule2 = schedule2[id2]))
            throw new Error("transition not found");
          return schedule2;
        }
        function create(node, id2, self2) {
          var schedules = node.__transition, tween;
          schedules[id2] = self2;
          self2.timer = d3Timer.timer(schedule2, 0, self2.time);
          function schedule2(elapsed) {
            self2.state = SCHEDULED;
            self2.timer.restart(start2, self2.delay, self2.time);
            if (self2.delay <= elapsed)
              start2(elapsed - self2.delay);
          }
          function start2(elapsed) {
            var i, j, n, o;
            if (self2.state !== SCHEDULED)
              return stop();
            for (i in schedules) {
              o = schedules[i];
              if (o.name !== self2.name)
                continue;
              if (o.state === STARTED)
                return d3Timer.timeout(start2);
              if (o.state === RUNNING) {
                o.state = ENDED;
                o.timer.stop();
                o.on.call("interrupt", node, node.__data__, o.index, o.group);
                delete schedules[i];
              } else if (+i < id2) {
                o.state = ENDED;
                o.timer.stop();
                o.on.call("cancel", node, node.__data__, o.index, o.group);
                delete schedules[i];
              }
            }
            d3Timer.timeout(function() {
              if (self2.state === STARTED) {
                self2.state = RUNNING;
                self2.timer.restart(tick, self2.delay, self2.time);
                tick(elapsed);
              }
            });
            self2.state = STARTING;
            self2.on.call("start", node, node.__data__, self2.index, self2.group);
            if (self2.state !== STARTING)
              return;
            self2.state = STARTED;
            tween = new Array(n = self2.tween.length);
            for (i = 0, j = -1; i < n; ++i) {
              if (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) {
                tween[++j] = o;
              }
            }
            tween.length = j + 1;
          }
          function tick(elapsed) {
            var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length;
            while (++i < n) {
              tween[i].call(node, t);
            }
            if (self2.state === ENDING) {
              self2.on.call("end", node, node.__data__, self2.index, self2.group);
              stop();
            }
          }
          function stop() {
            self2.state = ENDED;
            self2.timer.stop();
            delete schedules[id2];
            for (var i in schedules)
              return;
            delete node.__transition;
          }
        }
        function interrupt(node, name) {
          var schedules = node.__transition, schedule2, active2, empty = true, i;
          if (!schedules)
            return;
          name = name == null ? null : name + "";
          for (i in schedules) {
            if ((schedule2 = schedules[i]).name !== name) {
              empty = false;
              continue;
            }
            active2 = schedule2.state > STARTING && schedule2.state < ENDING;
            schedule2.state = ENDED;
            schedule2.timer.stop();
            schedule2.on.call(active2 ? "interrupt" : "cancel", node, node.__data__, schedule2.index, schedule2.group);
            delete schedules[i];
          }
          if (empty)
            delete node.__transition;
        }
        function selection_interrupt(name) {
          return this.each(function() {
            interrupt(this, name);
          });
        }
        function tweenRemove(id2, name) {
          var tween0, tween1;
          return function() {
            var schedule2 = set(this, id2), tween = schedule2.tween;
            if (tween !== tween0) {
              tween1 = tween0 = tween;
              for (var i = 0, n = tween1.length; i < n; ++i) {
                if (tween1[i].name === name) {
                  tween1 = tween1.slice();
                  tween1.splice(i, 1);
                  break;
                }
              }
            }
            schedule2.tween = tween1;
          };
        }
        function tweenFunction(id2, name, value) {
          var tween0, tween1;
          if (typeof value !== "function")
            throw new Error();
          return function() {
            var schedule2 = set(this, id2), tween = schedule2.tween;
            if (tween !== tween0) {
              tween1 = (tween0 = tween).slice();
              for (var t = { name, value }, i = 0, n = tween1.length; i < n; ++i) {
                if (tween1[i].name === name) {
                  tween1[i] = t;
                  break;
                }
              }
              if (i === n)
                tween1.push(t);
            }
            schedule2.tween = tween1;
          };
        }
        function transition_tween(name, value) {
          var id2 = this._id;
          name += "";
          if (arguments.length < 2) {
            var tween = get(this.node(), id2).tween;
            for (var i = 0, n = tween.length, t; i < n; ++i) {
              if ((t = tween[i]).name === name) {
                return t.value;
              }
            }
            return null;
          }
          return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
        }
        function tweenValue(transition2, name, value) {
          var id2 = transition2._id;
          transition2.each(function() {
            var schedule2 = set(this, id2);
            (schedule2.value || (schedule2.value = {}))[name] = value.apply(this, arguments);
          });
          return function(node) {
            return get(node, id2).value[name];
          };
        }
        function interpolate(a, b) {
          var c;
          return (typeof b === "number" ? d3Interpolate.interpolateNumber : b instanceof d3Color.color ? d3Interpolate.interpolateRgb : (c = d3Color.color(b)) ? (b = c, d3Interpolate.interpolateRgb) : d3Interpolate.interpolateString)(a, b);
        }
        function attrRemove(name) {
          return function() {
            this.removeAttribute(name);
          };
        }
        function attrRemoveNS(fullname) {
          return function() {
            this.removeAttributeNS(fullname.space, fullname.local);
          };
        }
        function attrConstant(name, interpolate2, value1) {
          var string00, string1 = value1 + "", interpolate0;
          return function() {
            var string0 = this.getAttribute(name);
            return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
          };
        }
        function attrConstantNS(fullname, interpolate2, value1) {
          var string00, string1 = value1 + "", interpolate0;
          return function() {
            var string0 = this.getAttributeNS(fullname.space, fullname.local);
            return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
          };
        }
        function attrFunction(name, interpolate2, value) {
          var string00, string10, interpolate0;
          return function() {
            var string0, value1 = value(this), string1;
            if (value1 == null)
              return void this.removeAttribute(name);
            string0 = this.getAttribute(name);
            string1 = value1 + "";
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
          };
        }
        function attrFunctionNS(fullname, interpolate2, value) {
          var string00, string10, interpolate0;
          return function() {
            var string0, value1 = value(this), string1;
            if (value1 == null)
              return void this.removeAttributeNS(fullname.space, fullname.local);
            string0 = this.getAttributeNS(fullname.space, fullname.local);
            string1 = value1 + "";
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
          };
        }
        function transition_attr(name, value) {
          var fullname = d3Selection.namespace(name), i = fullname === "transform" ? d3Interpolate.interpolateTransformSvg : interpolate;
          return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
        }
        function attrInterpolate(name, i) {
          return function(t) {
            this.setAttribute(name, i.call(this, t));
          };
        }
        function attrInterpolateNS(fullname, i) {
          return function(t) {
            this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
          };
        }
        function attrTweenNS(fullname, value) {
          var t0, i0;
          function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0)
              t0 = (i0 = i) && attrInterpolateNS(fullname, i);
            return t0;
          }
          tween._value = value;
          return tween;
        }
        function attrTween(name, value) {
          var t0, i0;
          function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0)
              t0 = (i0 = i) && attrInterpolate(name, i);
            return t0;
          }
          tween._value = value;
          return tween;
        }
        function transition_attrTween(name, value) {
          var key = "attr." + name;
          if (arguments.length < 2)
            return (key = this.tween(key)) && key._value;
          if (value == null)
            return this.tween(key, null);
          if (typeof value !== "function")
            throw new Error();
          var fullname = d3Selection.namespace(name);
          return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
        }
        function delayFunction(id2, value) {
          return function() {
            init(this, id2).delay = +value.apply(this, arguments);
          };
        }
        function delayConstant(id2, value) {
          return value = +value, function() {
            init(this, id2).delay = value;
          };
        }
        function transition_delay(value) {
          var id2 = this._id;
          return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get(this.node(), id2).delay;
        }
        function durationFunction(id2, value) {
          return function() {
            set(this, id2).duration = +value.apply(this, arguments);
          };
        }
        function durationConstant(id2, value) {
          return value = +value, function() {
            set(this, id2).duration = value;
          };
        }
        function transition_duration(value) {
          var id2 = this._id;
          return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get(this.node(), id2).duration;
        }
        function easeConstant(id2, value) {
          if (typeof value !== "function")
            throw new Error();
          return function() {
            set(this, id2).ease = value;
          };
        }
        function transition_ease(value) {
          var id2 = this._id;
          return arguments.length ? this.each(easeConstant(id2, value)) : get(this.node(), id2).ease;
        }
        function easeVarying(id2, value) {
          return function() {
            var v = value.apply(this, arguments);
            if (typeof v !== "function")
              throw new Error();
            set(this, id2).ease = v;
          };
        }
        function transition_easeVarying(value) {
          if (typeof value !== "function")
            throw new Error();
          return this.each(easeVarying(this._id, value));
        }
        function transition_filter(match) {
          if (typeof match !== "function")
            match = d3Selection.matcher(match);
          for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
              if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                subgroup.push(node);
              }
            }
          }
          return new Transition(subgroups, this._parents, this._name, this._id);
        }
        function transition_merge(transition2) {
          if (transition2._id !== this._id)
            throw new Error();
          for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
            for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
              if (node = group0[i] || group1[i]) {
                merge[i] = node;
              }
            }
          }
          for (; j < m0; ++j) {
            merges[j] = groups0[j];
          }
          return new Transition(merges, this._parents, this._name, this._id);
        }
        function start(name) {
          return (name + "").trim().split(/^|\s+/).every(function(t) {
            var i = t.indexOf(".");
            if (i >= 0)
              t = t.slice(0, i);
            return !t || t === "start";
          });
        }
        function onFunction(id2, name, listener) {
          var on0, on1, sit = start(name) ? init : set;
          return function() {
            var schedule2 = sit(this, id2), on = schedule2.on;
            if (on !== on0)
              (on1 = (on0 = on).copy()).on(name, listener);
            schedule2.on = on1;
          };
        }
        function transition_on(name, listener) {
          var id2 = this._id;
          return arguments.length < 2 ? get(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
        }
        function removeFunction(id2) {
          return function() {
            var parent = this.parentNode;
            for (var i in this.__transition)
              if (+i !== id2)
                return;
            if (parent)
              parent.removeChild(this);
          };
        }
        function transition_remove() {
          return this.on("end.remove", removeFunction(this._id));
        }
        function transition_select(select2) {
          var name = this._name, id2 = this._id;
          if (typeof select2 !== "function")
            select2 = d3Selection.selector(select2);
          for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
              if ((node = group[i]) && (subnode = select2.call(node, node.__data__, i, group))) {
                if ("__data__" in node)
                  subnode.__data__ = node.__data__;
                subgroup[i] = subnode;
                schedule(subgroup[i], name, id2, i, subgroup, get(node, id2));
              }
            }
          }
          return new Transition(subgroups, this._parents, name, id2);
        }
        function transition_selectAll(select2) {
          var name = this._name, id2 = this._id;
          if (typeof select2 !== "function")
            select2 = d3Selection.selectorAll(select2);
          for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
              if (node = group[i]) {
                for (var children = select2.call(node, node.__data__, i, group), child, inherit2 = get(node, id2), k = 0, l = children.length; k < l; ++k) {
                  if (child = children[k]) {
                    schedule(child, name, id2, k, children, inherit2);
                  }
                }
                subgroups.push(children);
                parents.push(node);
              }
            }
          }
          return new Transition(subgroups, parents, name, id2);
        }
        var Selection = d3Selection.selection.prototype.constructor;
        function transition_selection() {
          return new Selection(this._groups, this._parents);
        }
        function styleNull(name, interpolate2) {
          var string00, string10, interpolate0;
          return function() {
            var string0 = d3Selection.style(this, name), string1 = (this.style.removeProperty(name), d3Selection.style(this, name));
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, string10 = string1);
          };
        }
        function styleRemove(name) {
          return function() {
            this.style.removeProperty(name);
          };
        }
        function styleConstant(name, interpolate2, value1) {
          var string00, string1 = value1 + "", interpolate0;
          return function() {
            var string0 = d3Selection.style(this, name);
            return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
          };
        }
        function styleFunction(name, interpolate2, value) {
          var string00, string10, interpolate0;
          return function() {
            var string0 = d3Selection.style(this, name), value1 = value(this), string1 = value1 + "";
            if (value1 == null)
              string1 = value1 = (this.style.removeProperty(name), d3Selection.style(this, name));
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
          };
        }
        function styleMaybeRemove(id2, name) {
          var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
          return function() {
            var schedule2 = set(this, id2), on = schedule2.on, listener = schedule2.value[key] == null ? remove || (remove = styleRemove(name)) : void 0;
            if (on !== on0 || listener0 !== listener)
              (on1 = (on0 = on).copy()).on(event, listener0 = listener);
            schedule2.on = on1;
          };
        }
        function transition_style(name, value, priority) {
          var i = (name += "") === "transform" ? d3Interpolate.interpolateTransformCss : interpolate;
          return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
        }
        function styleInterpolate(name, i, priority) {
          return function(t) {
            this.style.setProperty(name, i.call(this, t), priority);
          };
        }
        function styleTween(name, value, priority) {
          var t, i0;
          function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0)
              t = (i0 = i) && styleInterpolate(name, i, priority);
            return t;
          }
          tween._value = value;
          return tween;
        }
        function transition_styleTween(name, value, priority) {
          var key = "style." + (name += "");
          if (arguments.length < 2)
            return (key = this.tween(key)) && key._value;
          if (value == null)
            return this.tween(key, null);
          if (typeof value !== "function")
            throw new Error();
          return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
        }
        function textConstant(value) {
          return function() {
            this.textContent = value;
          };
        }
        function textFunction(value) {
          return function() {
            var value1 = value(this);
            this.textContent = value1 == null ? "" : value1;
          };
        }
        function transition_text(value) {
          return this.tween("text", typeof value === "function" ? textFunction(tweenValue(this, "text", value)) : textConstant(value == null ? "" : value + ""));
        }
        function textInterpolate(i) {
          return function(t) {
            this.textContent = i.call(this, t);
          };
        }
        function textTween(value) {
          var t0, i0;
          function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0)
              t0 = (i0 = i) && textInterpolate(i);
            return t0;
          }
          tween._value = value;
          return tween;
        }
        function transition_textTween(value) {
          var key = "text";
          if (arguments.length < 1)
            return (key = this.tween(key)) && key._value;
          if (value == null)
            return this.tween(key, null);
          if (typeof value !== "function")
            throw new Error();
          return this.tween(key, textTween(value));
        }
        function transition_transition() {
          var name = this._name, id0 = this._id, id1 = newId();
          for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
              if (node = group[i]) {
                var inherit2 = get(node, id0);
                schedule(node, name, id1, i, group, {
                  time: inherit2.time + inherit2.delay + inherit2.duration,
                  delay: 0,
                  duration: inherit2.duration,
                  ease: inherit2.ease
                });
              }
            }
          }
          return new Transition(groups, this._parents, name, id1);
        }
        function transition_end() {
          var on0, on1, that = this, id2 = that._id, size = that.size();
          return new Promise(function(resolve, reject) {
            var cancel = { value: reject }, end = { value: function() {
              if (--size === 0)
                resolve();
            } };
            that.each(function() {
              var schedule2 = set(this, id2), on = schedule2.on;
              if (on !== on0) {
                on1 = (on0 = on).copy();
                on1._.cancel.push(cancel);
                on1._.interrupt.push(cancel);
                on1._.end.push(end);
              }
              schedule2.on = on1;
            });
            if (size === 0)
              resolve();
          });
        }
        var id = 0;
        function Transition(groups, parents, name, id2) {
          this._groups = groups;
          this._parents = parents;
          this._name = name;
          this._id = id2;
        }
        function transition(name) {
          return d3Selection.selection().transition(name);
        }
        function newId() {
          return ++id;
        }
        var selection_prototype = d3Selection.selection.prototype;
        Transition.prototype = transition.prototype = {
          constructor: Transition,
          select: transition_select,
          selectAll: transition_selectAll,
          filter: transition_filter,
          merge: transition_merge,
          selection: transition_selection,
          transition: transition_transition,
          call: selection_prototype.call,
          nodes: selection_prototype.nodes,
          node: selection_prototype.node,
          size: selection_prototype.size,
          empty: selection_prototype.empty,
          each: selection_prototype.each,
          on: transition_on,
          attr: transition_attr,
          attrTween: transition_attrTween,
          style: transition_style,
          styleTween: transition_styleTween,
          text: transition_text,
          textTween: transition_textTween,
          remove: transition_remove,
          tween: transition_tween,
          delay: transition_delay,
          duration: transition_duration,
          ease: transition_ease,
          easeVarying: transition_easeVarying,
          end: transition_end,
          [Symbol.iterator]: selection_prototype[Symbol.iterator]
        };
        var defaultTiming = {
          time: null,
          delay: 0,
          duration: 250,
          ease: d3Ease.easeCubicInOut
        };
        function inherit(node, id2) {
          var timing;
          while (!(timing = node.__transition) || !(timing = timing[id2])) {
            if (!(node = node.parentNode)) {
              throw new Error(`transition ${id2} not found`);
            }
          }
          return timing;
        }
        function selection_transition(name) {
          var id2, timing;
          if (name instanceof Transition) {
            id2 = name._id, name = name._name;
          } else {
            id2 = newId(), (timing = defaultTiming).time = d3Timer.now(), name = name == null ? null : name + "";
          }
          for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
              if (node = group[i]) {
                schedule(node, name, id2, i, group, timing || inherit(node, id2));
              }
            }
          }
          return new Transition(groups, this._parents, name, id2);
        }
        d3Selection.selection.prototype.interrupt = selection_interrupt;
        d3Selection.selection.prototype.transition = selection_transition;
        var root = [null];
        function active(node, name) {
          var schedules = node.__transition, schedule2, i;
          if (schedules) {
            name = name == null ? null : name + "";
            for (i in schedules) {
              if ((schedule2 = schedules[i]).state > SCHEDULED && schedule2.name === name) {
                return new Transition([[node]], root, name, +i);
              }
            }
          }
          return null;
        }
        exports2.active = active;
        exports2.interrupt = interrupt;
        exports2.transition = transition;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-brush-npm-2.1.0-b62dc5c37c-35fb7e3b42.zip/node_modules/d3-brush/dist/d3-brush.js
  var require_d3_brush = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-brush-npm-2.1.0-b62dc5c37c-35fb7e3b42.zip/node_modules/d3-brush/dist/d3-brush.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_dispatch(), require_d3_drag(), require_d3_interpolate(), require_d3_selection(), require_d3_transition()) : typeof define === "function" && define.amd ? define(["exports", "d3-dispatch", "d3-drag", "d3-interpolate", "d3-selection", "d3-transition"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3));
      })(exports, function(exports2, d3Dispatch, d3Drag, d3Interpolate, d3Selection, d3Transition) {
        "use strict";
        var constant = (x) => () => x;
        function BrushEvent(type2, {
          sourceEvent,
          target,
          selection,
          mode,
          dispatch
        }) {
          Object.defineProperties(this, {
            type: { value: type2, enumerable: true, configurable: true },
            sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
            target: { value: target, enumerable: true, configurable: true },
            selection: { value: selection, enumerable: true, configurable: true },
            mode: { value: mode, enumerable: true, configurable: true },
            _: { value: dispatch }
          });
        }
        function nopropagation(event) {
          event.stopImmediatePropagation();
        }
        function noevent(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
        }
        var MODE_DRAG = { name: "drag" }, MODE_SPACE = { name: "space" }, MODE_HANDLE = { name: "handle" }, MODE_CENTER = { name: "center" };
        const { abs, max, min } = Math;
        function number1(e) {
          return [+e[0], +e[1]];
        }
        function number2(e) {
          return [number1(e[0]), number1(e[1])];
        }
        var X = {
          name: "x",
          handles: ["w", "e"].map(type),
          input: function(x, e) {
            return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]];
          },
          output: function(xy) {
            return xy && [xy[0][0], xy[1][0]];
          }
        };
        var Y = {
          name: "y",
          handles: ["n", "s"].map(type),
          input: function(y, e) {
            return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]];
          },
          output: function(xy) {
            return xy && [xy[0][1], xy[1][1]];
          }
        };
        var XY = {
          name: "xy",
          handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
          input: function(xy) {
            return xy == null ? null : number2(xy);
          },
          output: function(xy) {
            return xy;
          }
        };
        var cursors = {
          overlay: "crosshair",
          selection: "move",
          n: "ns-resize",
          e: "ew-resize",
          s: "ns-resize",
          w: "ew-resize",
          nw: "nwse-resize",
          ne: "nesw-resize",
          se: "nwse-resize",
          sw: "nesw-resize"
        };
        var flipX = {
          e: "w",
          w: "e",
          nw: "ne",
          ne: "nw",
          se: "sw",
          sw: "se"
        };
        var flipY = {
          n: "s",
          s: "n",
          nw: "sw",
          ne: "se",
          se: "ne",
          sw: "nw"
        };
        var signsX = {
          overlay: 1,
          selection: 1,
          n: null,
          e: 1,
          s: null,
          w: -1,
          nw: -1,
          ne: 1,
          se: 1,
          sw: -1
        };
        var signsY = {
          overlay: 1,
          selection: 1,
          n: -1,
          e: null,
          s: 1,
          w: null,
          nw: -1,
          ne: -1,
          se: 1,
          sw: 1
        };
        function type(t) {
          return { type: t };
        }
        function defaultFilter(event) {
          return !event.ctrlKey && !event.button;
        }
        function defaultExtent() {
          var svg2 = this.ownerSVGElement || this;
          if (svg2.hasAttribute("viewBox")) {
            svg2 = svg2.viewBox.baseVal;
            return [[svg2.x, svg2.y], [svg2.x + svg2.width, svg2.y + svg2.height]];
          }
          return [[0, 0], [svg2.width.baseVal.value, svg2.height.baseVal.value]];
        }
        function defaultTouchable() {
          return navigator.maxTouchPoints || "ontouchstart" in this;
        }
        function local(node) {
          while (!node.__brush)
            if (!(node = node.parentNode))
              return;
          return node.__brush;
        }
        function empty(extent) {
          return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
        }
        function brushSelection(node) {
          var state = node.__brush;
          return state ? state.dim.output(state.selection) : null;
        }
        function brushX() {
          return brush$1(X);
        }
        function brushY() {
          return brush$1(Y);
        }
        function brush2() {
          return brush$1(XY);
        }
        function brush$1(dim) {
          var extent = defaultExtent, filter = defaultFilter, touchable = defaultTouchable, keys = true, listeners = d3Dispatch.dispatch("start", "brush", "end"), handleSize = 6, touchending;
          function brush3(group) {
            var overlay = group.property("__brush", initialize).selectAll(".overlay").data([type("overlay")]);
            overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function() {
              var extent2 = local(this).extent;
              d3Selection.select(this).attr("x", extent2[0][0]).attr("y", extent2[0][1]).attr("width", extent2[1][0] - extent2[0][0]).attr("height", extent2[1][1] - extent2[0][1]);
            });
            group.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
            var handle = group.selectAll(".handle").data(dim.handles, function(d) {
              return d.type;
            });
            handle.exit().remove();
            handle.enter().append("rect").attr("class", function(d) {
              return "handle handle--" + d.type;
            }).attr("cursor", function(d) {
              return cursors[d.type];
            });
            group.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
          }
          brush3.move = function(group, selection) {
            if (group.tween) {
              group.on("start.brush", function(event) {
                emitter(this, arguments).beforestart().start(event);
              }).on("interrupt.brush end.brush", function(event) {
                emitter(this, arguments).end(event);
              }).tween("brush", function() {
                var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent), i = d3Interpolate.interpolate(selection0, selection1);
                function tween(t) {
                  state.selection = t === 1 && selection1 === null ? null : i(t);
                  redraw.call(that);
                  emit.brush();
                }
                return selection0 !== null && selection1 !== null ? tween : tween(1);
              });
            } else {
              group.each(function() {
                var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent), emit = emitter(that, args).beforestart();
                d3Transition.interrupt(that);
                state.selection = selection1 === null ? null : selection1;
                redraw.call(that);
                emit.start().brush().end();
              });
            }
          };
          brush3.clear = function(group) {
            brush3.move(group, null);
          };
          function redraw() {
            var group = d3Selection.select(this), selection = local(this).selection;
            if (selection) {
              group.selectAll(".selection").style("display", null).attr("x", selection[0][0]).attr("y", selection[0][1]).attr("width", selection[1][0] - selection[0][0]).attr("height", selection[1][1] - selection[0][1]);
              group.selectAll(".handle").style("display", null).attr("x", function(d) {
                return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
              }).attr("y", function(d) {
                return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
              }).attr("width", function(d) {
                return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize;
              }).attr("height", function(d) {
                return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize;
              });
            } else {
              group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
            }
          }
          function emitter(that, args, clean) {
            var emit = that.__brush.emitter;
            return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
          }
          function Emitter(that, args, clean) {
            this.that = that;
            this.args = args;
            this.state = that.__brush;
            this.active = 0;
            this.clean = clean;
          }
          Emitter.prototype = {
            beforestart: function() {
              if (++this.active === 1)
                this.state.emitter = this, this.starting = true;
              return this;
            },
            start: function(event, mode) {
              if (this.starting)
                this.starting = false, this.emit("start", event, mode);
              else
                this.emit("brush", event);
              return this;
            },
            brush: function(event, mode) {
              this.emit("brush", event, mode);
              return this;
            },
            end: function(event, mode) {
              if (--this.active === 0)
                delete this.state.emitter, this.emit("end", event, mode);
              return this;
            },
            emit: function(type2, event, mode) {
              var d = d3Selection.select(this.that).datum();
              listeners.call(type2, this.that, new BrushEvent(type2, {
                sourceEvent: event,
                target: brush3,
                selection: dim.output(this.state.selection),
                mode,
                dispatch: listeners
              }), d);
            }
          };
          function started(event) {
            if (touchending && !event.touches)
              return;
            if (!filter.apply(this, arguments))
              return;
            var that = this, type2 = event.target.__data__.type, mode = (keys && event.metaKey ? type2 = "overlay" : type2) === "selection" ? MODE_DRAG : keys && event.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y ? null : signsX[type2], signY = dim === X ? null : signsY[type2], state = local(that), extent2 = state.extent, selection = state.selection, W = extent2[0][0], w0, w1, N = extent2[0][1], n0, n1, E = extent2[1][0], e0, e1, S = extent2[1][1], s0, s1, dx = 0, dy = 0, moving, shifting = signX && signY && keys && event.shiftKey, lockX, lockY, points = Array.from(event.touches || [event], (t) => {
              const i = t.identifier;
              t = d3Selection.pointer(t, that);
              t.point0 = t.slice();
              t.identifier = i;
              return t;
            });
            if (type2 === "overlay") {
              if (selection)
                moving = true;
              const pts = [points[0], points[1] || points[0]];
              state.selection = selection = [[
                w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),
                n0 = dim === X ? N : min(pts[0][1], pts[1][1])
              ], [
                e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),
                s0 = dim === X ? S : max(pts[0][1], pts[1][1])
              ]];
              if (points.length > 1)
                move();
            } else {
              w0 = selection[0][0];
              n0 = selection[0][1];
              e0 = selection[1][0];
              s0 = selection[1][1];
            }
            w1 = w0;
            n1 = n0;
            e1 = e0;
            s1 = s0;
            var group = d3Selection.select(that).attr("pointer-events", "none");
            var overlay = group.selectAll(".overlay").attr("cursor", cursors[type2]);
            d3Transition.interrupt(that);
            var emit = emitter(that, arguments, true).beforestart();
            if (event.touches) {
              emit.moved = moved;
              emit.ended = ended;
            } else {
              var view = d3Selection.select(event.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
              if (keys)
                view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
              d3Drag.dragDisable(event.view);
            }
            redraw.call(that);
            emit.start(event, mode.name);
            function moved(event2) {
              for (const p of event2.changedTouches || [event2]) {
                for (const d of points)
                  if (d.identifier === p.identifier)
                    d.cur = d3Selection.pointer(p, that);
              }
              if (shifting && !lockX && !lockY && points.length === 1) {
                const point = points[0];
                if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))
                  lockY = true;
                else
                  lockX = true;
              }
              for (const point of points)
                if (point.cur)
                  point[0] = point.cur[0], point[1] = point.cur[1];
              moving = true;
              noevent(event2);
              move(event2);
            }
            function move(event2) {
              const point = points[0], point0 = point.point0;
              var t;
              dx = point[0] - point0[0];
              dy = point[1] - point0[1];
              switch (mode) {
                case MODE_SPACE:
                case MODE_DRAG: {
                  if (signX)
                    dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
                  if (signY)
                    dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
                  break;
                }
                case MODE_HANDLE: {
                  if (points[1]) {
                    if (signX)
                      w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;
                    if (signY)
                      n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;
                  } else {
                    if (signX < 0)
                      dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                    else if (signX > 0)
                      dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                    if (signY < 0)
                      dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                    else if (signY > 0)
                      dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
                  }
                  break;
                }
                case MODE_CENTER: {
                  if (signX)
                    w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));
                  if (signY)
                    n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));
                  break;
                }
              }
              if (e1 < w1) {
                signX *= -1;
                t = w0, w0 = e0, e0 = t;
                t = w1, w1 = e1, e1 = t;
                if (type2 in flipX)
                  overlay.attr("cursor", cursors[type2 = flipX[type2]]);
              }
              if (s1 < n1) {
                signY *= -1;
                t = n0, n0 = s0, s0 = t;
                t = n1, n1 = s1, s1 = t;
                if (type2 in flipY)
                  overlay.attr("cursor", cursors[type2 = flipY[type2]]);
              }
              if (state.selection)
                selection = state.selection;
              if (lockX)
                w1 = selection[0][0], e1 = selection[1][0];
              if (lockY)
                n1 = selection[0][1], s1 = selection[1][1];
              if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
                state.selection = [[w1, n1], [e1, s1]];
                redraw.call(that);
                emit.brush(event2, mode.name);
              }
            }
            function ended(event2) {
              nopropagation(event2);
              if (event2.touches) {
                if (event2.touches.length)
                  return;
                if (touchending)
                  clearTimeout(touchending);
                touchending = setTimeout(function() {
                  touchending = null;
                }, 500);
              } else {
                d3Drag.dragEnable(event2.view, moving);
                view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
              }
              group.attr("pointer-events", "all");
              overlay.attr("cursor", cursors.overlay);
              if (state.selection)
                selection = state.selection;
              if (empty(selection))
                state.selection = null, redraw.call(that);
              emit.end(event2, mode.name);
            }
            function keydowned(event2) {
              switch (event2.keyCode) {
                case 16: {
                  shifting = signX && signY;
                  break;
                }
                case 18: {
                  if (mode === MODE_HANDLE) {
                    if (signX)
                      e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                    if (signY)
                      s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                    mode = MODE_CENTER;
                    move();
                  }
                  break;
                }
                case 32: {
                  if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                    if (signX < 0)
                      e0 = e1 - dx;
                    else if (signX > 0)
                      w0 = w1 - dx;
                    if (signY < 0)
                      s0 = s1 - dy;
                    else if (signY > 0)
                      n0 = n1 - dy;
                    mode = MODE_SPACE;
                    overlay.attr("cursor", cursors.selection);
                    move();
                  }
                  break;
                }
                default:
                  return;
              }
              noevent(event2);
            }
            function keyupped(event2) {
              switch (event2.keyCode) {
                case 16: {
                  if (shifting) {
                    lockX = lockY = shifting = false;
                    move();
                  }
                  break;
                }
                case 18: {
                  if (mode === MODE_CENTER) {
                    if (signX < 0)
                      e0 = e1;
                    else if (signX > 0)
                      w0 = w1;
                    if (signY < 0)
                      s0 = s1;
                    else if (signY > 0)
                      n0 = n1;
                    mode = MODE_HANDLE;
                    move();
                  }
                  break;
                }
                case 32: {
                  if (mode === MODE_SPACE) {
                    if (event2.altKey) {
                      if (signX)
                        e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                      if (signY)
                        s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                      mode = MODE_CENTER;
                    } else {
                      if (signX < 0)
                        e0 = e1;
                      else if (signX > 0)
                        w0 = w1;
                      if (signY < 0)
                        s0 = s1;
                      else if (signY > 0)
                        n0 = n1;
                      mode = MODE_HANDLE;
                    }
                    overlay.attr("cursor", cursors[type2]);
                    move();
                  }
                  break;
                }
                default:
                  return;
              }
              noevent(event2);
            }
          }
          function touchmoved(event) {
            emitter(this, arguments).moved(event);
          }
          function touchended(event) {
            emitter(this, arguments).ended(event);
          }
          function initialize() {
            var state = this.__brush || { selection: null };
            state.extent = number2(extent.apply(this, arguments));
            state.dim = dim;
            return state;
          }
          brush3.extent = function(_) {
            return arguments.length ? (extent = typeof _ === "function" ? _ : constant(number2(_)), brush3) : extent;
          };
          brush3.filter = function(_) {
            return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), brush3) : filter;
          };
          brush3.touchable = function(_) {
            return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), brush3) : touchable;
          };
          brush3.handleSize = function(_) {
            return arguments.length ? (handleSize = +_, brush3) : handleSize;
          };
          brush3.keyModifiers = function(_) {
            return arguments.length ? (keys = !!_, brush3) : keys;
          };
          brush3.on = function() {
            var value = listeners.on.apply(listeners, arguments);
            return value === listeners ? brush3 : value;
          };
          return brush3;
        }
        exports2.brush = brush2;
        exports2.brushSelection = brushSelection;
        exports2.brushX = brushX;
        exports2.brushY = brushY;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-path-npm-2.0.0-6d1499464f-e39e91dfb9.zip/node_modules/d3-path/dist/d3-path.js
  var require_d3_path = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-path-npm-2.0.0-6d1499464f-e39e91dfb9.zip/node_modules/d3-path/dist/d3-path.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        const pi = Math.PI, tau = 2 * pi, epsilon = 1e-6, tauEpsilon = tau - epsilon;
        function Path() {
          this._x0 = this._y0 = this._x1 = this._y1 = null;
          this._ = "";
        }
        function path() {
          return new Path();
        }
        Path.prototype = path.prototype = {
          constructor: Path,
          moveTo: function(x, y) {
            this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
          },
          closePath: function() {
            if (this._x1 !== null) {
              this._x1 = this._x0, this._y1 = this._y0;
              this._ += "Z";
            }
          },
          lineTo: function(x, y) {
            this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
          },
          quadraticCurveTo: function(x1, y1, x, y) {
            this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
          },
          bezierCurveTo: function(x1, y1, x2, y2, x, y) {
            this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
          },
          arcTo: function(x1, y1, x2, y2, r) {
            x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
            var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
            if (r < 0)
              throw new Error("negative radius: " + r);
            if (this._x1 === null) {
              this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
            } else if (!(l01_2 > epsilon))
              ;
            else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
              this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
            } else {
              var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
              if (Math.abs(t01 - 1) > epsilon) {
                this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
              }
              this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
            }
          },
          arc: function(x, y, r, a0, a1, ccw) {
            x = +x, y = +y, r = +r, ccw = !!ccw;
            var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
            if (r < 0)
              throw new Error("negative radius: " + r);
            if (this._x1 === null) {
              this._ += "M" + x0 + "," + y0;
            } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
              this._ += "L" + x0 + "," + y0;
            }
            if (!r)
              return;
            if (da < 0)
              da = da % tau + tau;
            if (da > tauEpsilon) {
              this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
            } else if (da > epsilon) {
              this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
            }
          },
          rect: function(x, y, w, h19) {
            this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h19 + "h" + -w + "Z";
          },
          toString: function() {
            return this._;
          }
        };
        exports2.path = path;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-chord-npm-2.0.0-910d1fa3a9-932f1e9a50.zip/node_modules/d3-chord/dist/d3-chord.js
  var require_d3_chord = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-chord-npm-2.0.0-910d1fa3a9-932f1e9a50.zip/node_modules/d3-chord/dist/d3-chord.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_path()) : typeof define === "function" && define.amd ? define(["exports", "d3-path"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3));
      })(exports, function(exports2, d3Path) {
        "use strict";
        var abs = Math.abs;
        var cos = Math.cos;
        var sin = Math.sin;
        var pi = Math.PI;
        var halfPi = pi / 2;
        var tau = pi * 2;
        var max = Math.max;
        var epsilon = 1e-12;
        function range(i, j) {
          return Array.from({ length: j - i }, (_, k) => i + k);
        }
        function compareValue(compare) {
          return function(a, b) {
            return compare(a.source.value + a.target.value, b.source.value + b.target.value);
          };
        }
        function chord() {
          return chord$1(false, false);
        }
        function chordTranspose() {
          return chord$1(false, true);
        }
        function chordDirected() {
          return chord$1(true, false);
        }
        function chord$1(directed, transpose) {
          var padAngle = 0, sortGroups = null, sortSubgroups = null, sortChords = null;
          function chord2(matrix) {
            var n = matrix.length, groupSums = new Array(n), groupIndex = range(0, n), chords = new Array(n * n), groups = new Array(n), k = 0, dx;
            matrix = Float64Array.from({ length: n * n }, transpose ? (_, i) => matrix[i % n][i / n | 0] : (_, i) => matrix[i / n | 0][i % n]);
            for (let i = 0; i < n; ++i) {
              let x = 0;
              for (let j = 0; j < n; ++j)
                x += matrix[i * n + j] + directed * matrix[j * n + i];
              k += groupSums[i] = x;
            }
            k = max(0, tau - padAngle * n) / k;
            dx = k ? padAngle : tau / n;
            {
              let x = 0;
              if (sortGroups)
                groupIndex.sort((a, b) => sortGroups(groupSums[a], groupSums[b]));
              for (const i of groupIndex) {
                const x0 = x;
                if (directed) {
                  const subgroupIndex = range(~n + 1, n).filter((j) => j < 0 ? matrix[~j * n + i] : matrix[i * n + j]);
                  if (sortSubgroups)
                    subgroupIndex.sort((a, b) => sortSubgroups(a < 0 ? -matrix[~a * n + i] : matrix[i * n + a], b < 0 ? -matrix[~b * n + i] : matrix[i * n + b]));
                  for (const j of subgroupIndex) {
                    if (j < 0) {
                      const chord3 = chords[~j * n + i] || (chords[~j * n + i] = { source: null, target: null });
                      chord3.target = { index: i, startAngle: x, endAngle: x += matrix[~j * n + i] * k, value: matrix[~j * n + i] };
                    } else {
                      const chord3 = chords[i * n + j] || (chords[i * n + j] = { source: null, target: null });
                      chord3.source = { index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j] };
                    }
                  }
                  groups[i] = { index: i, startAngle: x0, endAngle: x, value: groupSums[i] };
                } else {
                  const subgroupIndex = range(0, n).filter((j) => matrix[i * n + j] || matrix[j * n + i]);
                  if (sortSubgroups)
                    subgroupIndex.sort((a, b) => sortSubgroups(matrix[i * n + a], matrix[i * n + b]));
                  for (const j of subgroupIndex) {
                    let chord3;
                    if (i < j) {
                      chord3 = chords[i * n + j] || (chords[i * n + j] = { source: null, target: null });
                      chord3.source = { index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j] };
                    } else {
                      chord3 = chords[j * n + i] || (chords[j * n + i] = { source: null, target: null });
                      chord3.target = { index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j] };
                      if (i === j)
                        chord3.source = chord3.target;
                    }
                    if (chord3.source && chord3.target && chord3.source.value < chord3.target.value) {
                      const source = chord3.source;
                      chord3.source = chord3.target;
                      chord3.target = source;
                    }
                  }
                  groups[i] = { index: i, startAngle: x0, endAngle: x, value: groupSums[i] };
                }
                x += dx;
              }
            }
            chords = Object.values(chords);
            chords.groups = groups;
            return sortChords ? chords.sort(sortChords) : chords;
          }
          chord2.padAngle = function(_) {
            return arguments.length ? (padAngle = max(0, _), chord2) : padAngle;
          };
          chord2.sortGroups = function(_) {
            return arguments.length ? (sortGroups = _, chord2) : sortGroups;
          };
          chord2.sortSubgroups = function(_) {
            return arguments.length ? (sortSubgroups = _, chord2) : sortSubgroups;
          };
          chord2.sortChords = function(_) {
            return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord2) : sortChords && sortChords._;
          };
          return chord2;
        }
        var slice = Array.prototype.slice;
        function constant(x) {
          return function() {
            return x;
          };
        }
        function defaultSource(d) {
          return d.source;
        }
        function defaultTarget(d) {
          return d.target;
        }
        function defaultRadius(d) {
          return d.radius;
        }
        function defaultStartAngle(d) {
          return d.startAngle;
        }
        function defaultEndAngle(d) {
          return d.endAngle;
        }
        function defaultPadAngle() {
          return 0;
        }
        function defaultArrowheadRadius() {
          return 10;
        }
        function ribbon(headRadius) {
          var source = defaultSource, target = defaultTarget, sourceRadius = defaultRadius, targetRadius = defaultRadius, startAngle = defaultStartAngle, endAngle = defaultEndAngle, padAngle = defaultPadAngle, context = null;
          function ribbon2() {
            var buffer, s = source.apply(this, arguments), t = target.apply(this, arguments), ap = padAngle.apply(this, arguments) / 2, argv = slice.call(arguments), sr = +sourceRadius.apply(this, (argv[0] = s, argv)), sa0 = startAngle.apply(this, argv) - halfPi, sa1 = endAngle.apply(this, argv) - halfPi, tr = +targetRadius.apply(this, (argv[0] = t, argv)), ta0 = startAngle.apply(this, argv) - halfPi, ta1 = endAngle.apply(this, argv) - halfPi;
            if (!context)
              context = buffer = d3Path.path();
            if (ap > epsilon) {
              if (abs(sa1 - sa0) > ap * 2 + epsilon)
                sa1 > sa0 ? (sa0 += ap, sa1 -= ap) : (sa0 -= ap, sa1 += ap);
              else
                sa0 = sa1 = (sa0 + sa1) / 2;
              if (abs(ta1 - ta0) > ap * 2 + epsilon)
                ta1 > ta0 ? (ta0 += ap, ta1 -= ap) : (ta0 -= ap, ta1 += ap);
              else
                ta0 = ta1 = (ta0 + ta1) / 2;
            }
            context.moveTo(sr * cos(sa0), sr * sin(sa0));
            context.arc(0, 0, sr, sa0, sa1);
            if (sa0 !== ta0 || sa1 !== ta1) {
              if (headRadius) {
                var hr = +headRadius.apply(this, arguments), tr2 = tr - hr, ta2 = (ta0 + ta1) / 2;
                context.quadraticCurveTo(0, 0, tr2 * cos(ta0), tr2 * sin(ta0));
                context.lineTo(tr * cos(ta2), tr * sin(ta2));
                context.lineTo(tr2 * cos(ta1), tr2 * sin(ta1));
              } else {
                context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
                context.arc(0, 0, tr, ta0, ta1);
              }
            }
            context.quadraticCurveTo(0, 0, sr * cos(sa0), sr * sin(sa0));
            context.closePath();
            if (buffer)
              return context = null, buffer + "" || null;
          }
          if (headRadius)
            ribbon2.headRadius = function(_) {
              return arguments.length ? (headRadius = typeof _ === "function" ? _ : constant(+_), ribbon2) : headRadius;
            };
          ribbon2.radius = function(_) {
            return arguments.length ? (sourceRadius = targetRadius = typeof _ === "function" ? _ : constant(+_), ribbon2) : sourceRadius;
          };
          ribbon2.sourceRadius = function(_) {
            return arguments.length ? (sourceRadius = typeof _ === "function" ? _ : constant(+_), ribbon2) : sourceRadius;
          };
          ribbon2.targetRadius = function(_) {
            return arguments.length ? (targetRadius = typeof _ === "function" ? _ : constant(+_), ribbon2) : targetRadius;
          };
          ribbon2.startAngle = function(_) {
            return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), ribbon2) : startAngle;
          };
          ribbon2.endAngle = function(_) {
            return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), ribbon2) : endAngle;
          };
          ribbon2.padAngle = function(_) {
            return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), ribbon2) : padAngle;
          };
          ribbon2.source = function(_) {
            return arguments.length ? (source = _, ribbon2) : source;
          };
          ribbon2.target = function(_) {
            return arguments.length ? (target = _, ribbon2) : target;
          };
          ribbon2.context = function(_) {
            return arguments.length ? (context = _ == null ? null : _, ribbon2) : context;
          };
          return ribbon2;
        }
        function ribbon$1() {
          return ribbon();
        }
        function ribbonArrow() {
          return ribbon(defaultArrowheadRadius);
        }
        exports2.chord = chord;
        exports2.chordDirected = chordDirected;
        exports2.chordTranspose = chordTranspose;
        exports2.ribbon = ribbon$1;
        exports2.ribbonArrow = ribbonArrow;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-contour-npm-2.0.0-e7f788b5dd-7d46bad378.zip/node_modules/d3-contour/dist/d3-contour.js
  var require_d3_contour = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-contour-npm-2.0.0-e7f788b5dd-7d46bad378.zip/node_modules/d3-contour/dist/d3-contour.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_array()) : typeof define === "function" && define.amd ? define(["exports", "d3-array"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3));
      })(exports, function(exports2, d3Array) {
        "use strict";
        var array = Array.prototype;
        var slice = array.slice;
        function ascending(a, b) {
          return a - b;
        }
        function area(ring) {
          var i = 0, n = ring.length, area2 = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
          while (++i < n)
            area2 += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
          return area2;
        }
        var constant = (x) => () => x;
        function contains(ring, hole) {
          var i = -1, n = hole.length, c;
          while (++i < n)
            if (c = ringContains(ring, hole[i]))
              return c;
          return 0;
        }
        function ringContains(ring, point) {
          var x = point[0], y = point[1], contains2 = -1;
          for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
            var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
            if (segmentContains(pi, pj, point))
              return 0;
            if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi)
              contains2 = -contains2;
          }
          return contains2;
        }
        function segmentContains(a, b, c) {
          var i;
          return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
        }
        function collinear(a, b, c) {
          return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
        }
        function within(p, q, r) {
          return p <= q && q <= r || r <= q && q <= p;
        }
        function noop() {
        }
        var cases = [
          [],
          [[[1, 1.5], [0.5, 1]]],
          [[[1.5, 1], [1, 1.5]]],
          [[[1.5, 1], [0.5, 1]]],
          [[[1, 0.5], [1.5, 1]]],
          [[[1, 1.5], [0.5, 1]], [[1, 0.5], [1.5, 1]]],
          [[[1, 0.5], [1, 1.5]]],
          [[[1, 0.5], [0.5, 1]]],
          [[[0.5, 1], [1, 0.5]]],
          [[[1, 1.5], [1, 0.5]]],
          [[[0.5, 1], [1, 0.5]], [[1.5, 1], [1, 1.5]]],
          [[[1.5, 1], [1, 0.5]]],
          [[[0.5, 1], [1.5, 1]]],
          [[[1, 1.5], [1.5, 1]]],
          [[[0.5, 1], [1, 1.5]]],
          []
        ];
        function contours() {
          var dx = 1, dy = 1, threshold = d3Array.thresholdSturges, smooth = smoothLinear;
          function contours2(values) {
            var tz = threshold(values);
            if (!Array.isArray(tz)) {
              var domain = d3Array.extent(values), start = domain[0], stop = domain[1];
              tz = d3Array.tickStep(start, stop, tz);
              tz = d3Array.range(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
            } else {
              tz = tz.slice().sort(ascending);
            }
            return tz.map(function(value) {
              return contour(values, value);
            });
          }
          function contour(values, value) {
            var polygons = [], holes = [];
            isorings(values, value, function(ring) {
              smooth(ring, values, value);
              if (area(ring) > 0)
                polygons.push([ring]);
              else
                holes.push(ring);
            });
            holes.forEach(function(hole) {
              for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
                if (contains((polygon = polygons[i])[0], hole) !== -1) {
                  polygon.push(hole);
                  return;
                }
              }
            });
            return {
              type: "MultiPolygon",
              value,
              coordinates: polygons
            };
          }
          function isorings(values, value, callback) {
            var fragmentByStart = new Array(), fragmentByEnd = new Array(), x, y, t0, t1, t2, t3;
            x = y = -1;
            t1 = values[0] >= value;
            cases[t1 << 1].forEach(stitch);
            while (++x < dx - 1) {
              t0 = t1, t1 = values[x + 1] >= value;
              cases[t0 | t1 << 1].forEach(stitch);
            }
            cases[t1 << 0].forEach(stitch);
            while (++y < dy - 1) {
              x = -1;
              t1 = values[y * dx + dx] >= value;
              t2 = values[y * dx] >= value;
              cases[t1 << 1 | t2 << 2].forEach(stitch);
              while (++x < dx - 1) {
                t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
                t3 = t2, t2 = values[y * dx + x + 1] >= value;
                cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
              }
              cases[t1 | t2 << 3].forEach(stitch);
            }
            x = -1;
            t2 = values[y * dx] >= value;
            cases[t2 << 2].forEach(stitch);
            while (++x < dx - 1) {
              t3 = t2, t2 = values[y * dx + x + 1] >= value;
              cases[t2 << 2 | t3 << 3].forEach(stitch);
            }
            cases[t2 << 3].forEach(stitch);
            function stitch(line2) {
              var start = [line2[0][0] + x, line2[0][1] + y], end = [line2[1][0] + x, line2[1][1] + y], startIndex = index(start), endIndex = index(end), f, g;
              if (f = fragmentByEnd[startIndex]) {
                if (g = fragmentByStart[endIndex]) {
                  delete fragmentByEnd[f.end];
                  delete fragmentByStart[g.start];
                  if (f === g) {
                    f.ring.push(end);
                    callback(f.ring);
                  } else {
                    fragmentByStart[f.start] = fragmentByEnd[g.end] = { start: f.start, end: g.end, ring: f.ring.concat(g.ring) };
                  }
                } else {
                  delete fragmentByEnd[f.end];
                  f.ring.push(end);
                  fragmentByEnd[f.end = endIndex] = f;
                }
              } else if (f = fragmentByStart[endIndex]) {
                if (g = fragmentByEnd[startIndex]) {
                  delete fragmentByStart[f.start];
                  delete fragmentByEnd[g.end];
                  if (f === g) {
                    f.ring.push(end);
                    callback(f.ring);
                  } else {
                    fragmentByStart[g.start] = fragmentByEnd[f.end] = { start: g.start, end: f.end, ring: g.ring.concat(f.ring) };
                  }
                } else {
                  delete fragmentByStart[f.start];
                  f.ring.unshift(start);
                  fragmentByStart[f.start = startIndex] = f;
                }
              } else {
                fragmentByStart[startIndex] = fragmentByEnd[endIndex] = { start: startIndex, end: endIndex, ring: [start, end] };
              }
            }
          }
          function index(point) {
            return point[0] * 2 + point[1] * (dx + 1) * 4;
          }
          function smoothLinear(ring, values, value) {
            ring.forEach(function(point) {
              var x = point[0], y = point[1], xt = x | 0, yt = y | 0, v0, v1 = values[yt * dx + xt];
              if (x > 0 && x < dx && xt === x) {
                v0 = values[yt * dx + xt - 1];
                point[0] = x + (value - v0) / (v1 - v0) - 0.5;
              }
              if (y > 0 && y < dy && yt === y) {
                v0 = values[(yt - 1) * dx + xt];
                point[1] = y + (value - v0) / (v1 - v0) - 0.5;
              }
            });
          }
          contours2.contour = contour;
          contours2.size = function(_) {
            if (!arguments.length)
              return [dx, dy];
            var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
            if (!(_0 >= 0 && _1 >= 0))
              throw new Error("invalid size");
            return dx = _0, dy = _1, contours2;
          };
          contours2.thresholds = function(_) {
            return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours2) : threshold;
          };
          contours2.smooth = function(_) {
            return arguments.length ? (smooth = _ ? smoothLinear : noop, contours2) : smooth === smoothLinear;
          };
          return contours2;
        }
        function blurX(source, target, r) {
          var n = source.width, m = source.height, w = (r << 1) + 1;
          for (var j = 0; j < m; ++j) {
            for (var i = 0, sr = 0; i < n + r; ++i) {
              if (i < n) {
                sr += source.data[i + j * n];
              }
              if (i >= r) {
                if (i >= w) {
                  sr -= source.data[i - w + j * n];
                }
                target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
              }
            }
          }
        }
        function blurY(source, target, r) {
          var n = source.width, m = source.height, w = (r << 1) + 1;
          for (var i = 0; i < n; ++i) {
            for (var j = 0, sr = 0; j < m + r; ++j) {
              if (j < m) {
                sr += source.data[i + j * n];
              }
              if (j >= r) {
                if (j >= w) {
                  sr -= source.data[i + (j - w) * n];
                }
                target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
              }
            }
          }
        }
        function defaultX(d) {
          return d[0];
        }
        function defaultY(d) {
          return d[1];
        }
        function defaultWeight() {
          return 1;
        }
        function density() {
          var x = defaultX, y = defaultY, weight = defaultWeight, dx = 960, dy = 500, r = 20, k = 2, o = r * 3, n = dx + o * 2 >> k, m = dy + o * 2 >> k, threshold = constant(20);
          function density2(data) {
            var values0 = new Float32Array(n * m), values1 = new Float32Array(n * m);
            data.forEach(function(d, i, data2) {
              var xi = +x(d, i, data2) + o >> k, yi = +y(d, i, data2) + o >> k, wi = +weight(d, i, data2);
              if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
                values0[xi + yi * n] += wi;
              }
            });
            blurX({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k);
            blurY({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k);
            blurX({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k);
            blurY({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k);
            blurX({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k);
            blurY({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k);
            var tz = threshold(values0);
            if (!Array.isArray(tz)) {
              var stop = d3Array.max(values0);
              tz = d3Array.tickStep(0, stop, tz);
              tz = d3Array.range(0, Math.floor(stop / tz) * tz, tz);
              tz.shift();
            }
            return contours().thresholds(tz).size([n, m])(values0).map(transform);
          }
          function transform(geometry) {
            geometry.value *= Math.pow(2, -2 * k);
            geometry.coordinates.forEach(transformPolygon);
            return geometry;
          }
          function transformPolygon(coordinates) {
            coordinates.forEach(transformRing);
          }
          function transformRing(coordinates) {
            coordinates.forEach(transformPoint);
          }
          function transformPoint(coordinates) {
            coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
            coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
          }
          function resize() {
            o = r * 3;
            n = dx + o * 2 >> k;
            m = dy + o * 2 >> k;
            return density2;
          }
          density2.x = function(_) {
            return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), density2) : x;
          };
          density2.y = function(_) {
            return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), density2) : y;
          };
          density2.weight = function(_) {
            return arguments.length ? (weight = typeof _ === "function" ? _ : constant(+_), density2) : weight;
          };
          density2.size = function(_) {
            if (!arguments.length)
              return [dx, dy];
            var _0 = +_[0], _1 = +_[1];
            if (!(_0 >= 0 && _1 >= 0))
              throw new Error("invalid size");
            return dx = _0, dy = _1, resize();
          };
          density2.cellSize = function(_) {
            if (!arguments.length)
              return 1 << k;
            if (!((_ = +_) >= 1))
              throw new Error("invalid cell size");
            return k = Math.floor(Math.log(_) / Math.LN2), resize();
          };
          density2.thresholds = function(_) {
            return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density2) : threshold;
          };
          density2.bandwidth = function(_) {
            if (!arguments.length)
              return Math.sqrt(r * (r + 1));
            if (!((_ = +_) >= 0))
              throw new Error("invalid bandwidth");
            return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
          };
          return density2;
        }
        exports2.contourDensity = density;
        exports2.contours = contours;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-delaunay-npm-5.3.0-e7e6775774-3fa5ae167e.zip/node_modules/d3-delaunay/dist/d3-delaunay.js
  var require_d3_delaunay = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-delaunay-npm-5.3.0-e7e6775774-3fa5ae167e.zip/node_modules/d3-delaunay/dist/d3-delaunay.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        const EPSILON = Math.pow(2, -52);
        const EDGE_STACK = new Uint32Array(512);
        class Delaunator {
          static from(points, getX = defaultGetX, getY = defaultGetY) {
            const n = points.length;
            const coords = new Float64Array(n * 2);
            for (let i = 0; i < n; i++) {
              const p = points[i];
              coords[2 * i] = getX(p);
              coords[2 * i + 1] = getY(p);
            }
            return new Delaunator(coords);
          }
          constructor(coords) {
            const n = coords.length >> 1;
            if (n > 0 && typeof coords[0] !== "number")
              throw new Error("Expected coords to contain numbers.");
            this.coords = coords;
            const maxTriangles = Math.max(2 * n - 5, 0);
            this._triangles = new Uint32Array(maxTriangles * 3);
            this._halfedges = new Int32Array(maxTriangles * 3);
            this._hashSize = Math.ceil(Math.sqrt(n));
            this._hullPrev = new Uint32Array(n);
            this._hullNext = new Uint32Array(n);
            this._hullTri = new Uint32Array(n);
            this._hullHash = new Int32Array(this._hashSize).fill(-1);
            this._ids = new Uint32Array(n);
            this._dists = new Float64Array(n);
            this.update();
          }
          update() {
            const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
            const n = coords.length >> 1;
            let minX = Infinity;
            let minY = Infinity;
            let maxX = -Infinity;
            let maxY = -Infinity;
            for (let i = 0; i < n; i++) {
              const x = coords[2 * i];
              const y = coords[2 * i + 1];
              if (x < minX)
                minX = x;
              if (y < minY)
                minY = y;
              if (x > maxX)
                maxX = x;
              if (y > maxY)
                maxY = y;
              this._ids[i] = i;
            }
            const cx = (minX + maxX) / 2;
            const cy = (minY + maxY) / 2;
            let minDist = Infinity;
            let i0, i1, i2;
            for (let i = 0; i < n; i++) {
              const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
              if (d < minDist) {
                i0 = i;
                minDist = d;
              }
            }
            const i0x = coords[2 * i0];
            const i0y = coords[2 * i0 + 1];
            minDist = Infinity;
            for (let i = 0; i < n; i++) {
              if (i === i0)
                continue;
              const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
              if (d < minDist && d > 0) {
                i1 = i;
                minDist = d;
              }
            }
            let i1x = coords[2 * i1];
            let i1y = coords[2 * i1 + 1];
            let minRadius = Infinity;
            for (let i = 0; i < n; i++) {
              if (i === i0 || i === i1)
                continue;
              const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
              if (r < minRadius) {
                i2 = i;
                minRadius = r;
              }
            }
            let i2x = coords[2 * i2];
            let i2y = coords[2 * i2 + 1];
            if (minRadius === Infinity) {
              for (let i = 0; i < n; i++) {
                this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
              }
              quicksort(this._ids, this._dists, 0, n - 1);
              const hull = new Uint32Array(n);
              let j = 0;
              for (let i = 0, d0 = -Infinity; i < n; i++) {
                const id = this._ids[i];
                if (this._dists[id] > d0) {
                  hull[j++] = id;
                  d0 = this._dists[id];
                }
              }
              this.hull = hull.subarray(0, j);
              this.triangles = new Uint32Array(0);
              this.halfedges = new Uint32Array(0);
              return;
            }
            if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
              const i = i1;
              const x = i1x;
              const y = i1y;
              i1 = i2;
              i1x = i2x;
              i1y = i2y;
              i2 = i;
              i2x = x;
              i2y = y;
            }
            const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
            this._cx = center.x;
            this._cy = center.y;
            for (let i = 0; i < n; i++) {
              this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
            }
            quicksort(this._ids, this._dists, 0, n - 1);
            this._hullStart = i0;
            let hullSize = 3;
            hullNext[i0] = hullPrev[i2] = i1;
            hullNext[i1] = hullPrev[i0] = i2;
            hullNext[i2] = hullPrev[i1] = i0;
            hullTri[i0] = 0;
            hullTri[i1] = 1;
            hullTri[i2] = 2;
            hullHash.fill(-1);
            hullHash[this._hashKey(i0x, i0y)] = i0;
            hullHash[this._hashKey(i1x, i1y)] = i1;
            hullHash[this._hashKey(i2x, i2y)] = i2;
            this.trianglesLen = 0;
            this._addTriangle(i0, i1, i2, -1, -1, -1);
            for (let k = 0, xp, yp; k < this._ids.length; k++) {
              const i = this._ids[k];
              const x = coords[2 * i];
              const y = coords[2 * i + 1];
              if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON)
                continue;
              xp = x;
              yp = y;
              if (i === i0 || i === i1 || i === i2)
                continue;
              let start = 0;
              for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
                start = hullHash[(key + j) % this._hashSize];
                if (start !== -1 && start !== hullNext[start])
                  break;
              }
              start = hullPrev[start];
              let e = start, q;
              while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {
                e = q;
                if (e === start) {
                  e = -1;
                  break;
                }
              }
              if (e === -1)
                continue;
              let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
              hullTri[i] = this._legalize(t + 2);
              hullTri[e] = t;
              hullSize++;
              let n2 = hullNext[e];
              while (q = hullNext[n2], orient(x, y, coords[2 * n2], coords[2 * n2 + 1], coords[2 * q], coords[2 * q + 1])) {
                t = this._addTriangle(n2, i, q, hullTri[i], -1, hullTri[n2]);
                hullTri[i] = this._legalize(t + 2);
                hullNext[n2] = n2;
                hullSize--;
                n2 = q;
              }
              if (e === start) {
                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {
                  t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
                  this._legalize(t + 2);
                  hullTri[q] = t;
                  hullNext[e] = e;
                  hullSize--;
                  e = q;
                }
              }
              this._hullStart = hullPrev[i] = e;
              hullNext[e] = hullPrev[n2] = i;
              hullNext[i] = n2;
              hullHash[this._hashKey(x, y)] = i;
              hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
            }
            this.hull = new Uint32Array(hullSize);
            for (let i = 0, e = this._hullStart; i < hullSize; i++) {
              this.hull[i] = e;
              e = hullNext[e];
            }
            this.triangles = this._triangles.subarray(0, this.trianglesLen);
            this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
          }
          _hashKey(x, y) {
            return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
          }
          _legalize(a) {
            const { _triangles: triangles, _halfedges: halfedges, coords } = this;
            let i = 0;
            let ar = 0;
            while (true) {
              const b = halfedges[a];
              const a0 = a - a % 3;
              ar = a0 + (a + 2) % 3;
              if (b === -1) {
                if (i === 0)
                  break;
                a = EDGE_STACK[--i];
                continue;
              }
              const b0 = b - b % 3;
              const al = a0 + (a + 1) % 3;
              const bl = b0 + (b + 2) % 3;
              const p0 = triangles[ar];
              const pr = triangles[a];
              const pl = triangles[al];
              const p1 = triangles[bl];
              const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);
              if (illegal) {
                triangles[a] = p1;
                triangles[b] = p0;
                const hbl = halfedges[bl];
                if (hbl === -1) {
                  let e = this._hullStart;
                  do {
                    if (this._hullTri[e] === bl) {
                      this._hullTri[e] = a;
                      break;
                    }
                    e = this._hullPrev[e];
                  } while (e !== this._hullStart);
                }
                this._link(a, hbl);
                this._link(b, halfedges[ar]);
                this._link(ar, bl);
                const br = b0 + (b + 1) % 3;
                if (i < EDGE_STACK.length) {
                  EDGE_STACK[i++] = br;
                }
              } else {
                if (i === 0)
                  break;
                a = EDGE_STACK[--i];
              }
            }
            return ar;
          }
          _link(a, b) {
            this._halfedges[a] = b;
            if (b !== -1)
              this._halfedges[b] = a;
          }
          _addTriangle(i0, i1, i2, a, b, c) {
            const t = this.trianglesLen;
            this._triangles[t] = i0;
            this._triangles[t + 1] = i1;
            this._triangles[t + 2] = i2;
            this._link(t, a);
            this._link(t + 1, b);
            this._link(t + 2, c);
            this.trianglesLen += 3;
            return t;
          }
        }
        function pseudoAngle(dx, dy) {
          const p = dx / (Math.abs(dx) + Math.abs(dy));
          return (dy > 0 ? 3 - p : 1 + p) / 4;
        }
        function dist(ax, ay, bx, by) {
          const dx = ax - bx;
          const dy = ay - by;
          return dx * dx + dy * dy;
        }
        function orientIfSure(px, py, rx, ry, qx, qy) {
          const l = (ry - py) * (qx - px);
          const r = (rx - px) * (qy - py);
          return Math.abs(l - r) >= 33306690738754716e-32 * Math.abs(l + r) ? l - r : 0;
        }
        function orient(rx, ry, qx, qy, px, py) {
          const sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);
          return sign < 0;
        }
        function inCircle(ax, ay, bx, by, cx, cy, px, py) {
          const dx = ax - px;
          const dy = ay - py;
          const ex = bx - px;
          const ey = by - py;
          const fx = cx - px;
          const fy = cy - py;
          const ap = dx * dx + dy * dy;
          const bp = ex * ex + ey * ey;
          const cp = fx * fx + fy * fy;
          return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
        }
        function circumradius(ax, ay, bx, by, cx, cy) {
          const dx = bx - ax;
          const dy = by - ay;
          const ex = cx - ax;
          const ey = cy - ay;
          const bl = dx * dx + dy * dy;
          const cl = ex * ex + ey * ey;
          const d = 0.5 / (dx * ey - dy * ex);
          const x = (ey * bl - dy * cl) * d;
          const y = (dx * cl - ex * bl) * d;
          return x * x + y * y;
        }
        function circumcenter(ax, ay, bx, by, cx, cy) {
          const dx = bx - ax;
          const dy = by - ay;
          const ex = cx - ax;
          const ey = cy - ay;
          const bl = dx * dx + dy * dy;
          const cl = ex * ex + ey * ey;
          const d = 0.5 / (dx * ey - dy * ex);
          const x = ax + (ey * bl - dy * cl) * d;
          const y = ay + (dx * cl - ex * bl) * d;
          return { x, y };
        }
        function quicksort(ids, dists, left, right) {
          if (right - left <= 20) {
            for (let i = left + 1; i <= right; i++) {
              const temp = ids[i];
              const tempDist = dists[temp];
              let j = i - 1;
              while (j >= left && dists[ids[j]] > tempDist)
                ids[j + 1] = ids[j--];
              ids[j + 1] = temp;
            }
          } else {
            const median = left + right >> 1;
            let i = left + 1;
            let j = right;
            swap(ids, median, i);
            if (dists[ids[left]] > dists[ids[right]])
              swap(ids, left, right);
            if (dists[ids[i]] > dists[ids[right]])
              swap(ids, i, right);
            if (dists[ids[left]] > dists[ids[i]])
              swap(ids, left, i);
            const temp = ids[i];
            const tempDist = dists[temp];
            while (true) {
              do
                i++;
              while (dists[ids[i]] < tempDist);
              do
                j--;
              while (dists[ids[j]] > tempDist);
              if (j < i)
                break;
              swap(ids, i, j);
            }
            ids[left + 1] = ids[j];
            ids[j] = temp;
            if (right - i + 1 >= j - left) {
              quicksort(ids, dists, i, right);
              quicksort(ids, dists, left, j - 1);
            } else {
              quicksort(ids, dists, left, j - 1);
              quicksort(ids, dists, i, right);
            }
          }
        }
        function swap(arr, i, j) {
          const tmp = arr[i];
          arr[i] = arr[j];
          arr[j] = tmp;
        }
        function defaultGetX(p) {
          return p[0];
        }
        function defaultGetY(p) {
          return p[1];
        }
        const epsilon = 1e-6;
        class Path {
          constructor() {
            this._x0 = this._y0 = this._x1 = this._y1 = null;
            this._ = "";
          }
          moveTo(x, y) {
            this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
          }
          closePath() {
            if (this._x1 !== null) {
              this._x1 = this._x0, this._y1 = this._y0;
              this._ += "Z";
            }
          }
          lineTo(x, y) {
            this._ += `L${this._x1 = +x},${this._y1 = +y}`;
          }
          arc(x, y, r) {
            x = +x, y = +y, r = +r;
            const x0 = x + r;
            const y0 = y;
            if (r < 0)
              throw new Error("negative radius");
            if (this._x1 === null)
              this._ += `M${x0},${y0}`;
            else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon)
              this._ += "L" + x0 + "," + y0;
            if (!r)
              return;
            this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
          }
          rect(x, y, w, h19) {
            this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h19}h${-w}Z`;
          }
          value() {
            return this._ || null;
          }
        }
        class Polygon {
          constructor() {
            this._ = [];
          }
          moveTo(x, y) {
            this._.push([x, y]);
          }
          closePath() {
            this._.push(this._[0].slice());
          }
          lineTo(x, y) {
            this._.push([x, y]);
          }
          value() {
            return this._.length ? this._ : null;
          }
        }
        class Voronoi {
          constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
            if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin)))
              throw new Error("invalid bounds");
            this.delaunay = delaunay;
            this._circumcenters = new Float64Array(delaunay.points.length * 2);
            this.vectors = new Float64Array(delaunay.points.length * 2);
            this.xmax = xmax, this.xmin = xmin;
            this.ymax = ymax, this.ymin = ymin;
            this._init();
          }
          update() {
            this.delaunay.update();
            this._init();
            return this;
          }
          _init() {
            const { delaunay: { points, hull, triangles }, vectors } = this;
            const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
            for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
              const t1 = triangles[i] * 2;
              const t2 = triangles[i + 1] * 2;
              const t3 = triangles[i + 2] * 2;
              const x12 = points[t1];
              const y12 = points[t1 + 1];
              const x2 = points[t2];
              const y2 = points[t2 + 1];
              const x3 = points[t3];
              const y3 = points[t3 + 1];
              const dx = x2 - x12;
              const dy = y2 - y12;
              const ex = x3 - x12;
              const ey = y3 - y12;
              const bl = dx * dx + dy * dy;
              const cl = ex * ex + ey * ey;
              const ab = (dx * ey - dy * ex) * 2;
              if (!ab) {
                x = (x12 + x3) / 2 - 1e8 * ey;
                y = (y12 + y3) / 2 + 1e8 * ex;
              } else if (Math.abs(ab) < 1e-8) {
                x = (x12 + x3) / 2;
                y = (y12 + y3) / 2;
              } else {
                const d = 1 / ab;
                x = x12 + (ey * bl - dy * cl) * d;
                y = y12 + (dx * cl - ex * bl) * d;
              }
              circumcenters[j] = x;
              circumcenters[j + 1] = y;
            }
            let h19 = hull[hull.length - 1];
            let p0, p1 = h19 * 4;
            let x0, x1 = points[2 * h19];
            let y0, y1 = points[2 * h19 + 1];
            vectors.fill(0);
            for (let i = 0; i < hull.length; ++i) {
              h19 = hull[i];
              p0 = p1, x0 = x1, y0 = y1;
              p1 = h19 * 4, x1 = points[2 * h19], y1 = points[2 * h19 + 1];
              vectors[p0 + 2] = vectors[p1] = y0 - y1;
              vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
            }
          }
          render(context) {
            const buffer = context == null ? context = new Path() : void 0;
            const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
            if (hull.length <= 1)
              return null;
            for (let i = 0, n = halfedges.length; i < n; ++i) {
              const j = halfedges[i];
              if (j < i)
                continue;
              const ti = Math.floor(i / 3) * 2;
              const tj = Math.floor(j / 3) * 2;
              const xi = circumcenters[ti];
              const yi = circumcenters[ti + 1];
              const xj = circumcenters[tj];
              const yj = circumcenters[tj + 1];
              this._renderSegment(xi, yi, xj, yj, context);
            }
            let h0, h1 = hull[hull.length - 1];
            for (let i = 0; i < hull.length; ++i) {
              h0 = h1, h1 = hull[i];
              const t = Math.floor(inedges[h1] / 3) * 2;
              const x = circumcenters[t];
              const y = circumcenters[t + 1];
              const v = h0 * 4;
              const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
              if (p)
                this._renderSegment(x, y, p[0], p[1], context);
            }
            return buffer && buffer.value();
          }
          renderBounds(context) {
            const buffer = context == null ? context = new Path() : void 0;
            context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
            return buffer && buffer.value();
          }
          renderCell(i, context) {
            const buffer = context == null ? context = new Path() : void 0;
            const points = this._clip(i);
            if (points === null || !points.length)
              return;
            context.moveTo(points[0], points[1]);
            let n = points.length;
            while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1)
              n -= 2;
            for (let i2 = 2; i2 < n; i2 += 2) {
              if (points[i2] !== points[i2 - 2] || points[i2 + 1] !== points[i2 - 1])
                context.lineTo(points[i2], points[i2 + 1]);
            }
            context.closePath();
            return buffer && buffer.value();
          }
          *cellPolygons() {
            const { delaunay: { points } } = this;
            for (let i = 0, n = points.length / 2; i < n; ++i) {
              const cell = this.cellPolygon(i);
              if (cell)
                cell.index = i, yield cell;
            }
          }
          cellPolygon(i) {
            const polygon = new Polygon();
            this.renderCell(i, polygon);
            return polygon.value();
          }
          _renderSegment(x0, y0, x1, y1, context) {
            let S;
            const c0 = this._regioncode(x0, y0);
            const c1 = this._regioncode(x1, y1);
            if (c0 === 0 && c1 === 0) {
              context.moveTo(x0, y0);
              context.lineTo(x1, y1);
            } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
              context.moveTo(S[0], S[1]);
              context.lineTo(S[2], S[3]);
            }
          }
          contains(i, x, y) {
            if ((x = +x, x !== x) || (y = +y, y !== y))
              return false;
            return this.delaunay._step(i, x, y) === i;
          }
          *neighbors(i) {
            const ci = this._clip(i);
            if (ci)
              for (const j of this.delaunay.neighbors(i)) {
                const cj = this._clip(j);
                if (cj)
                  loop:
                    for (let ai = 0, li = ci.length; ai < li; ai += 2) {
                      for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
                        if (ci[ai] == cj[aj] && ci[ai + 1] == cj[aj + 1] && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]) {
                          yield j;
                          break loop;
                        }
                      }
                    }
              }
          }
          _cell(i) {
            const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
            const e0 = inedges[i];
            if (e0 === -1)
              return null;
            const points = [];
            let e = e0;
            do {
              const t = Math.floor(e / 3);
              points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
              e = e % 3 === 2 ? e - 2 : e + 1;
              if (triangles[e] !== i)
                break;
              e = halfedges[e];
            } while (e !== e0 && e !== -1);
            return points;
          }
          _clip(i) {
            if (i === 0 && this.delaunay.hull.length === 1) {
              return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
            }
            const points = this._cell(i);
            if (points === null)
              return null;
            const { vectors: V } = this;
            const v = i * 4;
            return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);
          }
          _clipFinite(i, points) {
            const n = points.length;
            let P = null;
            let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
            let c0, c1 = this._regioncode(x1, y1);
            let e0, e1;
            for (let j = 0; j < n; j += 2) {
              x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
              c0 = c1, c1 = this._regioncode(x1, y1);
              if (c0 === 0 && c1 === 0) {
                e0 = e1, e1 = 0;
                if (P)
                  P.push(x1, y1);
                else
                  P = [x1, y1];
              } else {
                let S, sx0, sy0, sx1, sy1;
                if (c0 === 0) {
                  if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null)
                    continue;
                  [sx0, sy0, sx1, sy1] = S;
                } else {
                  if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null)
                    continue;
                  [sx1, sy1, sx0, sy0] = S;
                  e0 = e1, e1 = this._edgecode(sx0, sy0);
                  if (e0 && e1)
                    this._edge(i, e0, e1, P, P.length);
                  if (P)
                    P.push(sx0, sy0);
                  else
                    P = [sx0, sy0];
                }
                e0 = e1, e1 = this._edgecode(sx1, sy1);
                if (e0 && e1)
                  this._edge(i, e0, e1, P, P.length);
                if (P)
                  P.push(sx1, sy1);
                else
                  P = [sx1, sy1];
              }
            }
            if (P) {
              e0 = e1, e1 = this._edgecode(P[0], P[1]);
              if (e0 && e1)
                this._edge(i, e0, e1, P, P.length);
            } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
              return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
            }
            return P;
          }
          _clipSegment(x0, y0, x1, y1, c0, c1) {
            while (true) {
              if (c0 === 0 && c1 === 0)
                return [x0, y0, x1, y1];
              if (c0 & c1)
                return null;
              let x, y, c = c0 || c1;
              if (c & 8)
                x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
              else if (c & 4)
                x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
              else if (c & 2)
                y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
              else
                y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
              if (c0)
                x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
              else
                x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
            }
          }
          _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
            let P = Array.from(points), p;
            if (p = this._project(P[0], P[1], vx0, vy0))
              P.unshift(p[0], p[1]);
            if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn))
              P.push(p[0], p[1]);
            if (P = this._clipFinite(i, P)) {
              for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
                c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
                if (c0 && c1)
                  j = this._edge(i, c0, c1, P, j), n = P.length;
              }
            } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
              P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
            }
            return P;
          }
          _edge(i, e0, e1, P, j) {
            while (e0 !== e1) {
              let x, y;
              switch (e0) {
                case 5:
                  e0 = 4;
                  continue;
                case 4:
                  e0 = 6, x = this.xmax, y = this.ymin;
                  break;
                case 6:
                  e0 = 2;
                  continue;
                case 2:
                  e0 = 10, x = this.xmax, y = this.ymax;
                  break;
                case 10:
                  e0 = 8;
                  continue;
                case 8:
                  e0 = 9, x = this.xmin, y = this.ymax;
                  break;
                case 9:
                  e0 = 1;
                  continue;
                case 1:
                  e0 = 5, x = this.xmin, y = this.ymin;
                  break;
              }
              if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
                P.splice(j, 0, x, y), j += 2;
              }
            }
            if (P.length > 4) {
              for (let i2 = 0; i2 < P.length; i2 += 2) {
                const j2 = (i2 + 2) % P.length, k = (i2 + 4) % P.length;
                if (P[i2] === P[j2] && P[j2] === P[k] || P[i2 + 1] === P[j2 + 1] && P[j2 + 1] === P[k + 1])
                  P.splice(j2, 2), i2 -= 2;
              }
            }
            return j;
          }
          _project(x0, y0, vx, vy) {
            let t = Infinity, c, x, y;
            if (vy < 0) {
              if (y0 <= this.ymin)
                return null;
              if ((c = (this.ymin - y0) / vy) < t)
                y = this.ymin, x = x0 + (t = c) * vx;
            } else if (vy > 0) {
              if (y0 >= this.ymax)
                return null;
              if ((c = (this.ymax - y0) / vy) < t)
                y = this.ymax, x = x0 + (t = c) * vx;
            }
            if (vx > 0) {
              if (x0 >= this.xmax)
                return null;
              if ((c = (this.xmax - x0) / vx) < t)
                x = this.xmax, y = y0 + (t = c) * vy;
            } else if (vx < 0) {
              if (x0 <= this.xmin)
                return null;
              if ((c = (this.xmin - x0) / vx) < t)
                x = this.xmin, y = y0 + (t = c) * vy;
            }
            return [x, y];
          }
          _edgecode(x, y) {
            return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
          }
          _regioncode(x, y) {
            return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
          }
        }
        const tau = 2 * Math.PI, pow = Math.pow;
        function pointX(p) {
          return p[0];
        }
        function pointY(p) {
          return p[1];
        }
        function collinear(d) {
          const { triangles, coords } = d;
          for (let i = 0; i < triangles.length; i += 3) {
            const a = 2 * triangles[i], b = 2 * triangles[i + 1], c = 2 * triangles[i + 2], cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
            if (cross > 1e-10)
              return false;
          }
          return true;
        }
        function jitter(x, y, r) {
          return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
        }
        class Delaunay {
          static from(points, fx = pointX, fy = pointY, that) {
            return new Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
          }
          constructor(points) {
            this._delaunator = new Delaunator(points);
            this.inedges = new Int32Array(points.length / 2);
            this._hullIndex = new Int32Array(points.length / 2);
            this.points = this._delaunator.coords;
            this._init();
          }
          update() {
            this._delaunator.update();
            this._init();
            return this;
          }
          _init() {
            const d = this._delaunator, points = this.points;
            if (d.hull && d.hull.length > 2 && collinear(d)) {
              this.collinear = Int32Array.from({ length: points.length / 2 }, (_, i) => i).sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]);
              const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
              for (let i = 0, n = points.length / 2; i < n; ++i) {
                const p = jitter(points[2 * i], points[2 * i + 1], r);
                points[2 * i] = p[0];
                points[2 * i + 1] = p[1];
              }
              this._delaunator = new Delaunator(points);
            } else {
              delete this.collinear;
            }
            const halfedges = this.halfedges = this._delaunator.halfedges;
            const hull = this.hull = this._delaunator.hull;
            const triangles = this.triangles = this._delaunator.triangles;
            const inedges = this.inedges.fill(-1);
            const hullIndex = this._hullIndex.fill(-1);
            for (let e = 0, n = halfedges.length; e < n; ++e) {
              const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
              if (halfedges[e] === -1 || inedges[p] === -1)
                inedges[p] = e;
            }
            for (let i = 0, n = hull.length; i < n; ++i) {
              hullIndex[hull[i]] = i;
            }
            if (hull.length <= 2 && hull.length > 0) {
              this.triangles = new Int32Array(3).fill(-1);
              this.halfedges = new Int32Array(3).fill(-1);
              this.triangles[0] = hull[0];
              this.triangles[1] = hull[1];
              this.triangles[2] = hull[1];
              inedges[hull[0]] = 1;
              if (hull.length === 2)
                inedges[hull[1]] = 0;
            }
          }
          voronoi(bounds) {
            return new Voronoi(this, bounds);
          }
          *neighbors(i) {
            const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
            if (collinear2) {
              const l = collinear2.indexOf(i);
              if (l > 0)
                yield collinear2[l - 1];
              if (l < collinear2.length - 1)
                yield collinear2[l + 1];
              return;
            }
            const e0 = inedges[i];
            if (e0 === -1)
              return;
            let e = e0, p0 = -1;
            do {
              yield p0 = triangles[e];
              e = e % 3 === 2 ? e - 2 : e + 1;
              if (triangles[e] !== i)
                return;
              e = halfedges[e];
              if (e === -1) {
                const p = hull[(_hullIndex[i] + 1) % hull.length];
                if (p !== p0)
                  yield p;
                return;
              }
            } while (e !== e0);
          }
          find(x, y, i = 0) {
            if ((x = +x, x !== x) || (y = +y, y !== y))
              return -1;
            const i0 = i;
            let c;
            while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0)
              i = c;
            return c;
          }
          _step(i, x, y) {
            const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
            if (inedges[i] === -1 || !points.length)
              return (i + 1) % (points.length >> 1);
            let c = i;
            let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);
            const e0 = inedges[i];
            let e = e0;
            do {
              let t = triangles[e];
              const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);
              if (dt < dc)
                dc = dt, c = t;
              e = e % 3 === 2 ? e - 2 : e + 1;
              if (triangles[e] !== i)
                break;
              e = halfedges[e];
              if (e === -1) {
                e = hull[(_hullIndex[i] + 1) % hull.length];
                if (e !== t) {
                  if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc)
                    return e;
                }
                break;
              }
            } while (e !== e0);
            return c;
          }
          render(context) {
            const buffer = context == null ? context = new Path() : void 0;
            const { points, halfedges, triangles } = this;
            for (let i = 0, n = halfedges.length; i < n; ++i) {
              const j = halfedges[i];
              if (j < i)
                continue;
              const ti = triangles[i] * 2;
              const tj = triangles[j] * 2;
              context.moveTo(points[ti], points[ti + 1]);
              context.lineTo(points[tj], points[tj + 1]);
            }
            this.renderHull(context);
            return buffer && buffer.value();
          }
          renderPoints(context, r = 2) {
            const buffer = context == null ? context = new Path() : void 0;
            const { points } = this;
            for (let i = 0, n = points.length; i < n; i += 2) {
              const x = points[i], y = points[i + 1];
              context.moveTo(x + r, y);
              context.arc(x, y, r, 0, tau);
            }
            return buffer && buffer.value();
          }
          renderHull(context) {
            const buffer = context == null ? context = new Path() : void 0;
            const { hull, points } = this;
            const h19 = hull[0] * 2, n = hull.length;
            context.moveTo(points[h19], points[h19 + 1]);
            for (let i = 1; i < n; ++i) {
              const h20 = 2 * hull[i];
              context.lineTo(points[h20], points[h20 + 1]);
            }
            context.closePath();
            return buffer && buffer.value();
          }
          hullPolygon() {
            const polygon = new Polygon();
            this.renderHull(polygon);
            return polygon.value();
          }
          renderTriangle(i, context) {
            const buffer = context == null ? context = new Path() : void 0;
            const { points, triangles } = this;
            const t0 = triangles[i *= 3] * 2;
            const t1 = triangles[i + 1] * 2;
            const t2 = triangles[i + 2] * 2;
            context.moveTo(points[t0], points[t0 + 1]);
            context.lineTo(points[t1], points[t1 + 1]);
            context.lineTo(points[t2], points[t2 + 1]);
            context.closePath();
            return buffer && buffer.value();
          }
          *trianglePolygons() {
            const { triangles } = this;
            for (let i = 0, n = triangles.length / 3; i < n; ++i) {
              yield this.trianglePolygon(i);
            }
          }
          trianglePolygon(i) {
            const polygon = new Polygon();
            this.renderTriangle(i, polygon);
            return polygon.value();
          }
        }
        function flatArray(points, fx, fy, that) {
          const n = points.length;
          const array = new Float64Array(n * 2);
          for (let i = 0; i < n; ++i) {
            const p = points[i];
            array[i * 2] = fx.call(that, p, i, points);
            array[i * 2 + 1] = fy.call(that, p, i, points);
          }
          return array;
        }
        function* flatIterable(points, fx, fy, that) {
          let i = 0;
          for (const p of points) {
            yield fx.call(that, p, i, points);
            yield fy.call(that, p, i, points);
            ++i;
          }
        }
        exports2.Delaunay = Delaunay;
        exports2.Voronoi = Voronoi;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-dsv-npm-2.0.0-34264f192a-01b12d81e4.zip/node_modules/d3-dsv/dist/d3-dsv.js
  var require_d3_dsv = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-dsv-npm-2.0.0-34264f192a-01b12d81e4.zip/node_modules/d3-dsv/dist/d3-dsv.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        var EOL2 = {}, EOF2 = {}, QUOTE2 = 34, NEWLINE2 = 10, RETURN2 = 13;
        function objectConverter2(columns) {
          return new Function("d", "return {" + columns.map(function(name, i) {
            return JSON.stringify(name) + ": d[" + i + '] || ""';
          }).join(",") + "}");
        }
        function customConverter2(columns, f) {
          var object = objectConverter2(columns);
          return function(row, i) {
            return f(object(row), i, columns);
          };
        }
        function inferColumns2(rows) {
          var columnSet = Object.create(null), columns = [];
          rows.forEach(function(row) {
            for (var column in row) {
              if (!(column in columnSet)) {
                columns.push(columnSet[column] = column);
              }
            }
          });
          return columns;
        }
        function pad2(value, width) {
          var s = value + "", length = s.length;
          return length < width ? new Array(width - length + 1).join(0) + s : s;
        }
        function formatYear2(year) {
          return year < 0 ? "-" + pad2(-year, 6) : year > 9999 ? "+" + pad2(year, 6) : pad2(year, 4);
        }
        function formatDate2(date) {
          var hours = date.getUTCHours(), minutes = date.getUTCMinutes(), seconds = date.getUTCSeconds(), milliseconds = date.getUTCMilliseconds();
          return isNaN(date) ? "Invalid Date" : formatYear2(date.getUTCFullYear()) + "-" + pad2(date.getUTCMonth() + 1, 2) + "-" + pad2(date.getUTCDate(), 2) + (milliseconds ? "T" + pad2(hours, 2) + ":" + pad2(minutes, 2) + ":" + pad2(seconds, 2) + "." + pad2(milliseconds, 3) + "Z" : seconds ? "T" + pad2(hours, 2) + ":" + pad2(minutes, 2) + ":" + pad2(seconds, 2) + "Z" : minutes || hours ? "T" + pad2(hours, 2) + ":" + pad2(minutes, 2) + "Z" : "");
        }
        function dsv2(delimiter) {
          var reFormat = new RegExp('["' + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
          function parse(text, f) {
            var convert, columns, rows = parseRows(text, function(row, i) {
              if (convert)
                return convert(row, i - 1);
              columns = row, convert = f ? customConverter2(row, f) : objectConverter2(row);
            });
            rows.columns = columns || [];
            return rows;
          }
          function parseRows(text, f) {
            var rows = [], N = text.length, I = 0, n = 0, t, eof = N <= 0, eol = false;
            if (text.charCodeAt(N - 1) === NEWLINE2)
              --N;
            if (text.charCodeAt(N - 1) === RETURN2)
              --N;
            function token() {
              if (eof)
                return EOF2;
              if (eol)
                return eol = false, EOL2;
              var i, j = I, c;
              if (text.charCodeAt(j) === QUOTE2) {
                while (I++ < N && text.charCodeAt(I) !== QUOTE2 || text.charCodeAt(++I) === QUOTE2)
                  ;
                if ((i = I) >= N)
                  eof = true;
                else if ((c = text.charCodeAt(I++)) === NEWLINE2)
                  eol = true;
                else if (c === RETURN2) {
                  eol = true;
                  if (text.charCodeAt(I) === NEWLINE2)
                    ++I;
                }
                return text.slice(j + 1, i - 1).replace(/""/g, '"');
              }
              while (I < N) {
                if ((c = text.charCodeAt(i = I++)) === NEWLINE2)
                  eol = true;
                else if (c === RETURN2) {
                  eol = true;
                  if (text.charCodeAt(I) === NEWLINE2)
                    ++I;
                } else if (c !== DELIMITER)
                  continue;
                return text.slice(j, i);
              }
              return eof = true, text.slice(j, N);
            }
            while ((t = token()) !== EOF2) {
              var row = [];
              while (t !== EOL2 && t !== EOF2)
                row.push(t), t = token();
              if (f && (row = f(row, n++)) == null)
                continue;
              rows.push(row);
            }
            return rows;
          }
          function preformatBody(rows, columns) {
            return rows.map(function(row) {
              return columns.map(function(column) {
                return formatValue(row[column]);
              }).join(delimiter);
            });
          }
          function format(rows, columns) {
            if (columns == null)
              columns = inferColumns2(rows);
            return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
          }
          function formatBody(rows, columns) {
            if (columns == null)
              columns = inferColumns2(rows);
            return preformatBody(rows, columns).join("\n");
          }
          function formatRows(rows) {
            return rows.map(formatRow).join("\n");
          }
          function formatRow(row) {
            return row.map(formatValue).join(delimiter);
          }
          function formatValue(value) {
            return value == null ? "" : value instanceof Date ? formatDate2(value) : reFormat.test(value += "") ? '"' + value.replace(/"/g, '""') + '"' : value;
          }
          return {
            parse,
            parseRows,
            format,
            formatBody,
            formatRows,
            formatRow,
            formatValue
          };
        }
        var csv3 = dsv2(",");
        var csvParse2 = csv3.parse;
        var csvParseRows2 = csv3.parseRows;
        var csvFormat2 = csv3.format;
        var csvFormatBody2 = csv3.formatBody;
        var csvFormatRows2 = csv3.formatRows;
        var csvFormatRow2 = csv3.formatRow;
        var csvFormatValue2 = csv3.formatValue;
        var tsv3 = dsv2("	");
        var tsvParse2 = tsv3.parse;
        var tsvParseRows2 = tsv3.parseRows;
        var tsvFormat2 = tsv3.format;
        var tsvFormatBody2 = tsv3.formatBody;
        var tsvFormatRows2 = tsv3.formatRows;
        var tsvFormatRow2 = tsv3.formatRow;
        var tsvFormatValue2 = tsv3.formatValue;
        function autoType2(object) {
          for (var key in object) {
            var value = object[key].trim(), number, m;
            if (!value)
              value = null;
            else if (value === "true")
              value = true;
            else if (value === "false")
              value = false;
            else if (value === "NaN")
              value = NaN;
            else if (!isNaN(number = +value))
              value = number;
            else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
              if (fixtz2 && !!m[4] && !m[7])
                value = value.replace(/-/g, "/").replace(/T/, " ");
              value = new Date(value);
            } else
              continue;
            object[key] = value;
          }
          return object;
        }
        const fixtz2 = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();
        exports2.autoType = autoType2;
        exports2.csvFormat = csvFormat2;
        exports2.csvFormatBody = csvFormatBody2;
        exports2.csvFormatRow = csvFormatRow2;
        exports2.csvFormatRows = csvFormatRows2;
        exports2.csvFormatValue = csvFormatValue2;
        exports2.csvParse = csvParse2;
        exports2.csvParseRows = csvParseRows2;
        exports2.dsvFormat = dsv2;
        exports2.tsvFormat = tsvFormat2;
        exports2.tsvFormatBody = tsvFormatBody2;
        exports2.tsvFormatRow = tsvFormatRow2;
        exports2.tsvFormatRows = tsvFormatRows2;
        exports2.tsvFormatValue = tsvFormatValue2;
        exports2.tsvParse = tsvParse2;
        exports2.tsvParseRows = tsvParseRows2;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-fetch-npm-2.0.0-e3b1a7d4b7-e592420726.zip/node_modules/d3-fetch/dist/d3-fetch.js
  var require_d3_fetch = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-fetch-npm-2.0.0-e3b1a7d4b7-e592420726.zip/node_modules/d3-fetch/dist/d3-fetch.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_dsv()) : typeof define === "function" && define.amd ? define(["exports", "d3-dsv"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3));
      })(exports, function(exports2, d3Dsv) {
        "use strict";
        function responseBlob(response) {
          if (!response.ok)
            throw new Error(response.status + " " + response.statusText);
          return response.blob();
        }
        function blob(input, init) {
          return fetch(input, init).then(responseBlob);
        }
        function responseArrayBuffer(response) {
          if (!response.ok)
            throw new Error(response.status + " " + response.statusText);
          return response.arrayBuffer();
        }
        function buffer(input, init) {
          return fetch(input, init).then(responseArrayBuffer);
        }
        function responseText2(response) {
          if (!response.ok)
            throw new Error(response.status + " " + response.statusText);
          return response.text();
        }
        function text(input, init) {
          return fetch(input, init).then(responseText2);
        }
        function dsvParse2(parse) {
          return function(input, init, row) {
            if (arguments.length === 2 && typeof init === "function")
              row = init, init = void 0;
            return text(input, init).then(function(response) {
              return parse(response, row);
            });
          };
        }
        function dsv2(delimiter, input, init, row) {
          if (arguments.length === 3 && typeof init === "function")
            row = init, init = void 0;
          var format = d3Dsv.dsvFormat(delimiter);
          return text(input, init).then(function(response) {
            return format.parse(response, row);
          });
        }
        var csv3 = dsvParse2(d3Dsv.csvParse);
        var tsv3 = dsvParse2(d3Dsv.tsvParse);
        function image(input, init) {
          return new Promise(function(resolve, reject) {
            var image2 = new Image();
            for (var key in init)
              image2[key] = init[key];
            image2.onerror = reject;
            image2.onload = function() {
              resolve(image2);
            };
            image2.src = input;
          });
        }
        function responseJson(response) {
          if (!response.ok)
            throw new Error(response.status + " " + response.statusText);
          if (response.status === 204 || response.status === 205)
            return;
          return response.json();
        }
        function json(input, init) {
          return fetch(input, init).then(responseJson);
        }
        function parser2(type) {
          return (input, init) => text(input, init).then((text2) => new DOMParser().parseFromString(text2, type));
        }
        var xml = parser2("application/xml");
        var html2 = parser2("text/html");
        var svg2 = parser2("image/svg+xml");
        exports2.blob = blob;
        exports2.buffer = buffer;
        exports2.csv = csv3;
        exports2.dsv = dsv2;
        exports2.html = html2;
        exports2.image = image;
        exports2.json = json;
        exports2.svg = svg2;
        exports2.text = text;
        exports2.tsv = tsv3;
        exports2.xml = xml;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-quadtree-npm-2.0.0-93642d6b98-e5f9cee19a.zip/node_modules/d3-quadtree/dist/d3-quadtree.js
  var require_d3_quadtree = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-quadtree-npm-2.0.0-93642d6b98-e5f9cee19a.zip/node_modules/d3-quadtree/dist/d3-quadtree.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        function tree_add(d) {
          const x = +this._x.call(null, d), y = +this._y.call(null, d);
          return add(this.cover(x, y), x, y, d);
        }
        function add(tree, x, y, d) {
          if (isNaN(x) || isNaN(y))
            return tree;
          var parent, node = tree._root, leaf = { data: d }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
          if (!node)
            return tree._root = leaf, tree;
          while (node.length) {
            if (right = x >= (xm = (x0 + x1) / 2))
              x0 = xm;
            else
              x1 = xm;
            if (bottom = y >= (ym = (y0 + y1) / 2))
              y0 = ym;
            else
              y1 = ym;
            if (parent = node, !(node = node[i = bottom << 1 | right]))
              return parent[i] = leaf, tree;
          }
          xp = +tree._x.call(null, node.data);
          yp = +tree._y.call(null, node.data);
          if (x === xp && y === yp)
            return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
          do {
            parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
            if (right = x >= (xm = (x0 + x1) / 2))
              x0 = xm;
            else
              x1 = xm;
            if (bottom = y >= (ym = (y0 + y1) / 2))
              y0 = ym;
            else
              y1 = ym;
          } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
          return parent[j] = node, parent[i] = leaf, tree;
        }
        function addAll(data) {
          var d, i, n = data.length, x, y, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
          for (i = 0; i < n; ++i) {
            if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d)))
              continue;
            xz[i] = x;
            yz[i] = y;
            if (x < x0)
              x0 = x;
            if (x > x1)
              x1 = x;
            if (y < y0)
              y0 = y;
            if (y > y1)
              y1 = y;
          }
          if (x0 > x1 || y0 > y1)
            return this;
          this.cover(x0, y0).cover(x1, y1);
          for (i = 0; i < n; ++i) {
            add(this, xz[i], yz[i], data[i]);
          }
          return this;
        }
        function tree_cover(x, y) {
          if (isNaN(x = +x) || isNaN(y = +y))
            return this;
          var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
          if (isNaN(x0)) {
            x1 = (x0 = Math.floor(x)) + 1;
            y1 = (y0 = Math.floor(y)) + 1;
          } else {
            var z = x1 - x0 || 1, node = this._root, parent, i;
            while (x0 > x || x >= x1 || y0 > y || y >= y1) {
              i = (y < y0) << 1 | x < x0;
              parent = new Array(4), parent[i] = node, node = parent, z *= 2;
              switch (i) {
                case 0:
                  x1 = x0 + z, y1 = y0 + z;
                  break;
                case 1:
                  x0 = x1 - z, y1 = y0 + z;
                  break;
                case 2:
                  x1 = x0 + z, y0 = y1 - z;
                  break;
                case 3:
                  x0 = x1 - z, y0 = y1 - z;
                  break;
              }
            }
            if (this._root && this._root.length)
              this._root = node;
          }
          this._x0 = x0;
          this._y0 = y0;
          this._x1 = x1;
          this._y1 = y1;
          return this;
        }
        function tree_data() {
          var data = [];
          this.visit(function(node) {
            if (!node.length)
              do
                data.push(node.data);
              while (node = node.next);
          });
          return data;
        }
        function tree_extent(_) {
          return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
        }
        function Quad(node, x0, y0, x1, y1) {
          this.node = node;
          this.x0 = x0;
          this.y0 = y0;
          this.x1 = x1;
          this.y1 = y1;
        }
        function tree_find(x, y, radius) {
          var data, x0 = this._x0, y0 = this._y0, x1, y1, x2, y2, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;
          if (node)
            quads.push(new Quad(node, x0, y0, x3, y3));
          if (radius == null)
            radius = Infinity;
          else {
            x0 = x - radius, y0 = y - radius;
            x3 = x + radius, y3 = y + radius;
            radius *= radius;
          }
          while (q = quads.pop()) {
            if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0)
              continue;
            if (node.length) {
              var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2;
              quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym));
              if (i = (y >= ym) << 1 | x >= xm) {
                q = quads[quads.length - 1];
                quads[quads.length - 1] = quads[quads.length - 1 - i];
                quads[quads.length - 1 - i] = q;
              }
            } else {
              var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
              if (d2 < radius) {
                var d = Math.sqrt(radius = d2);
                x0 = x - d, y0 = y - d;
                x3 = x + d, y3 = y + d;
                data = node.data;
              }
            }
          }
          return data;
        }
        function tree_remove(d) {
          if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)))
            return this;
          var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x, y, xm, ym, right, bottom, i, j;
          if (!node)
            return this;
          if (node.length)
            while (true) {
              if (right = x >= (xm = (x0 + x1) / 2))
                x0 = xm;
              else
                x1 = xm;
              if (bottom = y >= (ym = (y0 + y1) / 2))
                y0 = ym;
              else
                y1 = ym;
              if (!(parent = node, node = node[i = bottom << 1 | right]))
                return this;
              if (!node.length)
                break;
              if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3])
                retainer = parent, j = i;
            }
          while (node.data !== d)
            if (!(previous = node, node = node.next))
              return this;
          if (next = node.next)
            delete node.next;
          if (previous)
            return next ? previous.next = next : delete previous.next, this;
          if (!parent)
            return this._root = next, this;
          next ? parent[i] = next : delete parent[i];
          if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
            if (retainer)
              retainer[j] = node;
            else
              this._root = node;
          }
          return this;
        }
        function removeAll(data) {
          for (var i = 0, n = data.length; i < n; ++i)
            this.remove(data[i]);
          return this;
        }
        function tree_root() {
          return this._root;
        }
        function tree_size() {
          var size = 0;
          this.visit(function(node) {
            if (!node.length)
              do
                ++size;
              while (node = node.next);
          });
          return size;
        }
        function tree_visit(callback) {
          var quads = [], q, node = this._root, child, x0, y0, x1, y1;
          if (node)
            quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
          while (q = quads.pop()) {
            if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
              var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
              if (child = node[3])
                quads.push(new Quad(child, xm, ym, x1, y1));
              if (child = node[2])
                quads.push(new Quad(child, x0, ym, xm, y1));
              if (child = node[1])
                quads.push(new Quad(child, xm, y0, x1, ym));
              if (child = node[0])
                quads.push(new Quad(child, x0, y0, xm, ym));
            }
          }
          return this;
        }
        function tree_visitAfter(callback) {
          var quads = [], next = [], q;
          if (this._root)
            quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
          while (q = quads.pop()) {
            var node = q.node;
            if (node.length) {
              var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
              if (child = node[0])
                quads.push(new Quad(child, x0, y0, xm, ym));
              if (child = node[1])
                quads.push(new Quad(child, xm, y0, x1, ym));
              if (child = node[2])
                quads.push(new Quad(child, x0, ym, xm, y1));
              if (child = node[3])
                quads.push(new Quad(child, xm, ym, x1, y1));
            }
            next.push(q);
          }
          while (q = next.pop()) {
            callback(q.node, q.x0, q.y0, q.x1, q.y1);
          }
          return this;
        }
        function defaultX(d) {
          return d[0];
        }
        function tree_x(_) {
          return arguments.length ? (this._x = _, this) : this._x;
        }
        function defaultY(d) {
          return d[1];
        }
        function tree_y(_) {
          return arguments.length ? (this._y = _, this) : this._y;
        }
        function quadtree(nodes, x, y) {
          var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
          return nodes == null ? tree : tree.addAll(nodes);
        }
        function Quadtree(x, y, x0, y0, x1, y1) {
          this._x = x;
          this._y = y;
          this._x0 = x0;
          this._y0 = y0;
          this._x1 = x1;
          this._y1 = y1;
          this._root = void 0;
        }
        function leaf_copy(leaf) {
          var copy = { data: leaf.data }, next = copy;
          while (leaf = leaf.next)
            next = next.next = { data: leaf.data };
          return copy;
        }
        var treeProto = quadtree.prototype = Quadtree.prototype;
        treeProto.copy = function() {
          var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
          if (!node)
            return copy;
          if (!node.length)
            return copy._root = leaf_copy(node), copy;
          nodes = [{ source: node, target: copy._root = new Array(4) }];
          while (node = nodes.pop()) {
            for (var i = 0; i < 4; ++i) {
              if (child = node.source[i]) {
                if (child.length)
                  nodes.push({ source: child, target: node.target[i] = new Array(4) });
                else
                  node.target[i] = leaf_copy(child);
              }
            }
          }
          return copy;
        };
        treeProto.add = tree_add;
        treeProto.addAll = addAll;
        treeProto.cover = tree_cover;
        treeProto.data = tree_data;
        treeProto.extent = tree_extent;
        treeProto.find = tree_find;
        treeProto.remove = tree_remove;
        treeProto.removeAll = removeAll;
        treeProto.root = tree_root;
        treeProto.size = tree_size;
        treeProto.visit = tree_visit;
        treeProto.visitAfter = tree_visitAfter;
        treeProto.x = tree_x;
        treeProto.y = tree_y;
        exports2.quadtree = quadtree;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-force-npm-2.1.1-a14e5190d5-aaee5b86d7.zip/node_modules/d3-force/dist/d3-force.js
  var require_d3_force = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-force-npm-2.1.1-a14e5190d5-aaee5b86d7.zip/node_modules/d3-force/dist/d3-force.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_quadtree(), require_d3_dispatch(), require_d3_timer()) : typeof define === "function" && define.amd ? define(["exports", "d3-quadtree", "d3-dispatch", "d3-timer"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3, global2.d3, global2.d3));
      })(exports, function(exports2, d3Quadtree, d3Dispatch, d3Timer) {
        "use strict";
        function center(x2, y2) {
          var nodes, strength = 1;
          if (x2 == null)
            x2 = 0;
          if (y2 == null)
            y2 = 0;
          function force() {
            var i, n = nodes.length, node, sx = 0, sy = 0;
            for (i = 0; i < n; ++i) {
              node = nodes[i], sx += node.x, sy += node.y;
            }
            for (sx = (sx / n - x2) * strength, sy = (sy / n - y2) * strength, i = 0; i < n; ++i) {
              node = nodes[i], node.x -= sx, node.y -= sy;
            }
          }
          force.initialize = function(_) {
            nodes = _;
          };
          force.x = function(_) {
            return arguments.length ? (x2 = +_, force) : x2;
          };
          force.y = function(_) {
            return arguments.length ? (y2 = +_, force) : y2;
          };
          force.strength = function(_) {
            return arguments.length ? (strength = +_, force) : strength;
          };
          return force;
        }
        function constant(x2) {
          return function() {
            return x2;
          };
        }
        function jiggle(random) {
          return (random() - 0.5) * 1e-6;
        }
        function x(d) {
          return d.x + d.vx;
        }
        function y(d) {
          return d.y + d.vy;
        }
        function collide(radius) {
          var nodes, radii, random, strength = 1, iterations = 1;
          if (typeof radius !== "function")
            radius = constant(radius == null ? 1 : +radius);
          function force() {
            var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
            for (var k = 0; k < iterations; ++k) {
              tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);
              for (i = 0; i < n; ++i) {
                node = nodes[i];
                ri = radii[node.index], ri2 = ri * ri;
                xi = node.x + node.vx;
                yi = node.y + node.vy;
                tree.visit(apply);
              }
            }
            function apply(quad, x0, y0, x1, y1) {
              var data = quad.data, rj = quad.r, r = ri + rj;
              if (data) {
                if (data.index > node.index) {
                  var x2 = xi - data.x - data.vx, y2 = yi - data.y - data.vy, l = x2 * x2 + y2 * y2;
                  if (l < r * r) {
                    if (x2 === 0)
                      x2 = jiggle(random), l += x2 * x2;
                    if (y2 === 0)
                      y2 = jiggle(random), l += y2 * y2;
                    l = (r - (l = Math.sqrt(l))) / l * strength;
                    node.vx += (x2 *= l) * (r = (rj *= rj) / (ri2 + rj));
                    node.vy += (y2 *= l) * r;
                    data.vx -= x2 * (r = 1 - r);
                    data.vy -= y2 * r;
                  }
                }
                return;
              }
              return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
            }
          }
          function prepare(quad) {
            if (quad.data)
              return quad.r = radii[quad.data.index];
            for (var i = quad.r = 0; i < 4; ++i) {
              if (quad[i] && quad[i].r > quad.r) {
                quad.r = quad[i].r;
              }
            }
          }
          function initialize() {
            if (!nodes)
              return;
            var i, n = nodes.length, node;
            radii = new Array(n);
            for (i = 0; i < n; ++i)
              node = nodes[i], radii[node.index] = +radius(node, i, nodes);
          }
          force.initialize = function(_nodes, _random) {
            nodes = _nodes;
            random = _random;
            initialize();
          };
          force.iterations = function(_) {
            return arguments.length ? (iterations = +_, force) : iterations;
          };
          force.strength = function(_) {
            return arguments.length ? (strength = +_, force) : strength;
          };
          force.radius = function(_) {
            return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
          };
          return force;
        }
        function index(d) {
          return d.index;
        }
        function find(nodeById, nodeId) {
          var node = nodeById.get(nodeId);
          if (!node)
            throw new Error("node not found: " + nodeId);
          return node;
        }
        function link(links) {
          var id = index, strength = defaultStrength, strengths, distance = constant(30), distances, nodes, count, bias, random, iterations = 1;
          if (links == null)
            links = [];
          function defaultStrength(link2) {
            return 1 / Math.min(count[link2.source.index], count[link2.target.index]);
          }
          function force(alpha) {
            for (var k = 0, n = links.length; k < iterations; ++k) {
              for (var i = 0, link2, source, target, x2, y2, l, b; i < n; ++i) {
                link2 = links[i], source = link2.source, target = link2.target;
                x2 = target.x + target.vx - source.x - source.vx || jiggle(random);
                y2 = target.y + target.vy - source.y - source.vy || jiggle(random);
                l = Math.sqrt(x2 * x2 + y2 * y2);
                l = (l - distances[i]) / l * alpha * strengths[i];
                x2 *= l, y2 *= l;
                target.vx -= x2 * (b = bias[i]);
                target.vy -= y2 * b;
                source.vx += x2 * (b = 1 - b);
                source.vy += y2 * b;
              }
            }
          }
          function initialize() {
            if (!nodes)
              return;
            var i, n = nodes.length, m2 = links.length, nodeById = new Map(nodes.map((d, i2) => [id(d, i2, nodes), d])), link2;
            for (i = 0, count = new Array(n); i < m2; ++i) {
              link2 = links[i], link2.index = i;
              if (typeof link2.source !== "object")
                link2.source = find(nodeById, link2.source);
              if (typeof link2.target !== "object")
                link2.target = find(nodeById, link2.target);
              count[link2.source.index] = (count[link2.source.index] || 0) + 1;
              count[link2.target.index] = (count[link2.target.index] || 0) + 1;
            }
            for (i = 0, bias = new Array(m2); i < m2; ++i) {
              link2 = links[i], bias[i] = count[link2.source.index] / (count[link2.source.index] + count[link2.target.index]);
            }
            strengths = new Array(m2), initializeStrength();
            distances = new Array(m2), initializeDistance();
          }
          function initializeStrength() {
            if (!nodes)
              return;
            for (var i = 0, n = links.length; i < n; ++i) {
              strengths[i] = +strength(links[i], i, links);
            }
          }
          function initializeDistance() {
            if (!nodes)
              return;
            for (var i = 0, n = links.length; i < n; ++i) {
              distances[i] = +distance(links[i], i, links);
            }
          }
          force.initialize = function(_nodes, _random) {
            nodes = _nodes;
            random = _random;
            initialize();
          };
          force.links = function(_) {
            return arguments.length ? (links = _, initialize(), force) : links;
          };
          force.id = function(_) {
            return arguments.length ? (id = _, force) : id;
          };
          force.iterations = function(_) {
            return arguments.length ? (iterations = +_, force) : iterations;
          };
          force.strength = function(_) {
            return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initializeStrength(), force) : strength;
          };
          force.distance = function(_) {
            return arguments.length ? (distance = typeof _ === "function" ? _ : constant(+_), initializeDistance(), force) : distance;
          };
          return force;
        }
        const a = 1664525;
        const c = 1013904223;
        const m = 4294967296;
        function lcg() {
          let s = 1;
          return () => (s = (a * s + c) % m) / m;
        }
        function x$1(d) {
          return d.x;
        }
        function y$1(d) {
          return d.y;
        }
        var initialRadius = 10, initialAngle = Math.PI * (3 - Math.sqrt(5));
        function simulation(nodes) {
          var simulation2, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = /* @__PURE__ */ new Map(), stepper = d3Timer.timer(step), event = d3Dispatch.dispatch("tick", "end"), random = lcg();
          if (nodes == null)
            nodes = [];
          function step() {
            tick();
            event.call("tick", simulation2);
            if (alpha < alphaMin) {
              stepper.stop();
              event.call("end", simulation2);
            }
          }
          function tick(iterations) {
            var i, n = nodes.length, node;
            if (iterations === void 0)
              iterations = 1;
            for (var k = 0; k < iterations; ++k) {
              alpha += (alphaTarget - alpha) * alphaDecay;
              forces.forEach(function(force) {
                force(alpha);
              });
              for (i = 0; i < n; ++i) {
                node = nodes[i];
                if (node.fx == null)
                  node.x += node.vx *= velocityDecay;
                else
                  node.x = node.fx, node.vx = 0;
                if (node.fy == null)
                  node.y += node.vy *= velocityDecay;
                else
                  node.y = node.fy, node.vy = 0;
              }
            }
            return simulation2;
          }
          function initializeNodes() {
            for (var i = 0, n = nodes.length, node; i < n; ++i) {
              node = nodes[i], node.index = i;
              if (node.fx != null)
                node.x = node.fx;
              if (node.fy != null)
                node.y = node.fy;
              if (isNaN(node.x) || isNaN(node.y)) {
                var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
                node.x = radius * Math.cos(angle);
                node.y = radius * Math.sin(angle);
              }
              if (isNaN(node.vx) || isNaN(node.vy)) {
                node.vx = node.vy = 0;
              }
            }
          }
          function initializeForce(force) {
            if (force.initialize)
              force.initialize(nodes, random);
            return force;
          }
          initializeNodes();
          return simulation2 = {
            tick,
            restart: function() {
              return stepper.restart(step), simulation2;
            },
            stop: function() {
              return stepper.stop(), simulation2;
            },
            nodes: function(_) {
              return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation2) : nodes;
            },
            alpha: function(_) {
              return arguments.length ? (alpha = +_, simulation2) : alpha;
            },
            alphaMin: function(_) {
              return arguments.length ? (alphaMin = +_, simulation2) : alphaMin;
            },
            alphaDecay: function(_) {
              return arguments.length ? (alphaDecay = +_, simulation2) : +alphaDecay;
            },
            alphaTarget: function(_) {
              return arguments.length ? (alphaTarget = +_, simulation2) : alphaTarget;
            },
            velocityDecay: function(_) {
              return arguments.length ? (velocityDecay = 1 - _, simulation2) : 1 - velocityDecay;
            },
            randomSource: function(_) {
              return arguments.length ? (random = _, forces.forEach(initializeForce), simulation2) : random;
            },
            force: function(name, _) {
              return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation2) : forces.get(name);
            },
            find: function(x2, y2, radius) {
              var i = 0, n = nodes.length, dx, dy, d2, node, closest;
              if (radius == null)
                radius = Infinity;
              else
                radius *= radius;
              for (i = 0; i < n; ++i) {
                node = nodes[i];
                dx = x2 - node.x;
                dy = y2 - node.y;
                d2 = dx * dx + dy * dy;
                if (d2 < radius)
                  closest = node, radius = d2;
              }
              return closest;
            },
            on: function(name, _) {
              return arguments.length > 1 ? (event.on(name, _), simulation2) : event.on(name);
            }
          };
        }
        function manyBody() {
          var nodes, node, random, alpha, strength = constant(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
          function force(_) {
            var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);
            for (alpha = _, i = 0; i < n; ++i)
              node = nodes[i], tree.visit(apply);
          }
          function initialize() {
            if (!nodes)
              return;
            var i, n = nodes.length, node2;
            strengths = new Array(n);
            for (i = 0; i < n; ++i)
              node2 = nodes[i], strengths[node2.index] = +strength(node2, i, nodes);
          }
          function accumulate(quad) {
            var strength2 = 0, q, c2, weight = 0, x2, y2, i;
            if (quad.length) {
              for (x2 = y2 = i = 0; i < 4; ++i) {
                if ((q = quad[i]) && (c2 = Math.abs(q.value))) {
                  strength2 += q.value, weight += c2, x2 += c2 * q.x, y2 += c2 * q.y;
                }
              }
              quad.x = x2 / weight;
              quad.y = y2 / weight;
            } else {
              q = quad;
              q.x = q.data.x;
              q.y = q.data.y;
              do
                strength2 += strengths[q.data.index];
              while (q = q.next);
            }
            quad.value = strength2;
          }
          function apply(quad, x1, _, x2) {
            if (!quad.value)
              return true;
            var x3 = quad.x - node.x, y2 = quad.y - node.y, w = x2 - x1, l = x3 * x3 + y2 * y2;
            if (w * w / theta2 < l) {
              if (l < distanceMax2) {
                if (x3 === 0)
                  x3 = jiggle(random), l += x3 * x3;
                if (y2 === 0)
                  y2 = jiggle(random), l += y2 * y2;
                if (l < distanceMin2)
                  l = Math.sqrt(distanceMin2 * l);
                node.vx += x3 * quad.value * alpha / l;
                node.vy += y2 * quad.value * alpha / l;
              }
              return true;
            } else if (quad.length || l >= distanceMax2)
              return;
            if (quad.data !== node || quad.next) {
              if (x3 === 0)
                x3 = jiggle(random), l += x3 * x3;
              if (y2 === 0)
                y2 = jiggle(random), l += y2 * y2;
              if (l < distanceMin2)
                l = Math.sqrt(distanceMin2 * l);
            }
            do
              if (quad.data !== node) {
                w = strengths[quad.data.index] * alpha / l;
                node.vx += x3 * w;
                node.vy += y2 * w;
              }
            while (quad = quad.next);
          }
          force.initialize = function(_nodes, _random) {
            nodes = _nodes;
            random = _random;
            initialize();
          };
          force.strength = function(_) {
            return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
          };
          force.distanceMin = function(_) {
            return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
          };
          force.distanceMax = function(_) {
            return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
          };
          force.theta = function(_) {
            return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
          };
          return force;
        }
        function radial(radius, x2, y2) {
          var nodes, strength = constant(0.1), strengths, radiuses;
          if (typeof radius !== "function")
            radius = constant(+radius);
          if (x2 == null)
            x2 = 0;
          if (y2 == null)
            y2 = 0;
          function force(alpha) {
            for (var i = 0, n = nodes.length; i < n; ++i) {
              var node = nodes[i], dx = node.x - x2 || 1e-6, dy = node.y - y2 || 1e-6, r = Math.sqrt(dx * dx + dy * dy), k = (radiuses[i] - r) * strengths[i] * alpha / r;
              node.vx += dx * k;
              node.vy += dy * k;
            }
          }
          function initialize() {
            if (!nodes)
              return;
            var i, n = nodes.length;
            strengths = new Array(n);
            radiuses = new Array(n);
            for (i = 0; i < n; ++i) {
              radiuses[i] = +radius(nodes[i], i, nodes);
              strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
            }
          }
          force.initialize = function(_) {
            nodes = _, initialize();
          };
          force.strength = function(_) {
            return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
          };
          force.radius = function(_) {
            return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
          };
          force.x = function(_) {
            return arguments.length ? (x2 = +_, force) : x2;
          };
          force.y = function(_) {
            return arguments.length ? (y2 = +_, force) : y2;
          };
          return force;
        }
        function x$2(x2) {
          var strength = constant(0.1), nodes, strengths, xz;
          if (typeof x2 !== "function")
            x2 = constant(x2 == null ? 0 : +x2);
          function force(alpha) {
            for (var i = 0, n = nodes.length, node; i < n; ++i) {
              node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
            }
          }
          function initialize() {
            if (!nodes)
              return;
            var i, n = nodes.length;
            strengths = new Array(n);
            xz = new Array(n);
            for (i = 0; i < n; ++i) {
              strengths[i] = isNaN(xz[i] = +x2(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
            }
          }
          force.initialize = function(_) {
            nodes = _;
            initialize();
          };
          force.strength = function(_) {
            return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
          };
          force.x = function(_) {
            return arguments.length ? (x2 = typeof _ === "function" ? _ : constant(+_), initialize(), force) : x2;
          };
          return force;
        }
        function y$2(y2) {
          var strength = constant(0.1), nodes, strengths, yz;
          if (typeof y2 !== "function")
            y2 = constant(y2 == null ? 0 : +y2);
          function force(alpha) {
            for (var i = 0, n = nodes.length, node; i < n; ++i) {
              node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
            }
          }
          function initialize() {
            if (!nodes)
              return;
            var i, n = nodes.length;
            strengths = new Array(n);
            yz = new Array(n);
            for (i = 0; i < n; ++i) {
              strengths[i] = isNaN(yz[i] = +y2(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
            }
          }
          force.initialize = function(_) {
            nodes = _;
            initialize();
          };
          force.strength = function(_) {
            return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
          };
          force.y = function(_) {
            return arguments.length ? (y2 = typeof _ === "function" ? _ : constant(+_), initialize(), force) : y2;
          };
          return force;
        }
        exports2.forceCenter = center;
        exports2.forceCollide = collide;
        exports2.forceLink = link;
        exports2.forceManyBody = manyBody;
        exports2.forceRadial = radial;
        exports2.forceSimulation = simulation;
        exports2.forceX = x$2;
        exports2.forceY = y$2;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-format-npm-2.0.0-74628e435e-c4d3c8f994.zip/node_modules/d3-format/dist/d3-format.js
  var require_d3_format = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-format-npm-2.0.0-74628e435e-c4d3c8f994.zip/node_modules/d3-format/dist/d3-format.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        function formatDecimal(x) {
          return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
        }
        function formatDecimalParts(x, p) {
          if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0)
            return null;
          var i, coefficient = x.slice(0, i);
          return [
            coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
            +x.slice(i + 1)
          ];
        }
        function exponent(x) {
          return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
        }
        function formatGroup(grouping, thousands) {
          return function(value, width) {
            var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
            while (i > 0 && g > 0) {
              if (length + g + 1 > width)
                g = Math.max(1, width - length);
              t.push(value.substring(i -= g, i + g));
              if ((length += g + 1) > width)
                break;
              g = grouping[j = (j + 1) % grouping.length];
            }
            return t.reverse().join(thousands);
          };
        }
        function formatNumerals(numerals) {
          return function(value) {
            return value.replace(/[0-9]/g, function(i) {
              return numerals[+i];
            });
          };
        }
        var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
        function formatSpecifier(specifier) {
          if (!(match = re.exec(specifier)))
            throw new Error("invalid format: " + specifier);
          var match;
          return new FormatSpecifier({
            fill: match[1],
            align: match[2],
            sign: match[3],
            symbol: match[4],
            zero: match[5],
            width: match[6],
            comma: match[7],
            precision: match[8] && match[8].slice(1),
            trim: match[9],
            type: match[10]
          });
        }
        formatSpecifier.prototype = FormatSpecifier.prototype;
        function FormatSpecifier(specifier) {
          this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
          this.align = specifier.align === void 0 ? ">" : specifier.align + "";
          this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
          this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
          this.zero = !!specifier.zero;
          this.width = specifier.width === void 0 ? void 0 : +specifier.width;
          this.comma = !!specifier.comma;
          this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
          this.trim = !!specifier.trim;
          this.type = specifier.type === void 0 ? "" : specifier.type + "";
        }
        FormatSpecifier.prototype.toString = function() {
          return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
        };
        function formatTrim(s) {
          out:
            for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
              switch (s[i]) {
                case ".":
                  i0 = i1 = i;
                  break;
                case "0":
                  if (i0 === 0)
                    i0 = i;
                  i1 = i;
                  break;
                default:
                  if (!+s[i])
                    break out;
                  if (i0 > 0)
                    i0 = 0;
                  break;
              }
            }
          return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
        }
        var prefixExponent;
        function formatPrefixAuto(x, p) {
          var d = formatDecimalParts(x, p);
          if (!d)
            return x + "";
          var coefficient = d[0], exponent2 = d[1], i = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n = coefficient.length;
          return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0];
        }
        function formatRounded(x, p) {
          var d = formatDecimalParts(x, p);
          if (!d)
            return x + "";
          var coefficient = d[0], exponent2 = d[1];
          return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
        }
        var formatTypes = {
          "%": (x, p) => (x * 100).toFixed(p),
          "b": (x) => Math.round(x).toString(2),
          "c": (x) => x + "",
          "d": formatDecimal,
          "e": (x, p) => x.toExponential(p),
          "f": (x, p) => x.toFixed(p),
          "g": (x, p) => x.toPrecision(p),
          "o": (x) => Math.round(x).toString(8),
          "p": (x, p) => formatRounded(x * 100, p),
          "r": formatRounded,
          "s": formatPrefixAuto,
          "X": (x) => Math.round(x).toString(16).toUpperCase(),
          "x": (x) => Math.round(x).toString(16)
        };
        function identity(x) {
          return x;
        }
        var map = Array.prototype.map, prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
        function formatLocale(locale2) {
          var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity : formatGroup(map.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity : formatNumerals(map.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
          function newFormat(specifier) {
            specifier = formatSpecifier(specifier);
            var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
            if (type === "n")
              comma = true, type = "g";
            else if (!formatTypes[type])
              precision === void 0 && (precision = 12), trim = true, type = "g";
            if (zero || fill === "0" && align === "=")
              zero = true, fill = "0", align = "=";
            var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
            var formatType = formatTypes[type], maybeSuffix = /[defgprs%]/.test(type);
            precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
            function format(value) {
              var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
              if (type === "c") {
                valueSuffix = formatType(value) + valueSuffix;
                value = "";
              } else {
                value = +value;
                var valueNegative = value < 0 || 1 / value < 0;
                value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
                if (trim)
                  value = formatTrim(value);
                if (valueNegative && +value === 0 && sign !== "+")
                  valueNegative = false;
                valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
                valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
                if (maybeSuffix) {
                  i = -1, n = value.length;
                  while (++i < n) {
                    if (c = value.charCodeAt(i), 48 > c || c > 57) {
                      valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                      value = value.slice(0, i);
                      break;
                    }
                  }
                }
              }
              if (comma && !zero)
                value = group(value, Infinity);
              var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
              if (comma && zero)
                value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
              switch (align) {
                case "<":
                  value = valuePrefix + value + valueSuffix + padding;
                  break;
                case "=":
                  value = valuePrefix + padding + value + valueSuffix;
                  break;
                case "^":
                  value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
                  break;
                default:
                  value = padding + valuePrefix + value + valueSuffix;
                  break;
              }
              return numerals(value);
            }
            format.toString = function() {
              return specifier + "";
            };
            return format;
          }
          function formatPrefix(specifier, value) {
            var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
            return function(value2) {
              return f(k * value2) + prefix;
            };
          }
          return {
            format: newFormat,
            formatPrefix
          };
        }
        var locale;
        defaultLocale({
          thousands: ",",
          grouping: [3],
          currency: ["$", ""]
        });
        function defaultLocale(definition) {
          locale = formatLocale(definition);
          exports2.format = locale.format;
          exports2.formatPrefix = locale.formatPrefix;
          return locale;
        }
        function precisionFixed(step) {
          return Math.max(0, -exponent(Math.abs(step)));
        }
        function precisionPrefix(step, value) {
          return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
        }
        function precisionRound(step, max) {
          step = Math.abs(step), max = Math.abs(max) - step;
          return Math.max(0, exponent(max) - exponent(step)) + 1;
        }
        exports2.FormatSpecifier = FormatSpecifier;
        exports2.formatDefaultLocale = defaultLocale;
        exports2.formatLocale = formatLocale;
        exports2.formatSpecifier = formatSpecifier;
        exports2.precisionFixed = precisionFixed;
        exports2.precisionPrefix = precisionPrefix;
        exports2.precisionRound = precisionRound;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-geo-npm-2.0.2-29465e11d0-992f667c64.zip/node_modules/d3-geo/dist/d3-geo.js
  var require_d3_geo = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-geo-npm-2.0.2-29465e11d0-992f667c64.zip/node_modules/d3-geo/dist/d3-geo.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_array()) : typeof define === "function" && define.amd ? define(["exports", "d3-array"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3));
      })(exports, function(exports2, d3Array) {
        "use strict";
        var epsilon = 1e-6;
        var epsilon2 = 1e-12;
        var pi = Math.PI;
        var halfPi = pi / 2;
        var quarterPi = pi / 4;
        var tau = pi * 2;
        var degrees = 180 / pi;
        var radians = pi / 180;
        var abs = Math.abs;
        var atan = Math.atan;
        var atan2 = Math.atan2;
        var cos = Math.cos;
        var ceil = Math.ceil;
        var exp = Math.exp;
        var hypot = Math.hypot;
        var log = Math.log;
        var pow = Math.pow;
        var sin = Math.sin;
        var sign = Math.sign || function(x) {
          return x > 0 ? 1 : x < 0 ? -1 : 0;
        };
        var sqrt = Math.sqrt;
        var tan = Math.tan;
        function acos(x) {
          return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
        }
        function asin(x) {
          return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
        }
        function haversin(x) {
          return (x = sin(x / 2)) * x;
        }
        function noop() {
        }
        function streamGeometry(geometry, stream) {
          if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
            streamGeometryType[geometry.type](geometry, stream);
          }
        }
        var streamObjectType = {
          Feature: function(object2, stream) {
            streamGeometry(object2.geometry, stream);
          },
          FeatureCollection: function(object2, stream) {
            var features = object2.features, i = -1, n = features.length;
            while (++i < n)
              streamGeometry(features[i].geometry, stream);
          }
        };
        var streamGeometryType = {
          Sphere: function(object2, stream) {
            stream.sphere();
          },
          Point: function(object2, stream) {
            object2 = object2.coordinates;
            stream.point(object2[0], object2[1], object2[2]);
          },
          MultiPoint: function(object2, stream) {
            var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
            while (++i < n)
              object2 = coordinates2[i], stream.point(object2[0], object2[1], object2[2]);
          },
          LineString: function(object2, stream) {
            streamLine(object2.coordinates, stream, 0);
          },
          MultiLineString: function(object2, stream) {
            var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
            while (++i < n)
              streamLine(coordinates2[i], stream, 0);
          },
          Polygon: function(object2, stream) {
            streamPolygon(object2.coordinates, stream);
          },
          MultiPolygon: function(object2, stream) {
            var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
            while (++i < n)
              streamPolygon(coordinates2[i], stream);
          },
          GeometryCollection: function(object2, stream) {
            var geometries = object2.geometries, i = -1, n = geometries.length;
            while (++i < n)
              streamGeometry(geometries[i], stream);
          }
        };
        function streamLine(coordinates2, stream, closed) {
          var i = -1, n = coordinates2.length - closed, coordinate;
          stream.lineStart();
          while (++i < n)
            coordinate = coordinates2[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
          stream.lineEnd();
        }
        function streamPolygon(coordinates2, stream) {
          var i = -1, n = coordinates2.length;
          stream.polygonStart();
          while (++i < n)
            streamLine(coordinates2[i], stream, 1);
          stream.polygonEnd();
        }
        function geoStream(object2, stream) {
          if (object2 && streamObjectType.hasOwnProperty(object2.type)) {
            streamObjectType[object2.type](object2, stream);
          } else {
            streamGeometry(object2, stream);
          }
        }
        var areaRingSum = new d3Array.Adder();
        var areaSum = new d3Array.Adder(), lambda00, phi00, lambda0, cosPhi0, sinPhi0;
        var areaStream = {
          point: noop,
          lineStart: noop,
          lineEnd: noop,
          polygonStart: function() {
            areaRingSum = new d3Array.Adder();
            areaStream.lineStart = areaRingStart;
            areaStream.lineEnd = areaRingEnd;
          },
          polygonEnd: function() {
            var areaRing = +areaRingSum;
            areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
            this.lineStart = this.lineEnd = this.point = noop;
          },
          sphere: function() {
            areaSum.add(tau);
          }
        };
        function areaRingStart() {
          areaStream.point = areaPointFirst;
        }
        function areaRingEnd() {
          areaPoint(lambda00, phi00);
        }
        function areaPointFirst(lambda, phi) {
          areaStream.point = areaPoint;
          lambda00 = lambda, phi00 = phi;
          lambda *= radians, phi *= radians;
          lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
        }
        function areaPoint(lambda, phi) {
          lambda *= radians, phi *= radians;
          phi = phi / 2 + quarterPi;
          var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos(phi), sinPhi = sin(phi), k = sinPhi0 * sinPhi, u = cosPhi0 * cosPhi + k * cos(adLambda), v = k * sdLambda * sin(adLambda);
          areaRingSum.add(atan2(v, u));
          lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
        }
        function area(object2) {
          areaSum = new d3Array.Adder();
          geoStream(object2, areaStream);
          return areaSum * 2;
        }
        function spherical(cartesian2) {
          return [atan2(cartesian2[1], cartesian2[0]), asin(cartesian2[2])];
        }
        function cartesian(spherical2) {
          var lambda = spherical2[0], phi = spherical2[1], cosPhi = cos(phi);
          return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
        }
        function cartesianDot(a, b) {
          return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
        }
        function cartesianCross(a, b) {
          return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
        }
        function cartesianAddInPlace(a, b) {
          a[0] += b[0], a[1] += b[1], a[2] += b[2];
        }
        function cartesianScale(vector, k) {
          return [vector[0] * k, vector[1] * k, vector[2] * k];
        }
        function cartesianNormalizeInPlace(d) {
          var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
          d[0] /= l, d[1] /= l, d[2] /= l;
        }
        var lambda0$1, phi0, lambda1, phi1, lambda2, lambda00$1, phi00$1, p0, deltaSum, ranges, range;
        var boundsStream = {
          point: boundsPoint,
          lineStart: boundsLineStart,
          lineEnd: boundsLineEnd,
          polygonStart: function() {
            boundsStream.point = boundsRingPoint;
            boundsStream.lineStart = boundsRingStart;
            boundsStream.lineEnd = boundsRingEnd;
            deltaSum = new d3Array.Adder();
            areaStream.polygonStart();
          },
          polygonEnd: function() {
            areaStream.polygonEnd();
            boundsStream.point = boundsPoint;
            boundsStream.lineStart = boundsLineStart;
            boundsStream.lineEnd = boundsLineEnd;
            if (areaRingSum < 0)
              lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
            else if (deltaSum > epsilon)
              phi1 = 90;
            else if (deltaSum < -epsilon)
              phi0 = -90;
            range[0] = lambda0$1, range[1] = lambda1;
          },
          sphere: function() {
            lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
          }
        };
        function boundsPoint(lambda, phi) {
          ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
          if (phi < phi0)
            phi0 = phi;
          if (phi > phi1)
            phi1 = phi;
        }
        function linePoint(lambda, phi) {
          var p = cartesian([lambda * radians, phi * radians]);
          if (p0) {
            var normal = cartesianCross(p0, p), equatorial = [normal[1], -normal[0], 0], inflection = cartesianCross(equatorial, normal);
            cartesianNormalizeInPlace(inflection);
            inflection = spherical(inflection);
            var delta = lambda - lambda2, sign2 = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees * sign2, phii, antimeridian = abs(delta) > 180;
            if (antimeridian ^ (sign2 * lambda2 < lambdai && lambdai < sign2 * lambda)) {
              phii = inflection[1] * degrees;
              if (phii > phi1)
                phi1 = phii;
            } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign2 * lambda2 < lambdai && lambdai < sign2 * lambda)) {
              phii = -inflection[1] * degrees;
              if (phii < phi0)
                phi0 = phii;
            } else {
              if (phi < phi0)
                phi0 = phi;
              if (phi > phi1)
                phi1 = phi;
            }
            if (antimeridian) {
              if (lambda < lambda2) {
                if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1))
                  lambda1 = lambda;
              } else {
                if (angle(lambda, lambda1) > angle(lambda0$1, lambda1))
                  lambda0$1 = lambda;
              }
            } else {
              if (lambda1 >= lambda0$1) {
                if (lambda < lambda0$1)
                  lambda0$1 = lambda;
                if (lambda > lambda1)
                  lambda1 = lambda;
              } else {
                if (lambda > lambda2) {
                  if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1))
                    lambda1 = lambda;
                } else {
                  if (angle(lambda, lambda1) > angle(lambda0$1, lambda1))
                    lambda0$1 = lambda;
                }
              }
            }
          } else {
            ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
          }
          if (phi < phi0)
            phi0 = phi;
          if (phi > phi1)
            phi1 = phi;
          p0 = p, lambda2 = lambda;
        }
        function boundsLineStart() {
          boundsStream.point = linePoint;
        }
        function boundsLineEnd() {
          range[0] = lambda0$1, range[1] = lambda1;
          boundsStream.point = boundsPoint;
          p0 = null;
        }
        function boundsRingPoint(lambda, phi) {
          if (p0) {
            var delta = lambda - lambda2;
            deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
          } else {
            lambda00$1 = lambda, phi00$1 = phi;
          }
          areaStream.point(lambda, phi);
          linePoint(lambda, phi);
        }
        function boundsRingStart() {
          areaStream.lineStart();
        }
        function boundsRingEnd() {
          boundsRingPoint(lambda00$1, phi00$1);
          areaStream.lineEnd();
          if (abs(deltaSum) > epsilon)
            lambda0$1 = -(lambda1 = 180);
          range[0] = lambda0$1, range[1] = lambda1;
          p0 = null;
        }
        function angle(lambda02, lambda12) {
          return (lambda12 -= lambda02) < 0 ? lambda12 + 360 : lambda12;
        }
        function rangeCompare(a, b) {
          return a[0] - b[0];
        }
        function rangeContains(range2, x) {
          return range2[0] <= range2[1] ? range2[0] <= x && x <= range2[1] : x < range2[0] || range2[1] < x;
        }
        function bounds(feature) {
          var i, n, a, b, merged, deltaMax, delta;
          phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
          ranges = [];
          geoStream(feature, boundsStream);
          if (n = ranges.length) {
            ranges.sort(rangeCompare);
            for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
              b = ranges[i];
              if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
                if (angle(a[0], b[1]) > angle(a[0], a[1]))
                  a[1] = b[1];
                if (angle(b[0], a[1]) > angle(a[0], a[1]))
                  a[0] = b[0];
              } else {
                merged.push(a = b);
              }
            }
            for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
              b = merged[i];
              if ((delta = angle(a[1], b[0])) > deltaMax)
                deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
            }
          }
          ranges = range = null;
          return lambda0$1 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0$1, phi0], [lambda1, phi1]];
        }
        var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00$2, phi00$2, x0, y0, z0;
        var centroidStream = {
          sphere: noop,
          point: centroidPoint,
          lineStart: centroidLineStart,
          lineEnd: centroidLineEnd,
          polygonStart: function() {
            centroidStream.lineStart = centroidRingStart;
            centroidStream.lineEnd = centroidRingEnd;
          },
          polygonEnd: function() {
            centroidStream.lineStart = centroidLineStart;
            centroidStream.lineEnd = centroidLineEnd;
          }
        };
        function centroidPoint(lambda, phi) {
          lambda *= radians, phi *= radians;
          var cosPhi = cos(phi);
          centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
        }
        function centroidPointCartesian(x, y, z) {
          ++W0;
          X0 += (x - X0) / W0;
          Y0 += (y - Y0) / W0;
          Z0 += (z - Z0) / W0;
        }
        function centroidLineStart() {
          centroidStream.point = centroidLinePointFirst;
        }
        function centroidLinePointFirst(lambda, phi) {
          lambda *= radians, phi *= radians;
          var cosPhi = cos(phi);
          x0 = cosPhi * cos(lambda);
          y0 = cosPhi * sin(lambda);
          z0 = sin(phi);
          centroidStream.point = centroidLinePoint;
          centroidPointCartesian(x0, y0, z0);
        }
        function centroidLinePoint(lambda, phi) {
          lambda *= radians, phi *= radians;
          var cosPhi = cos(phi), x = cosPhi * cos(lambda), y = cosPhi * sin(lambda), z = sin(phi), w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
          W1 += w;
          X1 += w * (x0 + (x0 = x));
          Y1 += w * (y0 + (y0 = y));
          Z1 += w * (z0 + (z0 = z));
          centroidPointCartesian(x0, y0, z0);
        }
        function centroidLineEnd() {
          centroidStream.point = centroidPoint;
        }
        function centroidRingStart() {
          centroidStream.point = centroidRingPointFirst;
        }
        function centroidRingEnd() {
          centroidRingPoint(lambda00$2, phi00$2);
          centroidStream.point = centroidPoint;
        }
        function centroidRingPointFirst(lambda, phi) {
          lambda00$2 = lambda, phi00$2 = phi;
          lambda *= radians, phi *= radians;
          centroidStream.point = centroidRingPoint;
          var cosPhi = cos(phi);
          x0 = cosPhi * cos(lambda);
          y0 = cosPhi * sin(lambda);
          z0 = sin(phi);
          centroidPointCartesian(x0, y0, z0);
        }
        function centroidRingPoint(lambda, phi) {
          lambda *= radians, phi *= radians;
          var cosPhi = cos(phi), x = cosPhi * cos(lambda), y = cosPhi * sin(lambda), z = sin(phi), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = hypot(cx, cy, cz), w = asin(m), v = m && -w / m;
          X2.add(v * cx);
          Y2.add(v * cy);
          Z2.add(v * cz);
          W1 += w;
          X1 += w * (x0 + (x0 = x));
          Y1 += w * (y0 + (y0 = y));
          Z1 += w * (z0 + (z0 = z));
          centroidPointCartesian(x0, y0, z0);
        }
        function centroid(object2) {
          W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = 0;
          X2 = new d3Array.Adder();
          Y2 = new d3Array.Adder();
          Z2 = new d3Array.Adder();
          geoStream(object2, centroidStream);
          var x = +X2, y = +Y2, z = +Z2, m = hypot(x, y, z);
          if (m < epsilon2) {
            x = X1, y = Y1, z = Z1;
            if (W1 < epsilon)
              x = X0, y = Y0, z = Z0;
            m = hypot(x, y, z);
            if (m < epsilon2)
              return [NaN, NaN];
          }
          return [atan2(y, x) * degrees, asin(z / m) * degrees];
        }
        function constant(x) {
          return function() {
            return x;
          };
        }
        function compose(a, b) {
          function compose2(x, y) {
            return x = a(x, y), b(x[0], x[1]);
          }
          if (a.invert && b.invert)
            compose2.invert = function(x, y) {
              return x = b.invert(x, y), x && a.invert(x[0], x[1]);
            };
          return compose2;
        }
        function rotationIdentity(lambda, phi) {
          return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];
        }
        rotationIdentity.invert = rotationIdentity;
        function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
          return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
        }
        function forwardRotationLambda(deltaLambda) {
          return function(lambda, phi) {
            return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
          };
        }
        function rotationLambda(deltaLambda) {
          var rotation2 = forwardRotationLambda(deltaLambda);
          rotation2.invert = forwardRotationLambda(-deltaLambda);
          return rotation2;
        }
        function rotationPhiGamma(deltaPhi, deltaGamma) {
          var cosDeltaPhi = cos(deltaPhi), sinDeltaPhi = sin(deltaPhi), cosDeltaGamma = cos(deltaGamma), sinDeltaGamma = sin(deltaGamma);
          function rotation2(lambda, phi) {
            var cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
            return [
              atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
              asin(k * cosDeltaGamma + y * sinDeltaGamma)
            ];
          }
          rotation2.invert = function(lambda, phi) {
            var cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
            return [
              atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
              asin(k * cosDeltaPhi - x * sinDeltaPhi)
            ];
          };
          return rotation2;
        }
        function rotation(rotate) {
          rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
          function forward(coordinates2) {
            coordinates2 = rotate(coordinates2[0] * radians, coordinates2[1] * radians);
            return coordinates2[0] *= degrees, coordinates2[1] *= degrees, coordinates2;
          }
          forward.invert = function(coordinates2) {
            coordinates2 = rotate.invert(coordinates2[0] * radians, coordinates2[1] * radians);
            return coordinates2[0] *= degrees, coordinates2[1] *= degrees, coordinates2;
          };
          return forward;
        }
        function circleStream(stream, radius, delta, direction, t0, t1) {
          if (!delta)
            return;
          var cosRadius = cos(radius), sinRadius = sin(radius), step = direction * delta;
          if (t0 == null) {
            t0 = radius + direction * tau;
            t1 = radius - step / 2;
          } else {
            t0 = circleRadius(cosRadius, t0);
            t1 = circleRadius(cosRadius, t1);
            if (direction > 0 ? t0 < t1 : t0 > t1)
              t0 += direction * tau;
          }
          for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
            point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
            stream.point(point[0], point[1]);
          }
        }
        function circleRadius(cosRadius, point) {
          point = cartesian(point), point[0] -= cosRadius;
          cartesianNormalizeInPlace(point);
          var radius = acos(-point[1]);
          return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
        }
        function circle() {
          var center = constant([0, 0]), radius = constant(90), precision = constant(6), ring, rotate, stream = { point };
          function point(x, y) {
            ring.push(x = rotate(x, y));
            x[0] *= degrees, x[1] *= degrees;
          }
          function circle2() {
            var c = center.apply(this, arguments), r = radius.apply(this, arguments) * radians, p = precision.apply(this, arguments) * radians;
            ring = [];
            rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
            circleStream(stream, r, p, 1);
            c = { type: "Polygon", coordinates: [ring] };
            ring = rotate = null;
            return c;
          }
          circle2.center = function(_) {
            return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle2) : center;
          };
          circle2.radius = function(_) {
            return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle2) : radius;
          };
          circle2.precision = function(_) {
            return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle2) : precision;
          };
          return circle2;
        }
        function clipBuffer() {
          var lines = [], line2;
          return {
            point: function(x, y, m) {
              line2.push([x, y, m]);
            },
            lineStart: function() {
              lines.push(line2 = []);
            },
            lineEnd: noop,
            rejoin: function() {
              if (lines.length > 1)
                lines.push(lines.pop().concat(lines.shift()));
            },
            result: function() {
              var result = lines;
              lines = [];
              line2 = null;
              return result;
            }
          };
        }
        function pointEqual(a, b) {
          return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
        }
        function Intersection(point, points, other, entry) {
          this.x = point;
          this.z = points;
          this.o = other;
          this.e = entry;
          this.v = false;
          this.n = this.p = null;
        }
        function clipRejoin(segments, compareIntersection2, startInside, interpolate2, stream) {
          var subject = [], clip2 = [], i, n;
          segments.forEach(function(segment) {
            if ((n2 = segment.length - 1) <= 0)
              return;
            var n2, p02 = segment[0], p1 = segment[n2], x;
            if (pointEqual(p02, p1)) {
              if (!p02[2] && !p1[2]) {
                stream.lineStart();
                for (i = 0; i < n2; ++i)
                  stream.point((p02 = segment[i])[0], p02[1]);
                stream.lineEnd();
                return;
              }
              p1[0] += 2 * epsilon;
            }
            subject.push(x = new Intersection(p02, segment, null, true));
            clip2.push(x.o = new Intersection(p02, null, x, false));
            subject.push(x = new Intersection(p1, segment, null, false));
            clip2.push(x.o = new Intersection(p1, null, x, true));
          });
          if (!subject.length)
            return;
          clip2.sort(compareIntersection2);
          link(subject);
          link(clip2);
          for (i = 0, n = clip2.length; i < n; ++i) {
            clip2[i].e = startInside = !startInside;
          }
          var start = subject[0], points, point;
          while (1) {
            var current = start, isSubject = true;
            while (current.v)
              if ((current = current.n) === start)
                return;
            points = current.z;
            stream.lineStart();
            do {
              current.v = current.o.v = true;
              if (current.e) {
                if (isSubject) {
                  for (i = 0, n = points.length; i < n; ++i)
                    stream.point((point = points[i])[0], point[1]);
                } else {
                  interpolate2(current.x, current.n.x, 1, stream);
                }
                current = current.n;
              } else {
                if (isSubject) {
                  points = current.p.z;
                  for (i = points.length - 1; i >= 0; --i)
                    stream.point((point = points[i])[0], point[1]);
                } else {
                  interpolate2(current.x, current.p.x, -1, stream);
                }
                current = current.p;
              }
              current = current.o;
              points = current.z;
              isSubject = !isSubject;
            } while (!current.v);
            stream.lineEnd();
          }
        }
        function link(array) {
          if (!(n = array.length))
            return;
          var n, i = 0, a = array[0], b;
          while (++i < n) {
            a.n = b = array[i];
            b.p = a;
            a = b;
          }
          a.n = b = array[0];
          b.p = a;
        }
        function longitude(point) {
          if (abs(point[0]) <= pi)
            return point[0];
          else
            return sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);
        }
        function polygonContains(polygon, point) {
          var lambda = longitude(point), phi = point[1], sinPhi = sin(phi), normal = [sin(lambda), -cos(lambda), 0], angle2 = 0, winding = 0;
          var sum = new d3Array.Adder();
          if (sinPhi === 1)
            phi = halfPi + epsilon;
          else if (sinPhi === -1)
            phi = -halfPi - epsilon;
          for (var i = 0, n = polygon.length; i < n; ++i) {
            if (!(m = (ring = polygon[i]).length))
              continue;
            var ring, m, point0 = ring[m - 1], lambda02 = longitude(point0), phi02 = point0[1] / 2 + quarterPi, sinPhi02 = sin(phi02), cosPhi02 = cos(phi02);
            for (var j = 0; j < m; ++j, lambda02 = lambda12, sinPhi02 = sinPhi1, cosPhi02 = cosPhi1, point0 = point1) {
              var point1 = ring[j], lambda12 = longitude(point1), phi12 = point1[1] / 2 + quarterPi, sinPhi1 = sin(phi12), cosPhi1 = cos(phi12), delta = lambda12 - lambda02, sign2 = delta >= 0 ? 1 : -1, absDelta = sign2 * delta, antimeridian = absDelta > pi, k = sinPhi02 * sinPhi1;
              sum.add(atan2(k * sign2 * sin(absDelta), cosPhi02 * cosPhi1 + k * cos(absDelta)));
              angle2 += antimeridian ? delta + sign2 * tau : delta;
              if (antimeridian ^ lambda02 >= lambda ^ lambda12 >= lambda) {
                var arc = cartesianCross(cartesian(point0), cartesian(point1));
                cartesianNormalizeInPlace(arc);
                var intersection = cartesianCross(normal, arc);
                cartesianNormalizeInPlace(intersection);
                var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
                if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
                  winding += antimeridian ^ delta >= 0 ? 1 : -1;
                }
              }
            }
          }
          return (angle2 < -epsilon || angle2 < epsilon && sum < -epsilon2) ^ winding & 1;
        }
        function clip(pointVisible, clipLine2, interpolate2, start) {
          return function(sink) {
            var line2 = clipLine2(sink), ringBuffer = clipBuffer(), ringSink = clipLine2(ringBuffer), polygonStarted = false, polygon, segments, ring;
            var clip2 = {
              point,
              lineStart,
              lineEnd,
              polygonStart: function() {
                clip2.point = pointRing;
                clip2.lineStart = ringStart;
                clip2.lineEnd = ringEnd;
                segments = [];
                polygon = [];
              },
              polygonEnd: function() {
                clip2.point = point;
                clip2.lineStart = lineStart;
                clip2.lineEnd = lineEnd;
                segments = d3Array.merge(segments);
                var startInside = polygonContains(polygon, start);
                if (segments.length) {
                  if (!polygonStarted)
                    sink.polygonStart(), polygonStarted = true;
                  clipRejoin(segments, compareIntersection, startInside, interpolate2, sink);
                } else if (startInside) {
                  if (!polygonStarted)
                    sink.polygonStart(), polygonStarted = true;
                  sink.lineStart();
                  interpolate2(null, null, 1, sink);
                  sink.lineEnd();
                }
                if (polygonStarted)
                  sink.polygonEnd(), polygonStarted = false;
                segments = polygon = null;
              },
              sphere: function() {
                sink.polygonStart();
                sink.lineStart();
                interpolate2(null, null, 1, sink);
                sink.lineEnd();
                sink.polygonEnd();
              }
            };
            function point(lambda, phi) {
              if (pointVisible(lambda, phi))
                sink.point(lambda, phi);
            }
            function pointLine(lambda, phi) {
              line2.point(lambda, phi);
            }
            function lineStart() {
              clip2.point = pointLine;
              line2.lineStart();
            }
            function lineEnd() {
              clip2.point = point;
              line2.lineEnd();
            }
            function pointRing(lambda, phi) {
              ring.push([lambda, phi]);
              ringSink.point(lambda, phi);
            }
            function ringStart() {
              ringSink.lineStart();
              ring = [];
            }
            function ringEnd() {
              pointRing(ring[0][0], ring[0][1]);
              ringSink.lineEnd();
              var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point2;
              ring.pop();
              polygon.push(ring);
              ring = null;
              if (!n)
                return;
              if (clean & 1) {
                segment = ringSegments[0];
                if ((m = segment.length - 1) > 0) {
                  if (!polygonStarted)
                    sink.polygonStart(), polygonStarted = true;
                  sink.lineStart();
                  for (i = 0; i < m; ++i)
                    sink.point((point2 = segment[i])[0], point2[1]);
                  sink.lineEnd();
                }
                return;
              }
              if (n > 1 && clean & 2)
                ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
              segments.push(ringSegments.filter(validSegment));
            }
            return clip2;
          };
        }
        function validSegment(segment) {
          return segment.length > 1;
        }
        function compareIntersection(a, b) {
          return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
        }
        var clipAntimeridian = clip(function() {
          return true;
        }, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]);
        function clipAntimeridianLine(stream) {
          var lambda02 = NaN, phi02 = NaN, sign0 = NaN, clean;
          return {
            lineStart: function() {
              stream.lineStart();
              clean = 1;
            },
            point: function(lambda12, phi12) {
              var sign1 = lambda12 > 0 ? pi : -pi, delta = abs(lambda12 - lambda02);
              if (abs(delta - pi) < epsilon) {
                stream.point(lambda02, phi02 = (phi02 + phi12) / 2 > 0 ? halfPi : -halfPi);
                stream.point(sign0, phi02);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi02);
                stream.point(lambda12, phi02);
                clean = 0;
              } else if (sign0 !== sign1 && delta >= pi) {
                if (abs(lambda02 - sign0) < epsilon)
                  lambda02 -= sign0 * epsilon;
                if (abs(lambda12 - sign1) < epsilon)
                  lambda12 -= sign1 * epsilon;
                phi02 = clipAntimeridianIntersect(lambda02, phi02, lambda12, phi12);
                stream.point(sign0, phi02);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi02);
                clean = 0;
              }
              stream.point(lambda02 = lambda12, phi02 = phi12);
              sign0 = sign1;
            },
            lineEnd: function() {
              stream.lineEnd();
              lambda02 = phi02 = NaN;
            },
            clean: function() {
              return 2 - clean;
            }
          };
        }
        function clipAntimeridianIntersect(lambda02, phi02, lambda12, phi12) {
          var cosPhi02, cosPhi1, sinLambda0Lambda1 = sin(lambda02 - lambda12);
          return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi02) * (cosPhi1 = cos(phi12)) * sin(lambda12) - sin(phi12) * (cosPhi02 = cos(phi02)) * sin(lambda02)) / (cosPhi02 * cosPhi1 * sinLambda0Lambda1)) : (phi02 + phi12) / 2;
        }
        function clipAntimeridianInterpolate(from, to, direction, stream) {
          var phi;
          if (from == null) {
            phi = direction * halfPi;
            stream.point(-pi, phi);
            stream.point(0, phi);
            stream.point(pi, phi);
            stream.point(pi, 0);
            stream.point(pi, -phi);
            stream.point(0, -phi);
            stream.point(-pi, -phi);
            stream.point(-pi, 0);
            stream.point(-pi, phi);
          } else if (abs(from[0] - to[0]) > epsilon) {
            var lambda = from[0] < to[0] ? pi : -pi;
            phi = direction * lambda / 2;
            stream.point(-lambda, phi);
            stream.point(0, phi);
            stream.point(lambda, phi);
          } else {
            stream.point(to[0], to[1]);
          }
        }
        function clipCircle(radius) {
          var cr = cos(radius), delta = 6 * radians, smallRadius = cr > 0, notHemisphere = abs(cr) > epsilon;
          function interpolate2(from, to, direction, stream) {
            circleStream(stream, radius, delta, direction, from, to);
          }
          function visible(lambda, phi) {
            return cos(lambda) * cos(phi) > cr;
          }
          function clipLine2(stream) {
            var point0, c0, v0, v00, clean;
            return {
              lineStart: function() {
                v00 = v0 = false;
                clean = 1;
              },
              point: function(lambda, phi) {
                var point1 = [lambda, phi], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
                if (!point0 && (v00 = v0 = v))
                  stream.lineStart();
                if (v !== v0) {
                  point2 = intersect(point0, point1);
                  if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))
                    point1[2] = 1;
                }
                if (v !== v0) {
                  clean = 0;
                  if (v) {
                    stream.lineStart();
                    point2 = intersect(point1, point0);
                    stream.point(point2[0], point2[1]);
                  } else {
                    point2 = intersect(point0, point1);
                    stream.point(point2[0], point2[1], 2);
                    stream.lineEnd();
                  }
                  point0 = point2;
                } else if (notHemisphere && point0 && smallRadius ^ v) {
                  var t;
                  if (!(c & c0) && (t = intersect(point1, point0, true))) {
                    clean = 0;
                    if (smallRadius) {
                      stream.lineStart();
                      stream.point(t[0][0], t[0][1]);
                      stream.point(t[1][0], t[1][1]);
                      stream.lineEnd();
                    } else {
                      stream.point(t[1][0], t[1][1]);
                      stream.lineEnd();
                      stream.lineStart();
                      stream.point(t[0][0], t[0][1], 3);
                    }
                  }
                }
                if (v && (!point0 || !pointEqual(point0, point1))) {
                  stream.point(point1[0], point1[1]);
                }
                point0 = point1, v0 = v, c0 = c;
              },
              lineEnd: function() {
                if (v0)
                  stream.lineEnd();
                point0 = null;
              },
              clean: function() {
                return clean | (v00 && v0) << 1;
              }
            };
          }
          function intersect(a, b, two) {
            var pa = cartesian(a), pb = cartesian(b);
            var n1 = [1, 0, 0], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
            if (!determinant)
              return !two && a;
            var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A = cartesianScale(n1, c1), B = cartesianScale(n2, c2);
            cartesianAddInPlace(A, B);
            var u = n1xn2, w = cartesianDot(A, u), uu = cartesianDot(u, u), t2 = w * w - uu * (cartesianDot(A, A) - 1);
            if (t2 < 0)
              return;
            var t = sqrt(t2), q = cartesianScale(u, (-w - t) / uu);
            cartesianAddInPlace(q, A);
            q = spherical(q);
            if (!two)
              return q;
            var lambda02 = a[0], lambda12 = b[0], phi02 = a[1], phi12 = b[1], z;
            if (lambda12 < lambda02)
              z = lambda02, lambda02 = lambda12, lambda12 = z;
            var delta2 = lambda12 - lambda02, polar = abs(delta2 - pi) < epsilon, meridian = polar || delta2 < epsilon;
            if (!polar && phi12 < phi02)
              z = phi02, phi02 = phi12, phi12 = z;
            if (meridian ? polar ? phi02 + phi12 > 0 ^ q[1] < (abs(q[0] - lambda02) < epsilon ? phi02 : phi12) : phi02 <= q[1] && q[1] <= phi12 : delta2 > pi ^ (lambda02 <= q[0] && q[0] <= lambda12)) {
              var q1 = cartesianScale(u, (-w + t) / uu);
              cartesianAddInPlace(q1, A);
              return [q, spherical(q1)];
            }
          }
          function code(lambda, phi) {
            var r = smallRadius ? radius : pi - radius, code2 = 0;
            if (lambda < -r)
              code2 |= 1;
            else if (lambda > r)
              code2 |= 2;
            if (phi < -r)
              code2 |= 4;
            else if (phi > r)
              code2 |= 8;
            return code2;
          }
          return clip(visible, clipLine2, interpolate2, smallRadius ? [0, -radius] : [-pi, radius - pi]);
        }
        function clipLine(a, b, x02, y02, x12, y12) {
          var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
          r = x02 - ax;
          if (!dx && r > 0)
            return;
          r /= dx;
          if (dx < 0) {
            if (r < t0)
              return;
            if (r < t1)
              t1 = r;
          } else if (dx > 0) {
            if (r > t1)
              return;
            if (r > t0)
              t0 = r;
          }
          r = x12 - ax;
          if (!dx && r < 0)
            return;
          r /= dx;
          if (dx < 0) {
            if (r > t1)
              return;
            if (r > t0)
              t0 = r;
          } else if (dx > 0) {
            if (r < t0)
              return;
            if (r < t1)
              t1 = r;
          }
          r = y02 - ay;
          if (!dy && r > 0)
            return;
          r /= dy;
          if (dy < 0) {
            if (r < t0)
              return;
            if (r < t1)
              t1 = r;
          } else if (dy > 0) {
            if (r > t1)
              return;
            if (r > t0)
              t0 = r;
          }
          r = y12 - ay;
          if (!dy && r < 0)
            return;
          r /= dy;
          if (dy < 0) {
            if (r > t1)
              return;
            if (r > t0)
              t0 = r;
          } else if (dy > 0) {
            if (r < t0)
              return;
            if (r < t1)
              t1 = r;
          }
          if (t0 > 0)
            a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
          if (t1 < 1)
            b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
          return true;
        }
        var clipMax = 1e9, clipMin = -clipMax;
        function clipRectangle(x02, y02, x12, y12) {
          function visible(x, y) {
            return x02 <= x && x <= x12 && y02 <= y && y <= y12;
          }
          function interpolate2(from, to, direction, stream) {
            var a = 0, a1 = 0;
            if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
              do
                stream.point(a === 0 || a === 3 ? x02 : x12, a > 1 ? y12 : y02);
              while ((a = (a + direction + 4) % 4) !== a1);
            } else {
              stream.point(to[0], to[1]);
            }
          }
          function corner(p, direction) {
            return abs(p[0] - x02) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x12) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y02) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
          }
          function compareIntersection2(a, b) {
            return comparePoint(a.x, b.x);
          }
          function comparePoint(a, b) {
            var ca = corner(a, 1), cb = corner(b, 1);
            return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
          }
          return function(stream) {
            var activeStream = stream, bufferStream = clipBuffer(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
            var clipStream = {
              point,
              lineStart,
              lineEnd,
              polygonStart,
              polygonEnd
            };
            function point(x, y) {
              if (visible(x, y))
                activeStream.point(x, y);
            }
            function polygonInside() {
              var winding = 0;
              for (var i = 0, n = polygon.length; i < n; ++i) {
                for (var ring2 = polygon[i], j = 1, m = ring2.length, point2 = ring2[0], a0, a1, b0 = point2[0], b1 = point2[1]; j < m; ++j) {
                  a0 = b0, a1 = b1, point2 = ring2[j], b0 = point2[0], b1 = point2[1];
                  if (a1 <= y12) {
                    if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x02 - a0))
                      ++winding;
                  } else {
                    if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x02 - a0))
                      --winding;
                  }
                }
              }
              return winding;
            }
            function polygonStart() {
              activeStream = bufferStream, segments = [], polygon = [], clean = true;
            }
            function polygonEnd() {
              var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments = d3Array.merge(segments)).length;
              if (cleanInside || visible2) {
                stream.polygonStart();
                if (cleanInside) {
                  stream.lineStart();
                  interpolate2(null, null, 1, stream);
                  stream.lineEnd();
                }
                if (visible2) {
                  clipRejoin(segments, compareIntersection2, startInside, interpolate2, stream);
                }
                stream.polygonEnd();
              }
              activeStream = stream, segments = polygon = ring = null;
            }
            function lineStart() {
              clipStream.point = linePoint2;
              if (polygon)
                polygon.push(ring = []);
              first = true;
              v_ = false;
              x_ = y_ = NaN;
            }
            function lineEnd() {
              if (segments) {
                linePoint2(x__, y__);
                if (v__ && v_)
                  bufferStream.rejoin();
                segments.push(bufferStream.result());
              }
              clipStream.point = point;
              if (v_)
                activeStream.lineEnd();
            }
            function linePoint2(x, y) {
              var v = visible(x, y);
              if (polygon)
                ring.push([x, y]);
              if (first) {
                x__ = x, y__ = y, v__ = v;
                first = false;
                if (v) {
                  activeStream.lineStart();
                  activeStream.point(x, y);
                }
              } else {
                if (v && v_)
                  activeStream.point(x, y);
                else {
                  var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
                  if (clipLine(a, b, x02, y02, x12, y12)) {
                    if (!v_) {
                      activeStream.lineStart();
                      activeStream.point(a[0], a[1]);
                    }
                    activeStream.point(b[0], b[1]);
                    if (!v)
                      activeStream.lineEnd();
                    clean = false;
                  } else if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                    clean = false;
                  }
                }
              }
              x_ = x, y_ = y, v_ = v;
            }
            return clipStream;
          };
        }
        function extent() {
          var x02 = 0, y02 = 0, x12 = 960, y12 = 500, cache, cacheStream, clip2;
          return clip2 = {
            stream: function(stream) {
              return cache && cacheStream === stream ? cache : cache = clipRectangle(x02, y02, x12, y12)(cacheStream = stream);
            },
            extent: function(_) {
              return arguments.length ? (x02 = +_[0][0], y02 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1], cache = cacheStream = null, clip2) : [[x02, y02], [x12, y12]];
            }
          };
        }
        var lengthSum, lambda0$2, sinPhi0$1, cosPhi0$1;
        var lengthStream = {
          sphere: noop,
          point: noop,
          lineStart: lengthLineStart,
          lineEnd: noop,
          polygonStart: noop,
          polygonEnd: noop
        };
        function lengthLineStart() {
          lengthStream.point = lengthPointFirst;
          lengthStream.lineEnd = lengthLineEnd;
        }
        function lengthLineEnd() {
          lengthStream.point = lengthStream.lineEnd = noop;
        }
        function lengthPointFirst(lambda, phi) {
          lambda *= radians, phi *= radians;
          lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);
          lengthStream.point = lengthPoint;
        }
        function lengthPoint(lambda, phi) {
          lambda *= radians, phi *= radians;
          var sinPhi = sin(phi), cosPhi = cos(phi), delta = abs(lambda - lambda0$2), cosDelta = cos(delta), sinDelta = sin(delta), x = cosPhi * sinDelta, y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta, z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
          lengthSum.add(atan2(sqrt(x * x + y * y), z));
          lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
        }
        function length(object2) {
          lengthSum = new d3Array.Adder();
          geoStream(object2, lengthStream);
          return +lengthSum;
        }
        var coordinates = [null, null], object = { type: "LineString", coordinates };
        function distance(a, b) {
          coordinates[0] = a;
          coordinates[1] = b;
          return length(object);
        }
        var containsObjectType = {
          Feature: function(object2, point) {
            return containsGeometry(object2.geometry, point);
          },
          FeatureCollection: function(object2, point) {
            var features = object2.features, i = -1, n = features.length;
            while (++i < n)
              if (containsGeometry(features[i].geometry, point))
                return true;
            return false;
          }
        };
        var containsGeometryType = {
          Sphere: function() {
            return true;
          },
          Point: function(object2, point) {
            return containsPoint(object2.coordinates, point);
          },
          MultiPoint: function(object2, point) {
            var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
            while (++i < n)
              if (containsPoint(coordinates2[i], point))
                return true;
            return false;
          },
          LineString: function(object2, point) {
            return containsLine(object2.coordinates, point);
          },
          MultiLineString: function(object2, point) {
            var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
            while (++i < n)
              if (containsLine(coordinates2[i], point))
                return true;
            return false;
          },
          Polygon: function(object2, point) {
            return containsPolygon(object2.coordinates, point);
          },
          MultiPolygon: function(object2, point) {
            var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
            while (++i < n)
              if (containsPolygon(coordinates2[i], point))
                return true;
            return false;
          },
          GeometryCollection: function(object2, point) {
            var geometries = object2.geometries, i = -1, n = geometries.length;
            while (++i < n)
              if (containsGeometry(geometries[i], point))
                return true;
            return false;
          }
        };
        function containsGeometry(geometry, point) {
          return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
        }
        function containsPoint(coordinates2, point) {
          return distance(coordinates2, point) === 0;
        }
        function containsLine(coordinates2, point) {
          var ao, bo, ab;
          for (var i = 0, n = coordinates2.length; i < n; i++) {
            bo = distance(coordinates2[i], point);
            if (bo === 0)
              return true;
            if (i > 0) {
              ab = distance(coordinates2[i], coordinates2[i - 1]);
              if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab)
                return true;
            }
            ao = bo;
          }
          return false;
        }
        function containsPolygon(coordinates2, point) {
          return !!polygonContains(coordinates2.map(ringRadians), pointRadians(point));
        }
        function ringRadians(ring) {
          return ring = ring.map(pointRadians), ring.pop(), ring;
        }
        function pointRadians(point) {
          return [point[0] * radians, point[1] * radians];
        }
        function contains(object2, point) {
          return (object2 && containsObjectType.hasOwnProperty(object2.type) ? containsObjectType[object2.type] : containsGeometry)(object2, point);
        }
        function graticuleX(y02, y12, dy) {
          var y = d3Array.range(y02, y12 - epsilon, dy).concat(y12);
          return function(x) {
            return y.map(function(y2) {
              return [x, y2];
            });
          };
        }
        function graticuleY(x02, x12, dx) {
          var x = d3Array.range(x02, x12 - epsilon, dx).concat(x12);
          return function(y) {
            return x.map(function(x2) {
              return [x2, y];
            });
          };
        }
        function graticule() {
          var x12, x02, X12, X02, y12, y02, Y12, Y02, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
          function graticule2() {
            return { type: "MultiLineString", coordinates: lines() };
          }
          function lines() {
            return d3Array.range(ceil(X02 / DX) * DX, X12, DX).map(X).concat(d3Array.range(ceil(Y02 / DY) * DY, Y12, DY).map(Y)).concat(d3Array.range(ceil(x02 / dx) * dx, x12, dx).filter(function(x2) {
              return abs(x2 % DX) > epsilon;
            }).map(x)).concat(d3Array.range(ceil(y02 / dy) * dy, y12, dy).filter(function(y2) {
              return abs(y2 % DY) > epsilon;
            }).map(y));
          }
          graticule2.lines = function() {
            return lines().map(function(coordinates2) {
              return { type: "LineString", coordinates: coordinates2 };
            });
          };
          graticule2.outline = function() {
            return {
              type: "Polygon",
              coordinates: [
                X(X02).concat(Y(Y12).slice(1), X(X12).reverse().slice(1), Y(Y02).reverse().slice(1))
              ]
            };
          };
          graticule2.extent = function(_) {
            if (!arguments.length)
              return graticule2.extentMinor();
            return graticule2.extentMajor(_).extentMinor(_);
          };
          graticule2.extentMajor = function(_) {
            if (!arguments.length)
              return [[X02, Y02], [X12, Y12]];
            X02 = +_[0][0], X12 = +_[1][0];
            Y02 = +_[0][1], Y12 = +_[1][1];
            if (X02 > X12)
              _ = X02, X02 = X12, X12 = _;
            if (Y02 > Y12)
              _ = Y02, Y02 = Y12, Y12 = _;
            return graticule2.precision(precision);
          };
          graticule2.extentMinor = function(_) {
            if (!arguments.length)
              return [[x02, y02], [x12, y12]];
            x02 = +_[0][0], x12 = +_[1][0];
            y02 = +_[0][1], y12 = +_[1][1];
            if (x02 > x12)
              _ = x02, x02 = x12, x12 = _;
            if (y02 > y12)
              _ = y02, y02 = y12, y12 = _;
            return graticule2.precision(precision);
          };
          graticule2.step = function(_) {
            if (!arguments.length)
              return graticule2.stepMinor();
            return graticule2.stepMajor(_).stepMinor(_);
          };
          graticule2.stepMajor = function(_) {
            if (!arguments.length)
              return [DX, DY];
            DX = +_[0], DY = +_[1];
            return graticule2;
          };
          graticule2.stepMinor = function(_) {
            if (!arguments.length)
              return [dx, dy];
            dx = +_[0], dy = +_[1];
            return graticule2;
          };
          graticule2.precision = function(_) {
            if (!arguments.length)
              return precision;
            precision = +_;
            x = graticuleX(y02, y12, 90);
            y = graticuleY(x02, x12, precision);
            X = graticuleX(Y02, Y12, 90);
            Y = graticuleY(X02, X12, precision);
            return graticule2;
          };
          return graticule2.extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]]).extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
        }
        function graticule10() {
          return graticule()();
        }
        function interpolate(a, b) {
          var x02 = a[0] * radians, y02 = a[1] * radians, x12 = b[0] * radians, y12 = b[1] * radians, cy0 = cos(y02), sy0 = sin(y02), cy1 = cos(y12), sy1 = sin(y12), kx0 = cy0 * cos(x02), ky0 = cy0 * sin(x02), kx1 = cy1 * cos(x12), ky1 = cy1 * sin(x12), d = 2 * asin(sqrt(haversin(y12 - y02) + cy0 * cy1 * haversin(x12 - x02))), k = sin(d);
          var interpolate2 = d ? function(t) {
            var B = sin(t *= d) / k, A = sin(d - t) / k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
            return [
              atan2(y, x) * degrees,
              atan2(z, sqrt(x * x + y * y)) * degrees
            ];
          } : function() {
            return [x02 * degrees, y02 * degrees];
          };
          interpolate2.distance = d;
          return interpolate2;
        }
        var identity = (x) => x;
        var areaSum$1 = new d3Array.Adder(), areaRingSum$1 = new d3Array.Adder(), x00, y00, x0$1, y0$1;
        var areaStream$1 = {
          point: noop,
          lineStart: noop,
          lineEnd: noop,
          polygonStart: function() {
            areaStream$1.lineStart = areaRingStart$1;
            areaStream$1.lineEnd = areaRingEnd$1;
          },
          polygonEnd: function() {
            areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;
            areaSum$1.add(abs(areaRingSum$1));
            areaRingSum$1 = new d3Array.Adder();
          },
          result: function() {
            var area2 = areaSum$1 / 2;
            areaSum$1 = new d3Array.Adder();
            return area2;
          }
        };
        function areaRingStart$1() {
          areaStream$1.point = areaPointFirst$1;
        }
        function areaPointFirst$1(x, y) {
          areaStream$1.point = areaPoint$1;
          x00 = x0$1 = x, y00 = y0$1 = y;
        }
        function areaPoint$1(x, y) {
          areaRingSum$1.add(y0$1 * x - x0$1 * y);
          x0$1 = x, y0$1 = y;
        }
        function areaRingEnd$1() {
          areaPoint$1(x00, y00);
        }
        var x0$2 = Infinity, y0$2 = x0$2, x1 = -x0$2, y1 = x1;
        var boundsStream$1 = {
          point: boundsPoint$1,
          lineStart: noop,
          lineEnd: noop,
          polygonStart: noop,
          polygonEnd: noop,
          result: function() {
            var bounds2 = [[x0$2, y0$2], [x1, y1]];
            x1 = y1 = -(y0$2 = x0$2 = Infinity);
            return bounds2;
          }
        };
        function boundsPoint$1(x, y) {
          if (x < x0$2)
            x0$2 = x;
          if (x > x1)
            x1 = x;
          if (y < y0$2)
            y0$2 = y;
          if (y > y1)
            y1 = y;
        }
        var X0$1 = 0, Y0$1 = 0, Z0$1 = 0, X1$1 = 0, Y1$1 = 0, Z1$1 = 0, X2$1 = 0, Y2$1 = 0, Z2$1 = 0, x00$1, y00$1, x0$3, y0$3;
        var centroidStream$1 = {
          point: centroidPoint$1,
          lineStart: centroidLineStart$1,
          lineEnd: centroidLineEnd$1,
          polygonStart: function() {
            centroidStream$1.lineStart = centroidRingStart$1;
            centroidStream$1.lineEnd = centroidRingEnd$1;
          },
          polygonEnd: function() {
            centroidStream$1.point = centroidPoint$1;
            centroidStream$1.lineStart = centroidLineStart$1;
            centroidStream$1.lineEnd = centroidLineEnd$1;
          },
          result: function() {
            var centroid2 = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1] : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1] : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1] : [NaN, NaN];
            X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0;
            return centroid2;
          }
        };
        function centroidPoint$1(x, y) {
          X0$1 += x;
          Y0$1 += y;
          ++Z0$1;
        }
        function centroidLineStart$1() {
          centroidStream$1.point = centroidPointFirstLine;
        }
        function centroidPointFirstLine(x, y) {
          centroidStream$1.point = centroidPointLine;
          centroidPoint$1(x0$3 = x, y0$3 = y);
        }
        function centroidPointLine(x, y) {
          var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
          X1$1 += z * (x0$3 + x) / 2;
          Y1$1 += z * (y0$3 + y) / 2;
          Z1$1 += z;
          centroidPoint$1(x0$3 = x, y0$3 = y);
        }
        function centroidLineEnd$1() {
          centroidStream$1.point = centroidPoint$1;
        }
        function centroidRingStart$1() {
          centroidStream$1.point = centroidPointFirstRing;
        }
        function centroidRingEnd$1() {
          centroidPointRing(x00$1, y00$1);
        }
        function centroidPointFirstRing(x, y) {
          centroidStream$1.point = centroidPointRing;
          centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
        }
        function centroidPointRing(x, y) {
          var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
          X1$1 += z * (x0$3 + x) / 2;
          Y1$1 += z * (y0$3 + y) / 2;
          Z1$1 += z;
          z = y0$3 * x - x0$3 * y;
          X2$1 += z * (x0$3 + x);
          Y2$1 += z * (y0$3 + y);
          Z2$1 += z * 3;
          centroidPoint$1(x0$3 = x, y0$3 = y);
        }
        function PathContext(context) {
          this._context = context;
        }
        PathContext.prototype = {
          _radius: 4.5,
          pointRadius: function(_) {
            return this._radius = _, this;
          },
          polygonStart: function() {
            this._line = 0;
          },
          polygonEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._point = 0;
          },
          lineEnd: function() {
            if (this._line === 0)
              this._context.closePath();
            this._point = NaN;
          },
          point: function(x, y) {
            switch (this._point) {
              case 0: {
                this._context.moveTo(x, y);
                this._point = 1;
                break;
              }
              case 1: {
                this._context.lineTo(x, y);
                break;
              }
              default: {
                this._context.moveTo(x + this._radius, y);
                this._context.arc(x, y, this._radius, 0, tau);
                break;
              }
            }
          },
          result: noop
        };
        var lengthSum$1 = new d3Array.Adder(), lengthRing, x00$2, y00$2, x0$4, y0$4;
        var lengthStream$1 = {
          point: noop,
          lineStart: function() {
            lengthStream$1.point = lengthPointFirst$1;
          },
          lineEnd: function() {
            if (lengthRing)
              lengthPoint$1(x00$2, y00$2);
            lengthStream$1.point = noop;
          },
          polygonStart: function() {
            lengthRing = true;
          },
          polygonEnd: function() {
            lengthRing = null;
          },
          result: function() {
            var length2 = +lengthSum$1;
            lengthSum$1 = new d3Array.Adder();
            return length2;
          }
        };
        function lengthPointFirst$1(x, y) {
          lengthStream$1.point = lengthPoint$1;
          x00$2 = x0$4 = x, y00$2 = y0$4 = y;
        }
        function lengthPoint$1(x, y) {
          x0$4 -= x, y0$4 -= y;
          lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
          x0$4 = x, y0$4 = y;
        }
        function PathString() {
          this._string = [];
        }
        PathString.prototype = {
          _radius: 4.5,
          _circle: circle$1(4.5),
          pointRadius: function(_) {
            if ((_ = +_) !== this._radius)
              this._radius = _, this._circle = null;
            return this;
          },
          polygonStart: function() {
            this._line = 0;
          },
          polygonEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._point = 0;
          },
          lineEnd: function() {
            if (this._line === 0)
              this._string.push("Z");
            this._point = NaN;
          },
          point: function(x, y) {
            switch (this._point) {
              case 0: {
                this._string.push("M", x, ",", y);
                this._point = 1;
                break;
              }
              case 1: {
                this._string.push("L", x, ",", y);
                break;
              }
              default: {
                if (this._circle == null)
                  this._circle = circle$1(this._radius);
                this._string.push("M", x, ",", y, this._circle);
                break;
              }
            }
          },
          result: function() {
            if (this._string.length) {
              var result = this._string.join("");
              this._string = [];
              return result;
            } else {
              return null;
            }
          }
        };
        function circle$1(radius) {
          return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
        }
        function index(projection2, context) {
          var pointRadius = 4.5, projectionStream, contextStream;
          function path(object2) {
            if (object2) {
              if (typeof pointRadius === "function")
                contextStream.pointRadius(+pointRadius.apply(this, arguments));
              geoStream(object2, projectionStream(contextStream));
            }
            return contextStream.result();
          }
          path.area = function(object2) {
            geoStream(object2, projectionStream(areaStream$1));
            return areaStream$1.result();
          };
          path.measure = function(object2) {
            geoStream(object2, projectionStream(lengthStream$1));
            return lengthStream$1.result();
          };
          path.bounds = function(object2) {
            geoStream(object2, projectionStream(boundsStream$1));
            return boundsStream$1.result();
          };
          path.centroid = function(object2) {
            geoStream(object2, projectionStream(centroidStream$1));
            return centroidStream$1.result();
          };
          path.projection = function(_) {
            return arguments.length ? (projectionStream = _ == null ? (projection2 = null, identity) : (projection2 = _).stream, path) : projection2;
          };
          path.context = function(_) {
            if (!arguments.length)
              return context;
            contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
            if (typeof pointRadius !== "function")
              contextStream.pointRadius(pointRadius);
            return path;
          };
          path.pointRadius = function(_) {
            if (!arguments.length)
              return pointRadius;
            pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
            return path;
          };
          return path.projection(projection2).context(context);
        }
        function transform(methods) {
          return {
            stream: transformer(methods)
          };
        }
        function transformer(methods) {
          return function(stream) {
            var s = new TransformStream();
            for (var key in methods)
              s[key] = methods[key];
            s.stream = stream;
            return s;
          };
        }
        function TransformStream() {
        }
        TransformStream.prototype = {
          constructor: TransformStream,
          point: function(x, y) {
            this.stream.point(x, y);
          },
          sphere: function() {
            this.stream.sphere();
          },
          lineStart: function() {
            this.stream.lineStart();
          },
          lineEnd: function() {
            this.stream.lineEnd();
          },
          polygonStart: function() {
            this.stream.polygonStart();
          },
          polygonEnd: function() {
            this.stream.polygonEnd();
          }
        };
        function fit(projection2, fitBounds, object2) {
          var clip2 = projection2.clipExtent && projection2.clipExtent();
          projection2.scale(150).translate([0, 0]);
          if (clip2 != null)
            projection2.clipExtent(null);
          geoStream(object2, projection2.stream(boundsStream$1));
          fitBounds(boundsStream$1.result());
          if (clip2 != null)
            projection2.clipExtent(clip2);
          return projection2;
        }
        function fitExtent(projection2, extent2, object2) {
          return fit(projection2, function(b) {
            var w = extent2[1][0] - extent2[0][0], h19 = extent2[1][1] - extent2[0][1], k = Math.min(w / (b[1][0] - b[0][0]), h19 / (b[1][1] - b[0][1])), x = +extent2[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent2[0][1] + (h19 - k * (b[1][1] + b[0][1])) / 2;
            projection2.scale(150 * k).translate([x, y]);
          }, object2);
        }
        function fitSize(projection2, size, object2) {
          return fitExtent(projection2, [[0, 0], size], object2);
        }
        function fitWidth(projection2, width, object2) {
          return fit(projection2, function(b) {
            var w = +width, k = w / (b[1][0] - b[0][0]), x = (w - k * (b[1][0] + b[0][0])) / 2, y = -k * b[0][1];
            projection2.scale(150 * k).translate([x, y]);
          }, object2);
        }
        function fitHeight(projection2, height, object2) {
          return fit(projection2, function(b) {
            var h19 = +height, k = h19 / (b[1][1] - b[0][1]), x = -k * b[0][0], y = (h19 - k * (b[1][1] + b[0][1])) / 2;
            projection2.scale(150 * k).translate([x, y]);
          }, object2);
        }
        var maxDepth = 16, cosMinDistance = cos(30 * radians);
        function resample(project, delta2) {
          return +delta2 ? resample$1(project, delta2) : resampleNone(project);
        }
        function resampleNone(project) {
          return transformer({
            point: function(x, y) {
              x = project(x, y);
              this.stream.point(x[0], x[1]);
            }
          });
        }
        function resample$1(project, delta2) {
          function resampleLineTo(x02, y02, lambda02, a0, b0, c0, x12, y12, lambda12, a1, b1, c1, depth, stream) {
            var dx = x12 - x02, dy = y12 - y02, d2 = dx * dx + dy * dy;
            if (d2 > 4 * delta2 && depth--) {
              var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = sqrt(a * a + b * b + c * c), phi2 = asin(c /= m), lambda22 = abs(abs(c) - 1) < epsilon || abs(lambda02 - lambda12) < epsilon ? (lambda02 + lambda12) / 2 : atan2(b, a), p = project(lambda22, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x02, dy2 = y2 - y02, dz = dy * dx2 - dx * dy2;
              if (dz * dz / d2 > delta2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                resampleLineTo(x02, y02, lambda02, a0, b0, c0, x2, y2, lambda22, a /= m, b /= m, c, depth, stream);
                stream.point(x2, y2);
                resampleLineTo(x2, y2, lambda22, a, b, c, x12, y12, lambda12, a1, b1, c1, depth, stream);
              }
            }
          }
          return function(stream) {
            var lambda002, x002, y002, a00, b00, c00, lambda02, x02, y02, a0, b0, c0;
            var resampleStream = {
              point,
              lineStart,
              lineEnd,
              polygonStart: function() {
                stream.polygonStart();
                resampleStream.lineStart = ringStart;
              },
              polygonEnd: function() {
                stream.polygonEnd();
                resampleStream.lineStart = lineStart;
              }
            };
            function point(x, y) {
              x = project(x, y);
              stream.point(x[0], x[1]);
            }
            function lineStart() {
              x02 = NaN;
              resampleStream.point = linePoint2;
              stream.lineStart();
            }
            function linePoint2(lambda, phi) {
              var c = cartesian([lambda, phi]), p = project(lambda, phi);
              resampleLineTo(x02, y02, lambda02, a0, b0, c0, x02 = p[0], y02 = p[1], lambda02 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
              stream.point(x02, y02);
            }
            function lineEnd() {
              resampleStream.point = point;
              stream.lineEnd();
            }
            function ringStart() {
              lineStart();
              resampleStream.point = ringPoint;
              resampleStream.lineEnd = ringEnd;
            }
            function ringPoint(lambda, phi) {
              linePoint2(lambda002 = lambda, phi), x002 = x02, y002 = y02, a00 = a0, b00 = b0, c00 = c0;
              resampleStream.point = linePoint2;
            }
            function ringEnd() {
              resampleLineTo(x02, y02, lambda02, a0, b0, c0, x002, y002, lambda002, a00, b00, c00, maxDepth, stream);
              resampleStream.lineEnd = lineEnd;
              lineEnd();
            }
            return resampleStream;
          };
        }
        var transformRadians = transformer({
          point: function(x, y) {
            this.stream.point(x * radians, y * radians);
          }
        });
        function transformRotate(rotate) {
          return transformer({
            point: function(x, y) {
              var r = rotate(x, y);
              return this.stream.point(r[0], r[1]);
            }
          });
        }
        function scaleTranslate(k, dx, dy, sx, sy) {
          function transform2(x, y) {
            x *= sx;
            y *= sy;
            return [dx + k * x, dy - k * y];
          }
          transform2.invert = function(x, y) {
            return [(x - dx) / k * sx, (dy - y) / k * sy];
          };
          return transform2;
        }
        function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
          if (!alpha)
            return scaleTranslate(k, dx, dy, sx, sy);
          var cosAlpha = cos(alpha), sinAlpha = sin(alpha), a = cosAlpha * k, b = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
          function transform2(x, y) {
            x *= sx;
            y *= sy;
            return [a * x - b * y + dx, dy - b * x - a * y];
          }
          transform2.invert = function(x, y) {
            return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
          };
          return transform2;
        }
        function projection(project) {
          return projectionMutator(function() {
            return project;
          })();
        }
        function projectionMutator(projectAt) {
          var project, k = 150, x = 480, y = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = clipAntimeridian, x02 = null, y02, x12, y12, postclip = identity, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
          function projection2(point) {
            return projectRotateTransform(point[0] * radians, point[1] * radians);
          }
          function invert(point) {
            point = projectRotateTransform.invert(point[0], point[1]);
            return point && [point[0] * degrees, point[1] * degrees];
          }
          projection2.stream = function(stream) {
            return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
          };
          projection2.preclip = function(_) {
            return arguments.length ? (preclip = _, theta = void 0, reset()) : preclip;
          };
          projection2.postclip = function(_) {
            return arguments.length ? (postclip = _, x02 = y02 = x12 = y12 = null, reset()) : postclip;
          };
          projection2.clipAngle = function(_) {
            return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
          };
          projection2.clipExtent = function(_) {
            return arguments.length ? (postclip = _ == null ? (x02 = y02 = x12 = y12 = null, identity) : clipRectangle(x02 = +_[0][0], y02 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reset()) : x02 == null ? null : [[x02, y02], [x12, y12]];
          };
          projection2.scale = function(_) {
            return arguments.length ? (k = +_, recenter()) : k;
          };
          projection2.translate = function(_) {
            return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
          };
          projection2.center = function(_) {
            return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
          };
          projection2.rotate = function(_) {
            return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
          };
          projection2.angle = function(_) {
            return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
          };
          projection2.reflectX = function(_) {
            return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
          };
          projection2.reflectY = function(_) {
            return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
          };
          projection2.precision = function(_) {
            return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
          };
          projection2.fitExtent = function(extent2, object2) {
            return fitExtent(projection2, extent2, object2);
          };
          projection2.fitSize = function(size, object2) {
            return fitSize(projection2, size, object2);
          };
          projection2.fitWidth = function(width, object2) {
            return fitWidth(projection2, width, object2);
          };
          projection2.fitHeight = function(height, object2) {
            return fitHeight(projection2, height, object2);
          };
          function recenter() {
            var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform2 = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
            rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
            projectTransform = compose(project, transform2);
            projectRotateTransform = compose(rotate, projectTransform);
            projectResample = resample(projectTransform, delta2);
            return reset();
          }
          function reset() {
            cache = cacheStream = null;
            return projection2;
          }
          return function() {
            project = projectAt.apply(this, arguments);
            projection2.invert = project.invert && invert;
            return recenter();
          };
        }
        function conicProjection(projectAt) {
          var phi02 = 0, phi12 = pi / 3, m = projectionMutator(projectAt), p = m(phi02, phi12);
          p.parallels = function(_) {
            return arguments.length ? m(phi02 = _[0] * radians, phi12 = _[1] * radians) : [phi02 * degrees, phi12 * degrees];
          };
          return p;
        }
        function cylindricalEqualAreaRaw(phi02) {
          var cosPhi02 = cos(phi02);
          function forward(lambda, phi) {
            return [lambda * cosPhi02, sin(phi) / cosPhi02];
          }
          forward.invert = function(x, y) {
            return [x / cosPhi02, asin(y * cosPhi02)];
          };
          return forward;
        }
        function conicEqualAreaRaw(y02, y12) {
          var sy0 = sin(y02), n = (sy0 + sin(y12)) / 2;
          if (abs(n) < epsilon)
            return cylindricalEqualAreaRaw(y02);
          var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;
          function project(x, y) {
            var r = sqrt(c - 2 * n * sin(y)) / n;
            return [r * sin(x *= n), r0 - r * cos(x)];
          }
          project.invert = function(x, y) {
            var r0y = r0 - y, l = atan2(x, abs(r0y)) * sign(r0y);
            if (r0y * n < 0)
              l -= pi * sign(x) * sign(r0y);
            return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
          };
          return project;
        }
        function conicEqualArea() {
          return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
        }
        function albers() {
          return conicEqualArea().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
        }
        function multiplex(streams) {
          var n = streams.length;
          return {
            point: function(x, y) {
              var i = -1;
              while (++i < n)
                streams[i].point(x, y);
            },
            sphere: function() {
              var i = -1;
              while (++i < n)
                streams[i].sphere();
            },
            lineStart: function() {
              var i = -1;
              while (++i < n)
                streams[i].lineStart();
            },
            lineEnd: function() {
              var i = -1;
              while (++i < n)
                streams[i].lineEnd();
            },
            polygonStart: function() {
              var i = -1;
              while (++i < n)
                streams[i].polygonStart();
            },
            polygonEnd: function() {
              var i = -1;
              while (++i < n)
                streams[i].polygonEnd();
            }
          };
        }
        function albersUsa() {
          var cache, cacheStream, lower48 = albers(), lower48Point, alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, point, pointStream = { point: function(x, y) {
            point = [x, y];
          } };
          function albersUsa2(coordinates2) {
            var x = coordinates2[0], y = coordinates2[1];
            return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
          }
          albersUsa2.invert = function(coordinates2) {
            var k = lower48.scale(), t = lower48.translate(), x = (coordinates2[0] - t[0]) / k, y = (coordinates2[1] - t[1]) / k;
            return (y >= 0.12 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates2);
          };
          albersUsa2.stream = function(stream) {
            return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
          };
          albersUsa2.precision = function(_) {
            if (!arguments.length)
              return lower48.precision();
            lower48.precision(_), alaska.precision(_), hawaii.precision(_);
            return reset();
          };
          albersUsa2.scale = function(_) {
            if (!arguments.length)
              return lower48.scale();
            lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
            return albersUsa2.translate(lower48.translate());
          };
          albersUsa2.translate = function(_) {
            if (!arguments.length)
              return lower48.translate();
            var k = lower48.scale(), x = +_[0], y = +_[1];
            lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
            alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon, y + 0.12 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);
            hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]]).stream(pointStream);
            return reset();
          };
          albersUsa2.fitExtent = function(extent2, object2) {
            return fitExtent(albersUsa2, extent2, object2);
          };
          albersUsa2.fitSize = function(size, object2) {
            return fitSize(albersUsa2, size, object2);
          };
          albersUsa2.fitWidth = function(width, object2) {
            return fitWidth(albersUsa2, width, object2);
          };
          albersUsa2.fitHeight = function(height, object2) {
            return fitHeight(albersUsa2, height, object2);
          };
          function reset() {
            cache = cacheStream = null;
            return albersUsa2;
          }
          return albersUsa2.scale(1070);
        }
        function azimuthalRaw(scale) {
          return function(x, y) {
            var cx = cos(x), cy = cos(y), k = scale(cx * cy);
            if (k === Infinity)
              return [2, 0];
            return [
              k * cy * sin(x),
              k * sin(y)
            ];
          };
        }
        function azimuthalInvert(angle2) {
          return function(x, y) {
            var z = sqrt(x * x + y * y), c = angle2(z), sc = sin(c), cc = cos(c);
            return [
              atan2(x * sc, z * cc),
              asin(z && y * sc / z)
            ];
          };
        }
        var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
          return sqrt(2 / (1 + cxcy));
        });
        azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
          return 2 * asin(z / 2);
        });
        function azimuthalEqualArea() {
          return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
        }
        var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
          return (c = acos(c)) && c / sin(c);
        });
        azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
          return z;
        });
        function azimuthalEquidistant() {
          return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
        }
        function mercatorRaw(lambda, phi) {
          return [lambda, log(tan((halfPi + phi) / 2))];
        }
        mercatorRaw.invert = function(x, y) {
          return [x, 2 * atan(exp(y)) - halfPi];
        };
        function mercator() {
          return mercatorProjection(mercatorRaw).scale(961 / tau);
        }
        function mercatorProjection(project) {
          var m = projection(project), center = m.center, scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, x02 = null, y02, x12, y12;
          m.scale = function(_) {
            return arguments.length ? (scale(_), reclip()) : scale();
          };
          m.translate = function(_) {
            return arguments.length ? (translate(_), reclip()) : translate();
          };
          m.center = function(_) {
            return arguments.length ? (center(_), reclip()) : center();
          };
          m.clipExtent = function(_) {
            return arguments.length ? (_ == null ? x02 = y02 = x12 = y12 = null : (x02 = +_[0][0], y02 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reclip()) : x02 == null ? null : [[x02, y02], [x12, y12]];
          };
          function reclip() {
            var k = pi * scale(), t = m(rotation(m.rotate()).invert([0, 0]));
            return clipExtent(x02 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x02), y02], [Math.min(t[0] + k, x12), y12]] : [[x02, Math.max(t[1] - k, y02)], [x12, Math.min(t[1] + k, y12)]]);
          }
          return reclip();
        }
        function tany(y) {
          return tan((halfPi + y) / 2);
        }
        function conicConformalRaw(y02, y12) {
          var cy0 = cos(y02), n = y02 === y12 ? sin(y02) : log(cy0 / cos(y12)) / log(tany(y12) / tany(y02)), f = cy0 * pow(tany(y02), n) / n;
          if (!n)
            return mercatorRaw;
          function project(x, y) {
            if (f > 0) {
              if (y < -halfPi + epsilon)
                y = -halfPi + epsilon;
            } else {
              if (y > halfPi - epsilon)
                y = halfPi - epsilon;
            }
            var r = f / pow(tany(y), n);
            return [r * sin(n * x), f - r * cos(n * x)];
          }
          project.invert = function(x, y) {
            var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy), l = atan2(x, abs(fy)) * sign(fy);
            if (fy * n < 0)
              l -= pi * sign(x) * sign(fy);
            return [l / n, 2 * atan(pow(f / r, 1 / n)) - halfPi];
          };
          return project;
        }
        function conicConformal() {
          return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);
        }
        function equirectangularRaw(lambda, phi) {
          return [lambda, phi];
        }
        equirectangularRaw.invert = equirectangularRaw;
        function equirectangular() {
          return projection(equirectangularRaw).scale(152.63);
        }
        function conicEquidistantRaw(y02, y12) {
          var cy0 = cos(y02), n = y02 === y12 ? sin(y02) : (cy0 - cos(y12)) / (y12 - y02), g = cy0 / n + y02;
          if (abs(n) < epsilon)
            return equirectangularRaw;
          function project(x, y) {
            var gy = g - y, nx = n * x;
            return [gy * sin(nx), g - gy * cos(nx)];
          }
          project.invert = function(x, y) {
            var gy = g - y, l = atan2(x, abs(gy)) * sign(gy);
            if (gy * n < 0)
              l -= pi * sign(x) * sign(gy);
            return [l / n, g - sign(n) * sqrt(x * x + gy * gy)];
          };
          return project;
        }
        function conicEquidistant() {
          return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
        }
        var A1 = 1.340264, A2 = -0.081106, A3 = 893e-6, A4 = 3796e-6, M = sqrt(3) / 2, iterations = 12;
        function equalEarthRaw(lambda, phi) {
          var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;
          return [
            lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
            l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
          ];
        }
        equalEarthRaw.invert = function(x, y) {
          var l = y, l2 = l * l, l6 = l2 * l2 * l2;
          for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
            fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
            fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
            l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
            if (abs(delta) < epsilon2)
              break;
          }
          return [
            M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),
            asin(sin(l) / M)
          ];
        };
        function equalEarth() {
          return projection(equalEarthRaw).scale(177.158);
        }
        function gnomonicRaw(x, y) {
          var cy = cos(y), k = cos(x) * cy;
          return [cy * sin(x) / k, sin(y) / k];
        }
        gnomonicRaw.invert = azimuthalInvert(atan);
        function gnomonic() {
          return projection(gnomonicRaw).scale(144.049).clipAngle(60);
        }
        function identity$1() {
          var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, alpha = 0, ca, sa, x02 = null, y02, x12, y12, kx = 1, ky = 1, transform2 = transformer({
            point: function(x, y) {
              var p = projection2([x, y]);
              this.stream.point(p[0], p[1]);
            }
          }), postclip = identity, cache, cacheStream;
          function reset() {
            kx = k * sx;
            ky = k * sy;
            cache = cacheStream = null;
            return projection2;
          }
          function projection2(p) {
            var x = p[0] * kx, y = p[1] * ky;
            if (alpha) {
              var t = y * ca - x * sa;
              x = x * ca + y * sa;
              y = t;
            }
            return [x + tx, y + ty];
          }
          projection2.invert = function(p) {
            var x = p[0] - tx, y = p[1] - ty;
            if (alpha) {
              var t = y * ca + x * sa;
              x = x * ca - y * sa;
              y = t;
            }
            return [x / kx, y / ky];
          };
          projection2.stream = function(stream) {
            return cache && cacheStream === stream ? cache : cache = transform2(postclip(cacheStream = stream));
          };
          projection2.postclip = function(_) {
            return arguments.length ? (postclip = _, x02 = y02 = x12 = y12 = null, reset()) : postclip;
          };
          projection2.clipExtent = function(_) {
            return arguments.length ? (postclip = _ == null ? (x02 = y02 = x12 = y12 = null, identity) : clipRectangle(x02 = +_[0][0], y02 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reset()) : x02 == null ? null : [[x02, y02], [x12, y12]];
          };
          projection2.scale = function(_) {
            return arguments.length ? (k = +_, reset()) : k;
          };
          projection2.translate = function(_) {
            return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
          };
          projection2.angle = function(_) {
            return arguments.length ? (alpha = _ % 360 * radians, sa = sin(alpha), ca = cos(alpha), reset()) : alpha * degrees;
          };
          projection2.reflectX = function(_) {
            return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
          };
          projection2.reflectY = function(_) {
            return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
          };
          projection2.fitExtent = function(extent2, object2) {
            return fitExtent(projection2, extent2, object2);
          };
          projection2.fitSize = function(size, object2) {
            return fitSize(projection2, size, object2);
          };
          projection2.fitWidth = function(width, object2) {
            return fitWidth(projection2, width, object2);
          };
          projection2.fitHeight = function(height, object2) {
            return fitHeight(projection2, height, object2);
          };
          return projection2;
        }
        function naturalEarth1Raw(lambda, phi) {
          var phi2 = phi * phi, phi4 = phi2 * phi2;
          return [
            lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (3971e-6 * phi2 - 1529e-6 * phi4))),
            phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4)))
          ];
        }
        naturalEarth1Raw.invert = function(x, y) {
          var phi = y, i = 25, delta;
          do {
            var phi2 = phi * phi, phi4 = phi2 * phi2;
            phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 5916e-6 * 11 * phi4)));
          } while (abs(delta) > epsilon && --i > 0);
          return [
            x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (3971e-6 - 1529e-6 * phi2)))),
            phi
          ];
        };
        function naturalEarth1() {
          return projection(naturalEarth1Raw).scale(175.295);
        }
        function orthographicRaw(x, y) {
          return [cos(y) * sin(x), sin(y)];
        }
        orthographicRaw.invert = azimuthalInvert(asin);
        function orthographic() {
          return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon);
        }
        function stereographicRaw(x, y) {
          var cy = cos(y), k = 1 + cos(x) * cy;
          return [cy * sin(x) / k, sin(y) / k];
        }
        stereographicRaw.invert = azimuthalInvert(function(z) {
          return 2 * atan(z);
        });
        function stereographic() {
          return projection(stereographicRaw).scale(250).clipAngle(142);
        }
        function transverseMercatorRaw(lambda, phi) {
          return [log(tan((halfPi + phi) / 2)), -lambda];
        }
        transverseMercatorRaw.invert = function(x, y) {
          return [-y, 2 * atan(exp(x)) - halfPi];
        };
        function transverseMercator() {
          var m = mercatorProjection(transverseMercatorRaw), center = m.center, rotate = m.rotate;
          m.center = function(_) {
            return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
          };
          m.rotate = function(_) {
            return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
          };
          return rotate([0, 0, 90]).scale(159.155);
        }
        exports2.geoAlbers = albers;
        exports2.geoAlbersUsa = albersUsa;
        exports2.geoArea = area;
        exports2.geoAzimuthalEqualArea = azimuthalEqualArea;
        exports2.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
        exports2.geoAzimuthalEquidistant = azimuthalEquidistant;
        exports2.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
        exports2.geoBounds = bounds;
        exports2.geoCentroid = centroid;
        exports2.geoCircle = circle;
        exports2.geoClipAntimeridian = clipAntimeridian;
        exports2.geoClipCircle = clipCircle;
        exports2.geoClipExtent = extent;
        exports2.geoClipRectangle = clipRectangle;
        exports2.geoConicConformal = conicConformal;
        exports2.geoConicConformalRaw = conicConformalRaw;
        exports2.geoConicEqualArea = conicEqualArea;
        exports2.geoConicEqualAreaRaw = conicEqualAreaRaw;
        exports2.geoConicEquidistant = conicEquidistant;
        exports2.geoConicEquidistantRaw = conicEquidistantRaw;
        exports2.geoContains = contains;
        exports2.geoDistance = distance;
        exports2.geoEqualEarth = equalEarth;
        exports2.geoEqualEarthRaw = equalEarthRaw;
        exports2.geoEquirectangular = equirectangular;
        exports2.geoEquirectangularRaw = equirectangularRaw;
        exports2.geoGnomonic = gnomonic;
        exports2.geoGnomonicRaw = gnomonicRaw;
        exports2.geoGraticule = graticule;
        exports2.geoGraticule10 = graticule10;
        exports2.geoIdentity = identity$1;
        exports2.geoInterpolate = interpolate;
        exports2.geoLength = length;
        exports2.geoMercator = mercator;
        exports2.geoMercatorRaw = mercatorRaw;
        exports2.geoNaturalEarth1 = naturalEarth1;
        exports2.geoNaturalEarth1Raw = naturalEarth1Raw;
        exports2.geoOrthographic = orthographic;
        exports2.geoOrthographicRaw = orthographicRaw;
        exports2.geoPath = index;
        exports2.geoProjection = projection;
        exports2.geoProjectionMutator = projectionMutator;
        exports2.geoRotation = rotation;
        exports2.geoStereographic = stereographic;
        exports2.geoStereographicRaw = stereographicRaw;
        exports2.geoStream = geoStream;
        exports2.geoTransform = transform;
        exports2.geoTransverseMercator = transverseMercator;
        exports2.geoTransverseMercatorRaw = transverseMercatorRaw;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-hierarchy-npm-2.0.0-7f20474878-594bea104d.zip/node_modules/d3-hierarchy/dist/d3-hierarchy.js
  var require_d3_hierarchy = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-hierarchy-npm-2.0.0-7f20474878-594bea104d.zip/node_modules/d3-hierarchy/dist/d3-hierarchy.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        function defaultSeparation(a, b) {
          return a.parent === b.parent ? 1 : 2;
        }
        function meanX(children) {
          return children.reduce(meanXReduce, 0) / children.length;
        }
        function meanXReduce(x, c) {
          return x + c.x;
        }
        function maxY(children) {
          return 1 + children.reduce(maxYReduce, 0);
        }
        function maxYReduce(y, c) {
          return Math.max(y, c.y);
        }
        function leafLeft(node) {
          var children;
          while (children = node.children)
            node = children[0];
          return node;
        }
        function leafRight(node) {
          var children;
          while (children = node.children)
            node = children[children.length - 1];
          return node;
        }
        function cluster() {
          var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
          function cluster2(root) {
            var previousNode, x = 0;
            root.eachAfter(function(node) {
              var children = node.children;
              if (children) {
                node.x = meanX(children);
                node.y = maxY(children);
              } else {
                node.x = previousNode ? x += separation(node, previousNode) : 0;
                node.y = 0;
                previousNode = node;
              }
            });
            var left = leafLeft(root), right = leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
            return root.eachAfter(nodeSize ? function(node) {
              node.x = (node.x - root.x) * dx;
              node.y = (root.y - node.y) * dy;
            } : function(node) {
              node.x = (node.x - x0) / (x1 - x0) * dx;
              node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
            });
          }
          cluster2.separation = function(x) {
            return arguments.length ? (separation = x, cluster2) : separation;
          };
          cluster2.size = function(x) {
            return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster2) : nodeSize ? null : [dx, dy];
          };
          cluster2.nodeSize = function(x) {
            return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster2) : nodeSize ? [dx, dy] : null;
          };
          return cluster2;
        }
        function count(node) {
          var sum = 0, children = node.children, i = children && children.length;
          if (!i)
            sum = 1;
          else
            while (--i >= 0)
              sum += children[i].value;
          node.value = sum;
        }
        function node_count() {
          return this.eachAfter(count);
        }
        function node_each(callback, that) {
          let index2 = -1;
          for (const node of this) {
            callback.call(that, node, ++index2, this);
          }
          return this;
        }
        function node_eachBefore(callback, that) {
          var node = this, nodes = [node], children, i, index2 = -1;
          while (node = nodes.pop()) {
            callback.call(that, node, ++index2, this);
            if (children = node.children) {
              for (i = children.length - 1; i >= 0; --i) {
                nodes.push(children[i]);
              }
            }
          }
          return this;
        }
        function node_eachAfter(callback, that) {
          var node = this, nodes = [node], next = [], children, i, n, index2 = -1;
          while (node = nodes.pop()) {
            next.push(node);
            if (children = node.children) {
              for (i = 0, n = children.length; i < n; ++i) {
                nodes.push(children[i]);
              }
            }
          }
          while (node = next.pop()) {
            callback.call(that, node, ++index2, this);
          }
          return this;
        }
        function node_find(callback, that) {
          let index2 = -1;
          for (const node of this) {
            if (callback.call(that, node, ++index2, this)) {
              return node;
            }
          }
        }
        function node_sum(value) {
          return this.eachAfter(function(node) {
            var sum = +value(node.data) || 0, children = node.children, i = children && children.length;
            while (--i >= 0)
              sum += children[i].value;
            node.value = sum;
          });
        }
        function node_sort(compare) {
          return this.eachBefore(function(node) {
            if (node.children) {
              node.children.sort(compare);
            }
          });
        }
        function node_path(end) {
          var start = this, ancestor = leastCommonAncestor(start, end), nodes = [start];
          while (start !== ancestor) {
            start = start.parent;
            nodes.push(start);
          }
          var k = nodes.length;
          while (end !== ancestor) {
            nodes.splice(k, 0, end);
            end = end.parent;
          }
          return nodes;
        }
        function leastCommonAncestor(a, b) {
          if (a === b)
            return a;
          var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
          a = aNodes.pop();
          b = bNodes.pop();
          while (a === b) {
            c = a;
            a = aNodes.pop();
            b = bNodes.pop();
          }
          return c;
        }
        function node_ancestors() {
          var node = this, nodes = [node];
          while (node = node.parent) {
            nodes.push(node);
          }
          return nodes;
        }
        function node_descendants() {
          return Array.from(this);
        }
        function node_leaves() {
          var leaves = [];
          this.eachBefore(function(node) {
            if (!node.children) {
              leaves.push(node);
            }
          });
          return leaves;
        }
        function node_links() {
          var root = this, links = [];
          root.each(function(node) {
            if (node !== root) {
              links.push({ source: node.parent, target: node });
            }
          });
          return links;
        }
        function* node_iterator() {
          var node = this, current, next = [node], children, i, n;
          do {
            current = next.reverse(), next = [];
            while (node = current.pop()) {
              yield node;
              if (children = node.children) {
                for (i = 0, n = children.length; i < n; ++i) {
                  next.push(children[i]);
                }
              }
            }
          } while (next.length);
        }
        function hierarchy(data, children) {
          if (data instanceof Map) {
            data = [void 0, data];
            if (children === void 0)
              children = mapChildren;
          } else if (children === void 0) {
            children = objectChildren;
          }
          var root = new Node(data), node, nodes = [root], child, childs, i, n;
          while (node = nodes.pop()) {
            if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
              node.children = childs;
              for (i = n - 1; i >= 0; --i) {
                nodes.push(child = childs[i] = new Node(childs[i]));
                child.parent = node;
                child.depth = node.depth + 1;
              }
            }
          }
          return root.eachBefore(computeHeight);
        }
        function node_copy() {
          return hierarchy(this).eachBefore(copyData);
        }
        function objectChildren(d) {
          return d.children;
        }
        function mapChildren(d) {
          return Array.isArray(d) ? d[1] : null;
        }
        function copyData(node) {
          if (node.data.value !== void 0)
            node.value = node.data.value;
          node.data = node.data.data;
        }
        function computeHeight(node) {
          var height = 0;
          do
            node.height = height;
          while ((node = node.parent) && node.height < ++height);
        }
        function Node(data) {
          this.data = data;
          this.depth = this.height = 0;
          this.parent = null;
        }
        Node.prototype = hierarchy.prototype = {
          constructor: Node,
          count: node_count,
          each: node_each,
          eachAfter: node_eachAfter,
          eachBefore: node_eachBefore,
          find: node_find,
          sum: node_sum,
          sort: node_sort,
          path: node_path,
          ancestors: node_ancestors,
          descendants: node_descendants,
          leaves: node_leaves,
          links: node_links,
          copy: node_copy,
          [Symbol.iterator]: node_iterator
        };
        function array(x) {
          return typeof x === "object" && "length" in x ? x : Array.from(x);
        }
        function shuffle(array2) {
          var m = array2.length, t, i;
          while (m) {
            i = Math.random() * m-- | 0;
            t = array2[m];
            array2[m] = array2[i];
            array2[i] = t;
          }
          return array2;
        }
        function enclose(circles) {
          var i = 0, n = (circles = shuffle(Array.from(circles))).length, B = [], p, e;
          while (i < n) {
            p = circles[i];
            if (e && enclosesWeak(e, p))
              ++i;
            else
              e = encloseBasis(B = extendBasis(B, p)), i = 0;
          }
          return e;
        }
        function extendBasis(B, p) {
          var i, j;
          if (enclosesWeakAll(p, B))
            return [p];
          for (i = 0; i < B.length; ++i) {
            if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
              return [B[i], p];
            }
          }
          for (i = 0; i < B.length - 1; ++i) {
            for (j = i + 1; j < B.length; ++j) {
              if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
                return [B[i], B[j], p];
              }
            }
          }
          throw new Error();
        }
        function enclosesNot(a, b) {
          var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
          return dr < 0 || dr * dr < dx * dx + dy * dy;
        }
        function enclosesWeak(a, b) {
          var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;
          return dr > 0 && dr * dr > dx * dx + dy * dy;
        }
        function enclosesWeakAll(a, B) {
          for (var i = 0; i < B.length; ++i) {
            if (!enclosesWeak(a, B[i])) {
              return false;
            }
          }
          return true;
        }
        function encloseBasis(B) {
          switch (B.length) {
            case 1:
              return encloseBasis1(B[0]);
            case 2:
              return encloseBasis2(B[0], B[1]);
            case 3:
              return encloseBasis3(B[0], B[1], B[2]);
          }
        }
        function encloseBasis1(a) {
          return {
            x: a.x,
            y: a.y,
            r: a.r
          };
        }
        function encloseBasis2(a, b) {
          var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
          return {
            x: (x1 + x2 + x21 / l * r21) / 2,
            y: (y1 + y2 + y21 / l * r21) / 2,
            r: (l + r1 + r2) / 2
          };
        }
        function encloseBasis3(a, b, c) {
          var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x3 = c.x, y3 = c.y, r3 = c.r, a2 = x1 - x2, a3 = x1 - x3, b2 = y1 - y2, b3 = y1 - y3, c2 = r2 - r1, c3 = r3 - r1, d1 = x1 * x1 + y1 * y1 - r1 * r1, d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2, d32 = d1 - x3 * x3 - y3 * y3 + r3 * r3, ab = a3 * b2 - a2 * b3, xa = (b2 * d32 - b3 * d2) / (ab * 2) - x1, xb = (b3 * c2 - b2 * c3) / ab, ya = (a3 * d2 - a2 * d32) / (ab * 2) - y1, yb = (a2 * c3 - a3 * c2) / ab, A = xb * xb + yb * yb - 1, B = 2 * (r1 + xa * xb + ya * yb), C = xa * xa + ya * ya - r1 * r1, r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
          return {
            x: x1 + xa + xb * r,
            y: y1 + ya + yb * r,
            r
          };
        }
        function place(b, a, c) {
          var dx = b.x - a.x, x, a2, dy = b.y - a.y, y, b2, d2 = dx * dx + dy * dy;
          if (d2) {
            a2 = a.r + c.r, a2 *= a2;
            b2 = b.r + c.r, b2 *= b2;
            if (a2 > b2) {
              x = (d2 + b2 - a2) / (2 * d2);
              y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
              c.x = b.x - x * dx - y * dy;
              c.y = b.y - x * dy + y * dx;
            } else {
              x = (d2 + a2 - b2) / (2 * d2);
              y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
              c.x = a.x + x * dx - y * dy;
              c.y = a.y + x * dy + y * dx;
            }
          } else {
            c.x = a.x + c.r;
            c.y = a.y;
          }
        }
        function intersects(a, b) {
          var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
          return dr > 0 && dr * dr > dx * dx + dy * dy;
        }
        function score(node) {
          var a = node._, b = node.next._, ab = a.r + b.r, dx = (a.x * b.r + b.x * a.r) / ab, dy = (a.y * b.r + b.y * a.r) / ab;
          return dx * dx + dy * dy;
        }
        function Node$1(circle) {
          this._ = circle;
          this.next = null;
          this.previous = null;
        }
        function packEnclose(circles) {
          if (!(n = (circles = array(circles)).length))
            return 0;
          var a, b, c, n, aa, ca, i, j, k, sj, sk;
          a = circles[0], a.x = 0, a.y = 0;
          if (!(n > 1))
            return a.r;
          b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
          if (!(n > 2))
            return a.r + b.r;
          place(b, a, c = circles[2]);
          a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
          a.next = c.previous = b;
          b.next = a.previous = c;
          c.next = b.previous = a;
          pack:
            for (i = 3; i < n; ++i) {
              place(a._, b._, c = circles[i]), c = new Node$1(c);
              j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
              do {
                if (sj <= sk) {
                  if (intersects(j._, c._)) {
                    b = j, a.next = b, b.previous = a, --i;
                    continue pack;
                  }
                  sj += j._.r, j = j.next;
                } else {
                  if (intersects(k._, c._)) {
                    a = k, a.next = b, b.previous = a, --i;
                    continue pack;
                  }
                  sk += k._.r, k = k.previous;
                }
              } while (j !== k.next);
              c.previous = a, c.next = b, a.next = b.previous = b = c;
              aa = score(a);
              while ((c = c.next) !== b) {
                if ((ca = score(c)) < aa) {
                  a = c, aa = ca;
                }
              }
              b = a.next;
            }
          a = [b._], c = b;
          while ((c = c.next) !== b)
            a.push(c._);
          c = enclose(a);
          for (i = 0; i < n; ++i)
            a = circles[i], a.x -= c.x, a.y -= c.y;
          return c.r;
        }
        function siblings(circles) {
          packEnclose(circles);
          return circles;
        }
        function optional(f) {
          return f == null ? null : required(f);
        }
        function required(f) {
          if (typeof f !== "function")
            throw new Error();
          return f;
        }
        function constantZero() {
          return 0;
        }
        function constant(x) {
          return function() {
            return x;
          };
        }
        function defaultRadius(d) {
          return Math.sqrt(d.value);
        }
        function index() {
          var radius = null, dx = 1, dy = 1, padding = constantZero;
          function pack(root) {
            root.x = dx / 2, root.y = dy / 2;
            if (radius) {
              root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
            } else {
              root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
            }
            return root;
          }
          pack.radius = function(x) {
            return arguments.length ? (radius = optional(x), pack) : radius;
          };
          pack.size = function(x) {
            return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
          };
          pack.padding = function(x) {
            return arguments.length ? (padding = typeof x === "function" ? x : constant(+x), pack) : padding;
          };
          return pack;
        }
        function radiusLeaf(radius) {
          return function(node) {
            if (!node.children) {
              node.r = Math.max(0, +radius(node) || 0);
            }
          };
        }
        function packChildren(padding, k) {
          return function(node) {
            if (children = node.children) {
              var children, i, n = children.length, r = padding(node) * k || 0, e;
              if (r)
                for (i = 0; i < n; ++i)
                  children[i].r += r;
              e = packEnclose(children);
              if (r)
                for (i = 0; i < n; ++i)
                  children[i].r -= r;
              node.r = e + r;
            }
          };
        }
        function translateChild(k) {
          return function(node) {
            var parent = node.parent;
            node.r *= k;
            if (parent) {
              node.x = parent.x + k * node.x;
              node.y = parent.y + k * node.y;
            }
          };
        }
        function roundNode(node) {
          node.x0 = Math.round(node.x0);
          node.y0 = Math.round(node.y0);
          node.x1 = Math.round(node.x1);
          node.y1 = Math.round(node.y1);
        }
        function treemapDice(parent, x0, y0, x1, y1) {
          var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;
          while (++i < n) {
            node = nodes[i], node.y0 = y0, node.y1 = y1;
            node.x0 = x0, node.x1 = x0 += node.value * k;
          }
        }
        function partition() {
          var dx = 1, dy = 1, padding = 0, round = false;
          function partition2(root) {
            var n = root.height + 1;
            root.x0 = root.y0 = padding;
            root.x1 = dx;
            root.y1 = dy / n;
            root.eachBefore(positionNode(dy, n));
            if (round)
              root.eachBefore(roundNode);
            return root;
          }
          function positionNode(dy2, n) {
            return function(node) {
              if (node.children) {
                treemapDice(node, node.x0, dy2 * (node.depth + 1) / n, node.x1, dy2 * (node.depth + 2) / n);
              }
              var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
              if (x1 < x0)
                x0 = x1 = (x0 + x1) / 2;
              if (y1 < y0)
                y0 = y1 = (y0 + y1) / 2;
              node.x0 = x0;
              node.y0 = y0;
              node.x1 = x1;
              node.y1 = y1;
            };
          }
          partition2.round = function(x) {
            return arguments.length ? (round = !!x, partition2) : round;
          };
          partition2.size = function(x) {
            return arguments.length ? (dx = +x[0], dy = +x[1], partition2) : [dx, dy];
          };
          partition2.padding = function(x) {
            return arguments.length ? (padding = +x, partition2) : padding;
          };
          return partition2;
        }
        var preroot = { depth: -1 }, ambiguous = {};
        function defaultId(d) {
          return d.id;
        }
        function defaultParentId(d) {
          return d.parentId;
        }
        function stratify() {
          var id = defaultId, parentId = defaultParentId;
          function stratify2(data) {
            var nodes = Array.from(data), n = nodes.length, d, i, root, parent, node, nodeId, nodeKey, nodeByKey = /* @__PURE__ */ new Map();
            for (i = 0; i < n; ++i) {
              d = nodes[i], node = nodes[i] = new Node(d);
              if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
                nodeKey = node.id = nodeId;
                nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
              }
              if ((nodeId = parentId(d, i, data)) != null && (nodeId += "")) {
                node.parent = nodeId;
              }
            }
            for (i = 0; i < n; ++i) {
              node = nodes[i];
              if (nodeId = node.parent) {
                parent = nodeByKey.get(nodeId);
                if (!parent)
                  throw new Error("missing: " + nodeId);
                if (parent === ambiguous)
                  throw new Error("ambiguous: " + nodeId);
                if (parent.children)
                  parent.children.push(node);
                else
                  parent.children = [node];
                node.parent = parent;
              } else {
                if (root)
                  throw new Error("multiple roots");
                root = node;
              }
            }
            if (!root)
              throw new Error("no root");
            root.parent = preroot;
            root.eachBefore(function(node2) {
              node2.depth = node2.parent.depth + 1;
              --n;
            }).eachBefore(computeHeight);
            root.parent = null;
            if (n > 0)
              throw new Error("cycle");
            return root;
          }
          stratify2.id = function(x) {
            return arguments.length ? (id = required(x), stratify2) : id;
          };
          stratify2.parentId = function(x) {
            return arguments.length ? (parentId = required(x), stratify2) : parentId;
          };
          return stratify2;
        }
        function defaultSeparation$1(a, b) {
          return a.parent === b.parent ? 1 : 2;
        }
        function nextLeft(v) {
          var children = v.children;
          return children ? children[0] : v.t;
        }
        function nextRight(v) {
          var children = v.children;
          return children ? children[children.length - 1] : v.t;
        }
        function moveSubtree(wm, wp, shift) {
          var change = shift / (wp.i - wm.i);
          wp.c -= change;
          wp.s += shift;
          wm.c += change;
          wp.z += shift;
          wp.m += shift;
        }
        function executeShifts(v) {
          var shift = 0, change = 0, children = v.children, i = children.length, w;
          while (--i >= 0) {
            w = children[i];
            w.z += shift;
            w.m += shift;
            shift += w.s + (change += w.c);
          }
        }
        function nextAncestor(vim, v, ancestor) {
          return vim.a.parent === v.parent ? vim.a : ancestor;
        }
        function TreeNode(node, i) {
          this._ = node;
          this.parent = null;
          this.children = null;
          this.A = null;
          this.a = this;
          this.z = 0;
          this.m = 0;
          this.c = 0;
          this.s = 0;
          this.t = null;
          this.i = i;
        }
        TreeNode.prototype = Object.create(Node.prototype);
        function treeRoot(root) {
          var tree2 = new TreeNode(root, 0), node, nodes = [tree2], child, children, i, n;
          while (node = nodes.pop()) {
            if (children = node._.children) {
              node.children = new Array(n = children.length);
              for (i = n - 1; i >= 0; --i) {
                nodes.push(child = node.children[i] = new TreeNode(children[i], i));
                child.parent = node;
              }
            }
          }
          (tree2.parent = new TreeNode(null, 0)).children = [tree2];
          return tree2;
        }
        function tree() {
          var separation = defaultSeparation$1, dx = 1, dy = 1, nodeSize = null;
          function tree2(root) {
            var t = treeRoot(root);
            t.eachAfter(firstWalk), t.parent.m = -t.z;
            t.eachBefore(secondWalk);
            if (nodeSize)
              root.eachBefore(sizeNode);
            else {
              var left = root, right = root, bottom = root;
              root.eachBefore(function(node) {
                if (node.x < left.x)
                  left = node;
                if (node.x > right.x)
                  right = node;
                if (node.depth > bottom.depth)
                  bottom = node;
              });
              var s = left === right ? 1 : separation(left, right) / 2, tx = s - left.x, kx = dx / (right.x + s + tx), ky = dy / (bottom.depth || 1);
              root.eachBefore(function(node) {
                node.x = (node.x + tx) * kx;
                node.y = node.depth * ky;
              });
            }
            return root;
          }
          function firstWalk(v) {
            var children = v.children, siblings2 = v.parent.children, w = v.i ? siblings2[v.i - 1] : null;
            if (children) {
              executeShifts(v);
              var midpoint = (children[0].z + children[children.length - 1].z) / 2;
              if (w) {
                v.z = w.z + separation(v._, w._);
                v.m = v.z - midpoint;
              } else {
                v.z = midpoint;
              }
            } else if (w) {
              v.z = w.z + separation(v._, w._);
            }
            v.parent.A = apportion(v, w, v.parent.A || siblings2[0]);
          }
          function secondWalk(v) {
            v._.x = v.z + v.parent.m;
            v.m += v.parent.m;
          }
          function apportion(v, w, ancestor) {
            if (w) {
              var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
              while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
                vom = nextLeft(vom);
                vop = nextRight(vop);
                vop.a = v;
                shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
                if (shift > 0) {
                  moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
                  sip += shift;
                  sop += shift;
                }
                sim += vim.m;
                sip += vip.m;
                som += vom.m;
                sop += vop.m;
              }
              if (vim && !nextRight(vop)) {
                vop.t = vim;
                vop.m += sim - sop;
              }
              if (vip && !nextLeft(vom)) {
                vom.t = vip;
                vom.m += sip - som;
                ancestor = v;
              }
            }
            return ancestor;
          }
          function sizeNode(node) {
            node.x *= dx;
            node.y = node.depth * dy;
          }
          tree2.separation = function(x) {
            return arguments.length ? (separation = x, tree2) : separation;
          };
          tree2.size = function(x) {
            return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree2) : nodeSize ? null : [dx, dy];
          };
          tree2.nodeSize = function(x) {
            return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree2) : nodeSize ? [dx, dy] : null;
          };
          return tree2;
        }
        function treemapSlice(parent, x0, y0, x1, y1) {
          var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;
          while (++i < n) {
            node = nodes[i], node.x0 = x0, node.x1 = x1;
            node.y0 = y0, node.y1 = y0 += node.value * k;
          }
        }
        var phi = (1 + Math.sqrt(5)) / 2;
        function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
          var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
          while (i0 < n) {
            dx = x1 - x0, dy = y1 - y0;
            do
              sumValue = nodes[i1++].value;
            while (!sumValue && i1 < n);
            minValue = maxValue = sumValue;
            alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
            beta = sumValue * sumValue * alpha;
            minRatio = Math.max(maxValue / beta, beta / minValue);
            for (; i1 < n; ++i1) {
              sumValue += nodeValue = nodes[i1].value;
              if (nodeValue < minValue)
                minValue = nodeValue;
              if (nodeValue > maxValue)
                maxValue = nodeValue;
              beta = sumValue * sumValue * alpha;
              newRatio = Math.max(maxValue / beta, beta / minValue);
              if (newRatio > minRatio) {
                sumValue -= nodeValue;
                break;
              }
              minRatio = newRatio;
            }
            rows.push(row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) });
            if (row.dice)
              treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
            else
              treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
            value -= sumValue, i0 = i1;
          }
          return rows;
        }
        var squarify = function custom(ratio) {
          function squarify2(parent, x0, y0, x1, y1) {
            squarifyRatio(ratio, parent, x0, y0, x1, y1);
          }
          squarify2.ratio = function(x) {
            return custom((x = +x) > 1 ? x : 1);
          };
          return squarify2;
        }(phi);
        function index$1() {
          var tile = squarify, round = false, dx = 1, dy = 1, paddingStack = [0], paddingInner = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
          function treemap(root) {
            root.x0 = root.y0 = 0;
            root.x1 = dx;
            root.y1 = dy;
            root.eachBefore(positionNode);
            paddingStack = [0];
            if (round)
              root.eachBefore(roundNode);
            return root;
          }
          function positionNode(node) {
            var p = paddingStack[node.depth], x0 = node.x0 + p, y0 = node.y0 + p, x1 = node.x1 - p, y1 = node.y1 - p;
            if (x1 < x0)
              x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0)
              y0 = y1 = (y0 + y1) / 2;
            node.x0 = x0;
            node.y0 = y0;
            node.x1 = x1;
            node.y1 = y1;
            if (node.children) {
              p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
              x0 += paddingLeft(node) - p;
              y0 += paddingTop(node) - p;
              x1 -= paddingRight(node) - p;
              y1 -= paddingBottom(node) - p;
              if (x1 < x0)
                x0 = x1 = (x0 + x1) / 2;
              if (y1 < y0)
                y0 = y1 = (y0 + y1) / 2;
              tile(node, x0, y0, x1, y1);
            }
          }
          treemap.round = function(x) {
            return arguments.length ? (round = !!x, treemap) : round;
          };
          treemap.size = function(x) {
            return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
          };
          treemap.tile = function(x) {
            return arguments.length ? (tile = required(x), treemap) : tile;
          };
          treemap.padding = function(x) {
            return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
          };
          treemap.paddingInner = function(x) {
            return arguments.length ? (paddingInner = typeof x === "function" ? x : constant(+x), treemap) : paddingInner;
          };
          treemap.paddingOuter = function(x) {
            return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
          };
          treemap.paddingTop = function(x) {
            return arguments.length ? (paddingTop = typeof x === "function" ? x : constant(+x), treemap) : paddingTop;
          };
          treemap.paddingRight = function(x) {
            return arguments.length ? (paddingRight = typeof x === "function" ? x : constant(+x), treemap) : paddingRight;
          };
          treemap.paddingBottom = function(x) {
            return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant(+x), treemap) : paddingBottom;
          };
          treemap.paddingLeft = function(x) {
            return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant(+x), treemap) : paddingLeft;
          };
          return treemap;
        }
        function binary(parent, x0, y0, x1, y1) {
          var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);
          for (sums[0] = sum = i = 0; i < n; ++i) {
            sums[i + 1] = sum += nodes[i].value;
          }
          partition2(0, n, parent.value, x0, y0, x1, y1);
          function partition2(i2, j, value, x02, y02, x12, y12) {
            if (i2 >= j - 1) {
              var node = nodes[i2];
              node.x0 = x02, node.y0 = y02;
              node.x1 = x12, node.y1 = y12;
              return;
            }
            var valueOffset = sums[i2], valueTarget = value / 2 + valueOffset, k = i2 + 1, hi = j - 1;
            while (k < hi) {
              var mid = k + hi >>> 1;
              if (sums[mid] < valueTarget)
                k = mid + 1;
              else
                hi = mid;
            }
            if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i2 + 1 < k)
              --k;
            var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;
            if (x12 - x02 > y12 - y02) {
              var xk = value ? (x02 * valueRight + x12 * valueLeft) / value : x12;
              partition2(i2, k, valueLeft, x02, y02, xk, y12);
              partition2(k, j, valueRight, xk, y02, x12, y12);
            } else {
              var yk = value ? (y02 * valueRight + y12 * valueLeft) / value : y12;
              partition2(i2, k, valueLeft, x02, y02, x12, yk);
              partition2(k, j, valueRight, x02, yk, x12, y12);
            }
          }
        }
        function sliceDice(parent, x0, y0, x1, y1) {
          (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
        }
        var resquarify = function custom(ratio) {
          function resquarify2(parent, x0, y0, x1, y1) {
            if ((rows = parent._squarify) && rows.ratio === ratio) {
              var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;
              while (++j < m) {
                row = rows[j], nodes = row.children;
                for (i = row.value = 0, n = nodes.length; i < n; ++i)
                  row.value += nodes[i].value;
                if (row.dice)
                  treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);
                else
                  treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);
                value -= row.value;
              }
            } else {
              parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
              rows.ratio = ratio;
            }
          }
          resquarify2.ratio = function(x) {
            return custom((x = +x) > 1 ? x : 1);
          };
          return resquarify2;
        }(phi);
        exports2.cluster = cluster;
        exports2.hierarchy = hierarchy;
        exports2.pack = index;
        exports2.packEnclose = enclose;
        exports2.packSiblings = siblings;
        exports2.partition = partition;
        exports2.stratify = stratify;
        exports2.tree = tree;
        exports2.treemap = index$1;
        exports2.treemapBinary = binary;
        exports2.treemapDice = treemapDice;
        exports2.treemapResquarify = resquarify;
        exports2.treemapSlice = treemapSlice;
        exports2.treemapSliceDice = sliceDice;
        exports2.treemapSquarify = squarify;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-polygon-npm-2.0.0-5dd269112e-aeabedd8c7.zip/node_modules/d3-polygon/dist/d3-polygon.js
  var require_d3_polygon = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-polygon-npm-2.0.0-5dd269112e-aeabedd8c7.zip/node_modules/d3-polygon/dist/d3-polygon.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        function area(polygon) {
          var i = -1, n = polygon.length, a, b = polygon[n - 1], area2 = 0;
          while (++i < n) {
            a = b;
            b = polygon[i];
            area2 += a[1] * b[0] - a[0] * b[1];
          }
          return area2 / 2;
        }
        function centroid(polygon) {
          var i = -1, n = polygon.length, x = 0, y = 0, a, b = polygon[n - 1], c, k = 0;
          while (++i < n) {
            a = b;
            b = polygon[i];
            k += c = a[0] * b[1] - b[0] * a[1];
            x += (a[0] + b[0]) * c;
            y += (a[1] + b[1]) * c;
          }
          return k *= 3, [x / k, y / k];
        }
        function cross(a, b, c) {
          return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
        }
        function lexicographicOrder(a, b) {
          return a[0] - b[0] || a[1] - b[1];
        }
        function computeUpperHullIndexes(points) {
          const n = points.length, indexes = [0, 1];
          let size = 2, i;
          for (i = 2; i < n; ++i) {
            while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0)
              --size;
            indexes[size++] = i;
          }
          return indexes.slice(0, size);
        }
        function hull(points) {
          if ((n = points.length) < 3)
            return null;
          var i, n, sortedPoints = new Array(n), flippedPoints = new Array(n);
          for (i = 0; i < n; ++i)
            sortedPoints[i] = [+points[i][0], +points[i][1], i];
          sortedPoints.sort(lexicographicOrder);
          for (i = 0; i < n; ++i)
            flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];
          var upperIndexes = computeUpperHullIndexes(sortedPoints), lowerIndexes = computeUpperHullIndexes(flippedPoints);
          var skipLeft = lowerIndexes[0] === upperIndexes[0], skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1], hull2 = [];
          for (i = upperIndexes.length - 1; i >= 0; --i)
            hull2.push(points[sortedPoints[upperIndexes[i]][2]]);
          for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i)
            hull2.push(points[sortedPoints[lowerIndexes[i]][2]]);
          return hull2;
        }
        function contains(polygon, point) {
          var n = polygon.length, p = polygon[n - 1], x = point[0], y = point[1], x0 = p[0], y0 = p[1], x1, y1, inside = false;
          for (var i = 0; i < n; ++i) {
            p = polygon[i], x1 = p[0], y1 = p[1];
            if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)
              inside = !inside;
            x0 = x1, y0 = y1;
          }
          return inside;
        }
        function length(polygon) {
          var i = -1, n = polygon.length, b = polygon[n - 1], xa, ya, xb = b[0], yb = b[1], perimeter = 0;
          while (++i < n) {
            xa = xb;
            ya = yb;
            b = polygon[i];
            xb = b[0];
            yb = b[1];
            xa -= xb;
            ya -= yb;
            perimeter += Math.hypot(xa, ya);
          }
          return perimeter;
        }
        exports2.polygonArea = area;
        exports2.polygonCentroid = centroid;
        exports2.polygonContains = contains;
        exports2.polygonHull = hull;
        exports2.polygonLength = length;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-random-npm-2.2.2-d00bd139da-79931d642f.zip/node_modules/d3-random/dist/d3-random.js
  var require_d3_random = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-random-npm-2.2.2-d00bd139da-79931d642f.zip/node_modules/d3-random/dist/d3-random.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.d3 = global2.d3 || {}));
      })(exports, function(exports2) {
        "use strict";
        var defaultSource = Math.random;
        var uniform = function sourceRandomUniform(source) {
          function randomUniform(min, max) {
            min = min == null ? 0 : +min;
            max = max == null ? 1 : +max;
            if (arguments.length === 1)
              max = min, min = 0;
            else
              max -= min;
            return function() {
              return source() * max + min;
            };
          }
          randomUniform.source = sourceRandomUniform;
          return randomUniform;
        }(defaultSource);
        var int = function sourceRandomInt(source) {
          function randomInt(min, max) {
            if (arguments.length < 2)
              max = min, min = 0;
            min = Math.floor(min);
            max = Math.floor(max) - min;
            return function() {
              return Math.floor(source() * max + min);
            };
          }
          randomInt.source = sourceRandomInt;
          return randomInt;
        }(defaultSource);
        var normal = function sourceRandomNormal(source) {
          function randomNormal(mu, sigma) {
            var x, r;
            mu = mu == null ? 0 : +mu;
            sigma = sigma == null ? 1 : +sigma;
            return function() {
              var y;
              if (x != null)
                y = x, x = null;
              else
                do {
                  x = source() * 2 - 1;
                  y = source() * 2 - 1;
                  r = x * x + y * y;
                } while (!r || r > 1);
              return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
            };
          }
          randomNormal.source = sourceRandomNormal;
          return randomNormal;
        }(defaultSource);
        var logNormal = function sourceRandomLogNormal(source) {
          var N = normal.source(source);
          function randomLogNormal() {
            var randomNormal = N.apply(this, arguments);
            return function() {
              return Math.exp(randomNormal());
            };
          }
          randomLogNormal.source = sourceRandomLogNormal;
          return randomLogNormal;
        }(defaultSource);
        var irwinHall = function sourceRandomIrwinHall(source) {
          function randomIrwinHall(n) {
            if ((n = +n) <= 0)
              return () => 0;
            return function() {
              for (var sum = 0, i = n; i > 1; --i)
                sum += source();
              return sum + i * source();
            };
          }
          randomIrwinHall.source = sourceRandomIrwinHall;
          return randomIrwinHall;
        }(defaultSource);
        var bates = function sourceRandomBates(source) {
          var I = irwinHall.source(source);
          function randomBates(n) {
            if ((n = +n) === 0)
              return source;
            var randomIrwinHall = I(n);
            return function() {
              return randomIrwinHall() / n;
            };
          }
          randomBates.source = sourceRandomBates;
          return randomBates;
        }(defaultSource);
        var exponential = function sourceRandomExponential(source) {
          function randomExponential(lambda) {
            return function() {
              return -Math.log1p(-source()) / lambda;
            };
          }
          randomExponential.source = sourceRandomExponential;
          return randomExponential;
        }(defaultSource);
        var pareto = function sourceRandomPareto(source) {
          function randomPareto(alpha) {
            if ((alpha = +alpha) < 0)
              throw new RangeError("invalid alpha");
            alpha = 1 / -alpha;
            return function() {
              return Math.pow(1 - source(), alpha);
            };
          }
          randomPareto.source = sourceRandomPareto;
          return randomPareto;
        }(defaultSource);
        var bernoulli = function sourceRandomBernoulli(source) {
          function randomBernoulli(p) {
            if ((p = +p) < 0 || p > 1)
              throw new RangeError("invalid p");
            return function() {
              return Math.floor(source() + p);
            };
          }
          randomBernoulli.source = sourceRandomBernoulli;
          return randomBernoulli;
        }(defaultSource);
        var geometric = function sourceRandomGeometric(source) {
          function randomGeometric(p) {
            if ((p = +p) < 0 || p > 1)
              throw new RangeError("invalid p");
            if (p === 0)
              return () => Infinity;
            if (p === 1)
              return () => 1;
            p = Math.log1p(-p);
            return function() {
              return 1 + Math.floor(Math.log1p(-source()) / p);
            };
          }
          randomGeometric.source = sourceRandomGeometric;
          return randomGeometric;
        }(defaultSource);
        var gamma = function sourceRandomGamma(source) {
          var randomNormal = normal.source(source)();
          function randomGamma(k, theta) {
            if ((k = +k) < 0)
              throw new RangeError("invalid k");
            if (k === 0)
              return () => 0;
            theta = theta == null ? 1 : +theta;
            if (k === 1)
              return () => -Math.log1p(-source()) * theta;
            var d = (k < 1 ? k + 1 : k) - 1 / 3, c = 1 / (3 * Math.sqrt(d)), multiplier = k < 1 ? () => Math.pow(source(), 1 / k) : () => 1;
            return function() {
              do {
                do {
                  var x = randomNormal(), v = 1 + c * x;
                } while (v <= 0);
                v *= v * v;
                var u = 1 - source();
              } while (u >= 1 - 0.0331 * x * x * x * x && Math.log(u) >= 0.5 * x * x + d * (1 - v + Math.log(v)));
              return d * v * multiplier() * theta;
            };
          }
          randomGamma.source = sourceRandomGamma;
          return randomGamma;
        }(defaultSource);
        var beta = function sourceRandomBeta(source) {
          var G = gamma.source(source);
          function randomBeta(alpha, beta2) {
            var X = G(alpha), Y = G(beta2);
            return function() {
              var x = X();
              return x === 0 ? 0 : x / (x + Y());
            };
          }
          randomBeta.source = sourceRandomBeta;
          return randomBeta;
        }(defaultSource);
        var binomial = function sourceRandomBinomial(source) {
          var G = geometric.source(source), B = beta.source(source);
          function randomBinomial(n, p) {
            n = +n;
            if ((p = +p) >= 1)
              return () => n;
            if (p <= 0)
              return () => 0;
            return function() {
              var acc = 0, nn = n, pp = p;
              while (nn * pp > 16 && nn * (1 - pp) > 16) {
                var i = Math.floor((nn + 1) * pp), y = B(i, nn - i + 1)();
                if (y <= pp) {
                  acc += i;
                  nn -= i;
                  pp = (pp - y) / (1 - y);
                } else {
                  nn = i - 1;
                  pp /= y;
                }
              }
              var sign = pp < 0.5, pFinal = sign ? pp : 1 - pp, g = G(pFinal);
              for (var s = g(), k = 0; s <= nn; ++k)
                s += g();
              return acc + (sign ? k : nn - k);
            };
          }
          randomBinomial.source = sourceRandomBinomial;
          return randomBinomial;
        }(defaultSource);
        var weibull = function sourceRandomWeibull(source) {
          function randomWeibull(k, a, b) {
            var outerFunc;
            if ((k = +k) === 0) {
              outerFunc = (x) => -Math.log(x);
            } else {
              k = 1 / k;
              outerFunc = (x) => Math.pow(x, k);
            }
            a = a == null ? 0 : +a;
            b = b == null ? 1 : +b;
            return function() {
              return a + b * outerFunc(-Math.log1p(-source()));
            };
          }
          randomWeibull.source = sourceRandomWeibull;
          return randomWeibull;
        }(defaultSource);
        var cauchy = function sourceRandomCauchy(source) {
          function randomCauchy(a, b) {
            a = a == null ? 0 : +a;
            b = b == null ? 1 : +b;
            return function() {
              return a + b * Math.tan(Math.PI * source());
            };
          }
          randomCauchy.source = sourceRandomCauchy;
          return randomCauchy;
        }(defaultSource);
        var logistic = function sourceRandomLogistic(source) {
          function randomLogistic(a, b) {
            a = a == null ? 0 : +a;
            b = b == null ? 1 : +b;
            return function() {
              var u = source();
              return a + b * Math.log(u / (1 - u));
            };
          }
          randomLogistic.source = sourceRandomLogistic;
          return randomLogistic;
        }(defaultSource);
        var poisson = function sourceRandomPoisson(source) {
          var G = gamma.source(source), B = binomial.source(source);
          function randomPoisson(lambda) {
            return function() {
              var acc = 0, l = lambda;
              while (l > 16) {
                var n = Math.floor(0.875 * l), t = G(n)();
                if (t > l)
                  return acc + B(n - 1, l / t)();
                acc += n;
                l -= t;
              }
              for (var s = -Math.log1p(-source()), k = 0; s <= l; ++k)
                s -= Math.log1p(-source());
              return acc + k;
            };
          }
          randomPoisson.source = sourceRandomPoisson;
          return randomPoisson;
        }(defaultSource);
        const mul = 1664525;
        const inc = 1013904223;
        const eps = 1 / 4294967296;
        function lcg(seed = Math.random()) {
          let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;
          return () => (state = mul * state + inc | 0, eps * (state >>> 0));
        }
        exports2.randomBates = bates;
        exports2.randomBernoulli = bernoulli;
        exports2.randomBeta = beta;
        exports2.randomBinomial = binomial;
        exports2.randomCauchy = cauchy;
        exports2.randomExponential = exponential;
        exports2.randomGamma = gamma;
        exports2.randomGeometric = geometric;
        exports2.randomInt = int;
        exports2.randomIrwinHall = irwinHall;
        exports2.randomLcg = lcg;
        exports2.randomLogNormal = logNormal;
        exports2.randomLogistic = logistic;
        exports2.randomNormal = normal;
        exports2.randomPareto = pareto;
        exports2.randomPoisson = poisson;
        exports2.randomUniform = uniform;
        exports2.randomWeibull = weibull;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-time-npm-2.1.1-73fdf673f7-d1c7b9658c.zip/node_modules/d3-time/dist/d3-time.js
  var require_d3_time = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-time-npm-2.1.1-73fdf673f7-d1c7b9658c.zip/node_modules/d3-time/dist/d3-time.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_array()) : typeof define === "function" && define.amd ? define(["exports", "d3-array"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3));
      })(exports, function(exports2, d3Array) {
        "use strict";
        var t0 = new Date(), t1 = new Date();
        function newInterval(floori, offseti, count, field) {
          function interval(date) {
            return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
          }
          interval.floor = function(date) {
            return floori(date = new Date(+date)), date;
          };
          interval.ceil = function(date) {
            return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
          };
          interval.round = function(date) {
            var d0 = interval(date), d1 = interval.ceil(date);
            return date - d0 < d1 - date ? d0 : d1;
          };
          interval.offset = function(date, step) {
            return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
          };
          interval.range = function(start, stop, step) {
            var range = [], previous;
            start = interval.ceil(start);
            step = step == null ? 1 : Math.floor(step);
            if (!(start < stop) || !(step > 0))
              return range;
            do
              range.push(previous = new Date(+start)), offseti(start, step), floori(start);
            while (previous < start && start < stop);
            return range;
          };
          interval.filter = function(test) {
            return newInterval(function(date) {
              if (date >= date)
                while (floori(date), !test(date))
                  date.setTime(date - 1);
            }, function(date, step) {
              if (date >= date) {
                if (step < 0)
                  while (++step <= 0) {
                    while (offseti(date, -1), !test(date)) {
                    }
                  }
                else
                  while (--step >= 0) {
                    while (offseti(date, 1), !test(date)) {
                    }
                  }
              }
            });
          };
          if (count) {
            interval.count = function(start, end) {
              t0.setTime(+start), t1.setTime(+end);
              floori(t0), floori(t1);
              return Math.floor(count(t0, t1));
            };
            interval.every = function(step) {
              step = Math.floor(step);
              return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
                return field(d) % step === 0;
              } : function(d) {
                return interval.count(0, d) % step === 0;
              });
            };
          }
          return interval;
        }
        var millisecond = newInterval(function() {
        }, function(date, step) {
          date.setTime(+date + step);
        }, function(start, end) {
          return end - start;
        });
        millisecond.every = function(k) {
          k = Math.floor(k);
          if (!isFinite(k) || !(k > 0))
            return null;
          if (!(k > 1))
            return millisecond;
          return newInterval(function(date) {
            date.setTime(Math.floor(date / k) * k);
          }, function(date, step) {
            date.setTime(+date + step * k);
          }, function(start, end) {
            return (end - start) / k;
          });
        };
        var milliseconds = millisecond.range;
        const durationSecond = 1e3;
        const durationMinute = durationSecond * 60;
        const durationHour = durationMinute * 60;
        const durationDay = durationHour * 24;
        const durationWeek = durationDay * 7;
        const durationMonth = durationDay * 30;
        const durationYear = durationDay * 365;
        var second = newInterval(function(date) {
          date.setTime(date - date.getMilliseconds());
        }, function(date, step) {
          date.setTime(+date + step * durationSecond);
        }, function(start, end) {
          return (end - start) / durationSecond;
        }, function(date) {
          return date.getUTCSeconds();
        });
        var seconds = second.range;
        var minute = newInterval(function(date) {
          date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
        }, function(date, step) {
          date.setTime(+date + step * durationMinute);
        }, function(start, end) {
          return (end - start) / durationMinute;
        }, function(date) {
          return date.getMinutes();
        });
        var minutes = minute.range;
        var hour = newInterval(function(date) {
          date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
        }, function(date, step) {
          date.setTime(+date + step * durationHour);
        }, function(start, end) {
          return (end - start) / durationHour;
        }, function(date) {
          return date.getHours();
        });
        var hours = hour.range;
        var day = newInterval((date) => date.setHours(0, 0, 0, 0), (date, step) => date.setDate(date.getDate() + step), (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay, (date) => date.getDate() - 1);
        var days = day.range;
        function weekday(i) {
          return newInterval(function(date) {
            date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
            date.setHours(0, 0, 0, 0);
          }, function(date, step) {
            date.setDate(date.getDate() + step * 7);
          }, function(start, end) {
            return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
          });
        }
        var sunday = weekday(0);
        var monday = weekday(1);
        var tuesday = weekday(2);
        var wednesday = weekday(3);
        var thursday = weekday(4);
        var friday = weekday(5);
        var saturday = weekday(6);
        var sundays = sunday.range;
        var mondays = monday.range;
        var tuesdays = tuesday.range;
        var wednesdays = wednesday.range;
        var thursdays = thursday.range;
        var fridays = friday.range;
        var saturdays = saturday.range;
        var month = newInterval(function(date) {
          date.setDate(1);
          date.setHours(0, 0, 0, 0);
        }, function(date, step) {
          date.setMonth(date.getMonth() + step);
        }, function(start, end) {
          return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
        }, function(date) {
          return date.getMonth();
        });
        var months = month.range;
        var year = newInterval(function(date) {
          date.setMonth(0, 1);
          date.setHours(0, 0, 0, 0);
        }, function(date, step) {
          date.setFullYear(date.getFullYear() + step);
        }, function(start, end) {
          return end.getFullYear() - start.getFullYear();
        }, function(date) {
          return date.getFullYear();
        });
        year.every = function(k) {
          return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
            date.setFullYear(Math.floor(date.getFullYear() / k) * k);
            date.setMonth(0, 1);
            date.setHours(0, 0, 0, 0);
          }, function(date, step) {
            date.setFullYear(date.getFullYear() + step * k);
          });
        };
        var years = year.range;
        var utcMinute = newInterval(function(date) {
          date.setUTCSeconds(0, 0);
        }, function(date, step) {
          date.setTime(+date + step * durationMinute);
        }, function(start, end) {
          return (end - start) / durationMinute;
        }, function(date) {
          return date.getUTCMinutes();
        });
        var utcMinutes = utcMinute.range;
        var utcHour = newInterval(function(date) {
          date.setUTCMinutes(0, 0, 0);
        }, function(date, step) {
          date.setTime(+date + step * durationHour);
        }, function(start, end) {
          return (end - start) / durationHour;
        }, function(date) {
          return date.getUTCHours();
        });
        var utcHours = utcHour.range;
        var utcDay = newInterval(function(date) {
          date.setUTCHours(0, 0, 0, 0);
        }, function(date, step) {
          date.setUTCDate(date.getUTCDate() + step);
        }, function(start, end) {
          return (end - start) / durationDay;
        }, function(date) {
          return date.getUTCDate() - 1;
        });
        var utcDays = utcDay.range;
        function utcWeekday(i) {
          return newInterval(function(date) {
            date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
            date.setUTCHours(0, 0, 0, 0);
          }, function(date, step) {
            date.setUTCDate(date.getUTCDate() + step * 7);
          }, function(start, end) {
            return (end - start) / durationWeek;
          });
        }
        var utcSunday = utcWeekday(0);
        var utcMonday = utcWeekday(1);
        var utcTuesday = utcWeekday(2);
        var utcWednesday = utcWeekday(3);
        var utcThursday = utcWeekday(4);
        var utcFriday = utcWeekday(5);
        var utcSaturday = utcWeekday(6);
        var utcSundays = utcSunday.range;
        var utcMondays = utcMonday.range;
        var utcTuesdays = utcTuesday.range;
        var utcWednesdays = utcWednesday.range;
        var utcThursdays = utcThursday.range;
        var utcFridays = utcFriday.range;
        var utcSaturdays = utcSaturday.range;
        var utcMonth = newInterval(function(date) {
          date.setUTCDate(1);
          date.setUTCHours(0, 0, 0, 0);
        }, function(date, step) {
          date.setUTCMonth(date.getUTCMonth() + step);
        }, function(start, end) {
          return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
        }, function(date) {
          return date.getUTCMonth();
        });
        var utcMonths = utcMonth.range;
        var utcYear = newInterval(function(date) {
          date.setUTCMonth(0, 1);
          date.setUTCHours(0, 0, 0, 0);
        }, function(date, step) {
          date.setUTCFullYear(date.getUTCFullYear() + step);
        }, function(start, end) {
          return end.getUTCFullYear() - start.getUTCFullYear();
        }, function(date) {
          return date.getUTCFullYear();
        });
        utcYear.every = function(k) {
          return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
            date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
            date.setUTCMonth(0, 1);
            date.setUTCHours(0, 0, 0, 0);
          }, function(date, step) {
            date.setUTCFullYear(date.getUTCFullYear() + step * k);
          });
        };
        var utcYears = utcYear.range;
        function ticker(year2, month2, week, day2, hour2, minute2) {
          const tickIntervals = [
            [second, 1, durationSecond],
            [second, 5, 5 * durationSecond],
            [second, 15, 15 * durationSecond],
            [second, 30, 30 * durationSecond],
            [minute2, 1, durationMinute],
            [minute2, 5, 5 * durationMinute],
            [minute2, 15, 15 * durationMinute],
            [minute2, 30, 30 * durationMinute],
            [hour2, 1, durationHour],
            [hour2, 3, 3 * durationHour],
            [hour2, 6, 6 * durationHour],
            [hour2, 12, 12 * durationHour],
            [day2, 1, durationDay],
            [day2, 2, 2 * durationDay],
            [week, 1, durationWeek],
            [month2, 1, durationMonth],
            [month2, 3, 3 * durationMonth],
            [year2, 1, durationYear]
          ];
          function ticks(start, stop, count) {
            const reverse = stop < start;
            if (reverse)
              [start, stop] = [stop, start];
            const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
            const ticks2 = interval ? interval.range(start, +stop + 1) : [];
            return reverse ? ticks2.reverse() : ticks2;
          }
          function tickInterval(start, stop, count) {
            const target = Math.abs(stop - start) / count;
            const i = d3Array.bisector(([, , step2]) => step2).right(tickIntervals, target);
            if (i === tickIntervals.length)
              return year2.every(d3Array.tickStep(start / durationYear, stop / durationYear, count));
            if (i === 0)
              return millisecond.every(Math.max(d3Array.tickStep(start, stop, count), 1));
            const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
            return t.every(step);
          }
          return [ticks, tickInterval];
        }
        const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute);
        const [timeTicks, timeTickInterval] = ticker(year, month, sunday, day, hour, minute);
        exports2.timeDay = day;
        exports2.timeDays = days;
        exports2.timeFriday = friday;
        exports2.timeFridays = fridays;
        exports2.timeHour = hour;
        exports2.timeHours = hours;
        exports2.timeInterval = newInterval;
        exports2.timeMillisecond = millisecond;
        exports2.timeMilliseconds = milliseconds;
        exports2.timeMinute = minute;
        exports2.timeMinutes = minutes;
        exports2.timeMonday = monday;
        exports2.timeMondays = mondays;
        exports2.timeMonth = month;
        exports2.timeMonths = months;
        exports2.timeSaturday = saturday;
        exports2.timeSaturdays = saturdays;
        exports2.timeSecond = second;
        exports2.timeSeconds = seconds;
        exports2.timeSunday = sunday;
        exports2.timeSundays = sundays;
        exports2.timeThursday = thursday;
        exports2.timeThursdays = thursdays;
        exports2.timeTickInterval = timeTickInterval;
        exports2.timeTicks = timeTicks;
        exports2.timeTuesday = tuesday;
        exports2.timeTuesdays = tuesdays;
        exports2.timeWednesday = wednesday;
        exports2.timeWednesdays = wednesdays;
        exports2.timeWeek = sunday;
        exports2.timeWeeks = sundays;
        exports2.timeYear = year;
        exports2.timeYears = years;
        exports2.utcDay = utcDay;
        exports2.utcDays = utcDays;
        exports2.utcFriday = utcFriday;
        exports2.utcFridays = utcFridays;
        exports2.utcHour = utcHour;
        exports2.utcHours = utcHours;
        exports2.utcMillisecond = millisecond;
        exports2.utcMilliseconds = milliseconds;
        exports2.utcMinute = utcMinute;
        exports2.utcMinutes = utcMinutes;
        exports2.utcMonday = utcMonday;
        exports2.utcMondays = utcMondays;
        exports2.utcMonth = utcMonth;
        exports2.utcMonths = utcMonths;
        exports2.utcSaturday = utcSaturday;
        exports2.utcSaturdays = utcSaturdays;
        exports2.utcSecond = second;
        exports2.utcSeconds = seconds;
        exports2.utcSunday = utcSunday;
        exports2.utcSundays = utcSundays;
        exports2.utcThursday = utcThursday;
        exports2.utcThursdays = utcThursdays;
        exports2.utcTickInterval = utcTickInterval;
        exports2.utcTicks = utcTicks;
        exports2.utcTuesday = utcTuesday;
        exports2.utcTuesdays = utcTuesdays;
        exports2.utcWednesday = utcWednesday;
        exports2.utcWednesdays = utcWednesdays;
        exports2.utcWeek = utcSunday;
        exports2.utcWeeks = utcSundays;
        exports2.utcYear = utcYear;
        exports2.utcYears = utcYears;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-time-format-npm-3.0.0-0803464fb3-c20c1667db.zip/node_modules/d3-time-format/dist/d3-time-format.js
  var require_d3_time_format = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-time-format-npm-3.0.0-0803464fb3-c20c1667db.zip/node_modules/d3-time-format/dist/d3-time-format.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_time()) : typeof define === "function" && define.amd ? define(["exports", "d3-time"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3));
      })(exports, function(exports2, d3Time) {
        "use strict";
        function localDate(d) {
          if (0 <= d.y && d.y < 100) {
            var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
            date.setFullYear(d.y);
            return date;
          }
          return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
        }
        function utcDate(d) {
          if (0 <= d.y && d.y < 100) {
            var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
            date.setUTCFullYear(d.y);
            return date;
          }
          return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
        }
        function newDate(y, m, d) {
          return { y, m, d, H: 0, M: 0, S: 0, L: 0 };
        }
        function formatLocale(locale2) {
          var locale_dateTime = locale2.dateTime, locale_date = locale2.date, locale_time = locale2.time, locale_periods = locale2.periods, locale_weekdays = locale2.days, locale_shortWeekdays = locale2.shortDays, locale_months = locale2.months, locale_shortMonths = locale2.shortMonths;
          var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
          var formats = {
            "a": formatShortWeekday,
            "A": formatWeekday,
            "b": formatShortMonth,
            "B": formatMonth,
            "c": null,
            "d": formatDayOfMonth,
            "e": formatDayOfMonth,
            "f": formatMicroseconds,
            "g": formatYearISO,
            "G": formatFullYearISO,
            "H": formatHour24,
            "I": formatHour12,
            "j": formatDayOfYear,
            "L": formatMilliseconds,
            "m": formatMonthNumber,
            "M": formatMinutes,
            "p": formatPeriod,
            "q": formatQuarter,
            "Q": formatUnixTimestamp,
            "s": formatUnixTimestampSeconds,
            "S": formatSeconds,
            "u": formatWeekdayNumberMonday,
            "U": formatWeekNumberSunday,
            "V": formatWeekNumberISO,
            "w": formatWeekdayNumberSunday,
            "W": formatWeekNumberMonday,
            "x": null,
            "X": null,
            "y": formatYear2,
            "Y": formatFullYear,
            "Z": formatZone,
            "%": formatLiteralPercent
          };
          var utcFormats = {
            "a": formatUTCShortWeekday,
            "A": formatUTCWeekday,
            "b": formatUTCShortMonth,
            "B": formatUTCMonth,
            "c": null,
            "d": formatUTCDayOfMonth,
            "e": formatUTCDayOfMonth,
            "f": formatUTCMicroseconds,
            "g": formatUTCYearISO,
            "G": formatUTCFullYearISO,
            "H": formatUTCHour24,
            "I": formatUTCHour12,
            "j": formatUTCDayOfYear,
            "L": formatUTCMilliseconds,
            "m": formatUTCMonthNumber,
            "M": formatUTCMinutes,
            "p": formatUTCPeriod,
            "q": formatUTCQuarter,
            "Q": formatUnixTimestamp,
            "s": formatUnixTimestampSeconds,
            "S": formatUTCSeconds,
            "u": formatUTCWeekdayNumberMonday,
            "U": formatUTCWeekNumberSunday,
            "V": formatUTCWeekNumberISO,
            "w": formatUTCWeekdayNumberSunday,
            "W": formatUTCWeekNumberMonday,
            "x": null,
            "X": null,
            "y": formatUTCYear,
            "Y": formatUTCFullYear,
            "Z": formatUTCZone,
            "%": formatLiteralPercent
          };
          var parses = {
            "a": parseShortWeekday,
            "A": parseWeekday,
            "b": parseShortMonth,
            "B": parseMonth,
            "c": parseLocaleDateTime,
            "d": parseDayOfMonth,
            "e": parseDayOfMonth,
            "f": parseMicroseconds,
            "g": parseYear,
            "G": parseFullYear,
            "H": parseHour24,
            "I": parseHour24,
            "j": parseDayOfYear,
            "L": parseMilliseconds,
            "m": parseMonthNumber,
            "M": parseMinutes,
            "p": parsePeriod,
            "q": parseQuarter,
            "Q": parseUnixTimestamp,
            "s": parseUnixTimestampSeconds,
            "S": parseSeconds,
            "u": parseWeekdayNumberMonday,
            "U": parseWeekNumberSunday,
            "V": parseWeekNumberISO,
            "w": parseWeekdayNumberSunday,
            "W": parseWeekNumberMonday,
            "x": parseLocaleDate,
            "X": parseLocaleTime,
            "y": parseYear,
            "Y": parseFullYear,
            "Z": parseZone,
            "%": parseLiteralPercent
          };
          formats.x = newFormat(locale_date, formats);
          formats.X = newFormat(locale_time, formats);
          formats.c = newFormat(locale_dateTime, formats);
          utcFormats.x = newFormat(locale_date, utcFormats);
          utcFormats.X = newFormat(locale_time, utcFormats);
          utcFormats.c = newFormat(locale_dateTime, utcFormats);
          function newFormat(specifier, formats2) {
            return function(date) {
              var string = [], i = -1, j = 0, n = specifier.length, c, pad3, format;
              if (!(date instanceof Date))
                date = new Date(+date);
              while (++i < n) {
                if (specifier.charCodeAt(i) === 37) {
                  string.push(specifier.slice(j, i));
                  if ((pad3 = pads[c = specifier.charAt(++i)]) != null)
                    c = specifier.charAt(++i);
                  else
                    pad3 = c === "e" ? " " : "0";
                  if (format = formats2[c])
                    c = format(date, pad3);
                  string.push(c);
                  j = i + 1;
                }
              }
              string.push(specifier.slice(j, i));
              return string.join("");
            };
          }
          function newParse(specifier, Z) {
            return function(string) {
              var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
              if (i != string.length)
                return null;
              if ("Q" in d)
                return new Date(d.Q);
              if ("s" in d)
                return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
              if (Z && !("Z" in d))
                d.Z = 0;
              if ("p" in d)
                d.H = d.H % 12 + d.p * 12;
              if (d.m === void 0)
                d.m = "q" in d ? d.q : 0;
              if ("V" in d) {
                if (d.V < 1 || d.V > 53)
                  return null;
                if (!("w" in d))
                  d.w = 1;
                if ("Z" in d) {
                  week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
                  week = day > 4 || day === 0 ? d3Time.utcMonday.ceil(week) : d3Time.utcMonday(week);
                  week = d3Time.utcDay.offset(week, (d.V - 1) * 7);
                  d.y = week.getUTCFullYear();
                  d.m = week.getUTCMonth();
                  d.d = week.getUTCDate() + (d.w + 6) % 7;
                } else {
                  week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
                  week = day > 4 || day === 0 ? d3Time.timeMonday.ceil(week) : d3Time.timeMonday(week);
                  week = d3Time.timeDay.offset(week, (d.V - 1) * 7);
                  d.y = week.getFullYear();
                  d.m = week.getMonth();
                  d.d = week.getDate() + (d.w + 6) % 7;
                }
              } else if ("W" in d || "U" in d) {
                if (!("w" in d))
                  d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
                day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
                d.m = 0;
                d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
              }
              if ("Z" in d) {
                d.H += d.Z / 100 | 0;
                d.M += d.Z % 100;
                return utcDate(d);
              }
              return localDate(d);
            };
          }
          function parseSpecifier(d, specifier, string, j) {
            var i = 0, n = specifier.length, m = string.length, c, parse;
            while (i < n) {
              if (j >= m)
                return -1;
              c = specifier.charCodeAt(i++);
              if (c === 37) {
                c = specifier.charAt(i++);
                parse = parses[c in pads ? specifier.charAt(i++) : c];
                if (!parse || (j = parse(d, string, j)) < 0)
                  return -1;
              } else if (c != string.charCodeAt(j++)) {
                return -1;
              }
            }
            return j;
          }
          function parsePeriod(d, string, i) {
            var n = periodRe.exec(string.slice(i));
            return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
          }
          function parseShortWeekday(d, string, i) {
            var n = shortWeekdayRe.exec(string.slice(i));
            return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
          }
          function parseWeekday(d, string, i) {
            var n = weekdayRe.exec(string.slice(i));
            return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
          }
          function parseShortMonth(d, string, i) {
            var n = shortMonthRe.exec(string.slice(i));
            return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
          }
          function parseMonth(d, string, i) {
            var n = monthRe.exec(string.slice(i));
            return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
          }
          function parseLocaleDateTime(d, string, i) {
            return parseSpecifier(d, locale_dateTime, string, i);
          }
          function parseLocaleDate(d, string, i) {
            return parseSpecifier(d, locale_date, string, i);
          }
          function parseLocaleTime(d, string, i) {
            return parseSpecifier(d, locale_time, string, i);
          }
          function formatShortWeekday(d) {
            return locale_shortWeekdays[d.getDay()];
          }
          function formatWeekday(d) {
            return locale_weekdays[d.getDay()];
          }
          function formatShortMonth(d) {
            return locale_shortMonths[d.getMonth()];
          }
          function formatMonth(d) {
            return locale_months[d.getMonth()];
          }
          function formatPeriod(d) {
            return locale_periods[+(d.getHours() >= 12)];
          }
          function formatQuarter(d) {
            return 1 + ~~(d.getMonth() / 3);
          }
          function formatUTCShortWeekday(d) {
            return locale_shortWeekdays[d.getUTCDay()];
          }
          function formatUTCWeekday(d) {
            return locale_weekdays[d.getUTCDay()];
          }
          function formatUTCShortMonth(d) {
            return locale_shortMonths[d.getUTCMonth()];
          }
          function formatUTCMonth(d) {
            return locale_months[d.getUTCMonth()];
          }
          function formatUTCPeriod(d) {
            return locale_periods[+(d.getUTCHours() >= 12)];
          }
          function formatUTCQuarter(d) {
            return 1 + ~~(d.getUTCMonth() / 3);
          }
          return {
            format: function(specifier) {
              var f = newFormat(specifier += "", formats);
              f.toString = function() {
                return specifier;
              };
              return f;
            },
            parse: function(specifier) {
              var p = newParse(specifier += "", false);
              p.toString = function() {
                return specifier;
              };
              return p;
            },
            utcFormat: function(specifier) {
              var f = newFormat(specifier += "", utcFormats);
              f.toString = function() {
                return specifier;
              };
              return f;
            },
            utcParse: function(specifier) {
              var p = newParse(specifier += "", true);
              p.toString = function() {
                return specifier;
              };
              return p;
            }
          };
        }
        var pads = { "-": "", "_": " ", "0": "0" }, numberRe = /^\s*\d+/, percentRe = /^%/, requoteRe = /[\\^$*+?|[\]().{}]/g;
        function pad2(value, fill, width) {
          var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
          return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
        }
        function requote(s) {
          return s.replace(requoteRe, "\\$&");
        }
        function formatRe(names) {
          return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
        }
        function formatLookup(names) {
          return new Map(names.map((name, i) => [name.toLowerCase(), i]));
        }
        function parseWeekdayNumberSunday(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 1));
          return n ? (d.w = +n[0], i + n[0].length) : -1;
        }
        function parseWeekdayNumberMonday(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 1));
          return n ? (d.u = +n[0], i + n[0].length) : -1;
        }
        function parseWeekNumberSunday(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 2));
          return n ? (d.U = +n[0], i + n[0].length) : -1;
        }
        function parseWeekNumberISO(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 2));
          return n ? (d.V = +n[0], i + n[0].length) : -1;
        }
        function parseWeekNumberMonday(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 2));
          return n ? (d.W = +n[0], i + n[0].length) : -1;
        }
        function parseFullYear(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 4));
          return n ? (d.y = +n[0], i + n[0].length) : -1;
        }
        function parseYear(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 2));
          return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
        }
        function parseZone(d, string, i) {
          var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
          return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
        }
        function parseQuarter(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 1));
          return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
        }
        function parseMonthNumber(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 2));
          return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
        }
        function parseDayOfMonth(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 2));
          return n ? (d.d = +n[0], i + n[0].length) : -1;
        }
        function parseDayOfYear(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 3));
          return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
        }
        function parseHour24(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 2));
          return n ? (d.H = +n[0], i + n[0].length) : -1;
        }
        function parseMinutes(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 2));
          return n ? (d.M = +n[0], i + n[0].length) : -1;
        }
        function parseSeconds(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 2));
          return n ? (d.S = +n[0], i + n[0].length) : -1;
        }
        function parseMilliseconds(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 3));
          return n ? (d.L = +n[0], i + n[0].length) : -1;
        }
        function parseMicroseconds(d, string, i) {
          var n = numberRe.exec(string.slice(i, i + 6));
          return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
        }
        function parseLiteralPercent(d, string, i) {
          var n = percentRe.exec(string.slice(i, i + 1));
          return n ? i + n[0].length : -1;
        }
        function parseUnixTimestamp(d, string, i) {
          var n = numberRe.exec(string.slice(i));
          return n ? (d.Q = +n[0], i + n[0].length) : -1;
        }
        function parseUnixTimestampSeconds(d, string, i) {
          var n = numberRe.exec(string.slice(i));
          return n ? (d.s = +n[0], i + n[0].length) : -1;
        }
        function formatDayOfMonth(d, p) {
          return pad2(d.getDate(), p, 2);
        }
        function formatHour24(d, p) {
          return pad2(d.getHours(), p, 2);
        }
        function formatHour12(d, p) {
          return pad2(d.getHours() % 12 || 12, p, 2);
        }
        function formatDayOfYear(d, p) {
          return pad2(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);
        }
        function formatMilliseconds(d, p) {
          return pad2(d.getMilliseconds(), p, 3);
        }
        function formatMicroseconds(d, p) {
          return formatMilliseconds(d, p) + "000";
        }
        function formatMonthNumber(d, p) {
          return pad2(d.getMonth() + 1, p, 2);
        }
        function formatMinutes(d, p) {
          return pad2(d.getMinutes(), p, 2);
        }
        function formatSeconds(d, p) {
          return pad2(d.getSeconds(), p, 2);
        }
        function formatWeekdayNumberMonday(d) {
          var day = d.getDay();
          return day === 0 ? 7 : day;
        }
        function formatWeekNumberSunday(d, p) {
          return pad2(d3Time.timeSunday.count(d3Time.timeYear(d) - 1, d), p, 2);
        }
        function dISO(d) {
          var day = d.getDay();
          return day >= 4 || day === 0 ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
        }
        function formatWeekNumberISO(d, p) {
          d = dISO(d);
          return pad2(d3Time.timeThursday.count(d3Time.timeYear(d), d) + (d3Time.timeYear(d).getDay() === 4), p, 2);
        }
        function formatWeekdayNumberSunday(d) {
          return d.getDay();
        }
        function formatWeekNumberMonday(d, p) {
          return pad2(d3Time.timeMonday.count(d3Time.timeYear(d) - 1, d), p, 2);
        }
        function formatYear2(d, p) {
          return pad2(d.getFullYear() % 100, p, 2);
        }
        function formatYearISO(d, p) {
          d = dISO(d);
          return pad2(d.getFullYear() % 100, p, 2);
        }
        function formatFullYear(d, p) {
          return pad2(d.getFullYear() % 1e4, p, 4);
        }
        function formatFullYearISO(d, p) {
          var day = d.getDay();
          d = day >= 4 || day === 0 ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
          return pad2(d.getFullYear() % 1e4, p, 4);
        }
        function formatZone(d) {
          var z = d.getTimezoneOffset();
          return (z > 0 ? "-" : (z *= -1, "+")) + pad2(z / 60 | 0, "0", 2) + pad2(z % 60, "0", 2);
        }
        function formatUTCDayOfMonth(d, p) {
          return pad2(d.getUTCDate(), p, 2);
        }
        function formatUTCHour24(d, p) {
          return pad2(d.getUTCHours(), p, 2);
        }
        function formatUTCHour12(d, p) {
          return pad2(d.getUTCHours() % 12 || 12, p, 2);
        }
        function formatUTCDayOfYear(d, p) {
          return pad2(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);
        }
        function formatUTCMilliseconds(d, p) {
          return pad2(d.getUTCMilliseconds(), p, 3);
        }
        function formatUTCMicroseconds(d, p) {
          return formatUTCMilliseconds(d, p) + "000";
        }
        function formatUTCMonthNumber(d, p) {
          return pad2(d.getUTCMonth() + 1, p, 2);
        }
        function formatUTCMinutes(d, p) {
          return pad2(d.getUTCMinutes(), p, 2);
        }
        function formatUTCSeconds(d, p) {
          return pad2(d.getUTCSeconds(), p, 2);
        }
        function formatUTCWeekdayNumberMonday(d) {
          var dow = d.getUTCDay();
          return dow === 0 ? 7 : dow;
        }
        function formatUTCWeekNumberSunday(d, p) {
          return pad2(d3Time.utcSunday.count(d3Time.utcYear(d) - 1, d), p, 2);
        }
        function UTCdISO(d) {
          var day = d.getUTCDay();
          return day >= 4 || day === 0 ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
        }
        function formatUTCWeekNumberISO(d, p) {
          d = UTCdISO(d);
          return pad2(d3Time.utcThursday.count(d3Time.utcYear(d), d) + (d3Time.utcYear(d).getUTCDay() === 4), p, 2);
        }
        function formatUTCWeekdayNumberSunday(d) {
          return d.getUTCDay();
        }
        function formatUTCWeekNumberMonday(d, p) {
          return pad2(d3Time.utcMonday.count(d3Time.utcYear(d) - 1, d), p, 2);
        }
        function formatUTCYear(d, p) {
          return pad2(d.getUTCFullYear() % 100, p, 2);
        }
        function formatUTCYearISO(d, p) {
          d = UTCdISO(d);
          return pad2(d.getUTCFullYear() % 100, p, 2);
        }
        function formatUTCFullYear(d, p) {
          return pad2(d.getUTCFullYear() % 1e4, p, 4);
        }
        function formatUTCFullYearISO(d, p) {
          var day = d.getUTCDay();
          d = day >= 4 || day === 0 ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
          return pad2(d.getUTCFullYear() % 1e4, p, 4);
        }
        function formatUTCZone() {
          return "+0000";
        }
        function formatLiteralPercent() {
          return "%";
        }
        function formatUnixTimestamp(d) {
          return +d;
        }
        function formatUnixTimestampSeconds(d) {
          return Math.floor(+d / 1e3);
        }
        var locale;
        defaultLocale({
          dateTime: "%x, %X",
          date: "%-m/%-d/%Y",
          time: "%-I:%M:%S %p",
          periods: ["AM", "PM"],
          days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
          shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
          months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
          shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        });
        function defaultLocale(definition) {
          locale = formatLocale(definition);
          exports2.timeFormat = locale.format;
          exports2.timeParse = locale.parse;
          exports2.utcFormat = locale.utcFormat;
          exports2.utcParse = locale.utcParse;
          return locale;
        }
        var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
        function formatIsoNative(date) {
          return date.toISOString();
        }
        var formatIso = Date.prototype.toISOString ? formatIsoNative : exports2.utcFormat(isoSpecifier);
        function parseIsoNative(string) {
          var date = new Date(string);
          return isNaN(date) ? null : date;
        }
        var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : exports2.utcParse(isoSpecifier);
        exports2.isoFormat = formatIso;
        exports2.isoParse = parseIso;
        exports2.timeFormatDefaultLocale = defaultLocale;
        exports2.timeFormatLocale = formatLocale;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-scale-npm-3.3.0-6a8f0391dc-f77e73f0fb.zip/node_modules/d3-scale/dist/d3-scale.js
  var require_d3_scale = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-scale-npm-3.3.0-6a8f0391dc-f77e73f0fb.zip/node_modules/d3-scale/dist/d3-scale.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_array(), require_d3_interpolate(), require_d3_format(), require_d3_time(), require_d3_time_format()) : typeof define === "function" && define.amd ? define(["exports", "d3-array", "d3-interpolate", "d3-format", "d3-time", "d3-time-format"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3));
      })(exports, function(exports2, d3Array, d3Interpolate, d3Format, d3Time, d3TimeFormat) {
        "use strict";
        function initRange(domain, range) {
          switch (arguments.length) {
            case 0:
              break;
            case 1:
              this.range(domain);
              break;
            default:
              this.range(range).domain(domain);
              break;
          }
          return this;
        }
        function initInterpolator(domain, interpolator) {
          switch (arguments.length) {
            case 0:
              break;
            case 1: {
              if (typeof domain === "function")
                this.interpolator(domain);
              else
                this.range(domain);
              break;
            }
            default: {
              this.domain(domain);
              if (typeof interpolator === "function")
                this.interpolator(interpolator);
              else
                this.range(interpolator);
              break;
            }
          }
          return this;
        }
        const implicit = Symbol("implicit");
        function ordinal() {
          var index = /* @__PURE__ */ new Map(), domain = [], range = [], unknown = implicit;
          function scale(d) {
            var key = d + "", i = index.get(key);
            if (!i) {
              if (unknown !== implicit)
                return unknown;
              index.set(key, i = domain.push(d));
            }
            return range[(i - 1) % range.length];
          }
          scale.domain = function(_) {
            if (!arguments.length)
              return domain.slice();
            domain = [], index = /* @__PURE__ */ new Map();
            for (const value of _) {
              const key = value + "";
              if (index.has(key))
                continue;
              index.set(key, domain.push(value));
            }
            return scale;
          };
          scale.range = function(_) {
            return arguments.length ? (range = Array.from(_), scale) : range.slice();
          };
          scale.unknown = function(_) {
            return arguments.length ? (unknown = _, scale) : unknown;
          };
          scale.copy = function() {
            return ordinal(domain, range).unknown(unknown);
          };
          initRange.apply(scale, arguments);
          return scale;
        }
        function band() {
          var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
          delete scale.unknown;
          function rescale() {
            var n = domain().length, reverse = r1 < r0, start = reverse ? r1 : r0, stop = reverse ? r0 : r1;
            step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
            if (round)
              step = Math.floor(step);
            start += (stop - start - step * (n - paddingInner)) * align;
            bandwidth = step * (1 - paddingInner);
            if (round)
              start = Math.round(start), bandwidth = Math.round(bandwidth);
            var values = d3Array.range(n).map(function(i) {
              return start + step * i;
            });
            return ordinalRange(reverse ? values.reverse() : values);
          }
          scale.domain = function(_) {
            return arguments.length ? (domain(_), rescale()) : domain();
          };
          scale.range = function(_) {
            return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
          };
          scale.rangeRound = function(_) {
            return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
          };
          scale.bandwidth = function() {
            return bandwidth;
          };
          scale.step = function() {
            return step;
          };
          scale.round = function(_) {
            return arguments.length ? (round = !!_, rescale()) : round;
          };
          scale.padding = function(_) {
            return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
          };
          scale.paddingInner = function(_) {
            return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
          };
          scale.paddingOuter = function(_) {
            return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
          };
          scale.align = function(_) {
            return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
          };
          scale.copy = function() {
            return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
          };
          return initRange.apply(rescale(), arguments);
        }
        function pointish(scale) {
          var copy2 = scale.copy;
          scale.padding = scale.paddingOuter;
          delete scale.paddingInner;
          delete scale.paddingOuter;
          scale.copy = function() {
            return pointish(copy2());
          };
          return scale;
        }
        function point() {
          return pointish(band.apply(null, arguments).paddingInner(1));
        }
        function constants(x) {
          return function() {
            return x;
          };
        }
        function number$1(x) {
          return +x;
        }
        var unit = [0, 1];
        function identity$1(x) {
          return x;
        }
        function normalize(a, b) {
          return (b -= a = +a) ? function(x) {
            return (x - a) / b;
          } : constants(isNaN(b) ? NaN : 0.5);
        }
        function clamper(a, b) {
          var t;
          if (a > b)
            t = a, a = b, b = t;
          return function(x) {
            return Math.max(a, Math.min(b, x));
          };
        }
        function bimap(domain, range, interpolate) {
          var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
          if (d1 < d0)
            d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
          else
            d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
          return function(x) {
            return r0(d0(x));
          };
        }
        function polymap(domain, range, interpolate) {
          var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
          if (domain[j] < domain[0]) {
            domain = domain.slice().reverse();
            range = range.slice().reverse();
          }
          while (++i < j) {
            d[i] = normalize(domain[i], domain[i + 1]);
            r[i] = interpolate(range[i], range[i + 1]);
          }
          return function(x) {
            var i2 = d3Array.bisect(domain, x, 1, j) - 1;
            return r[i2](d[i2](x));
          };
        }
        function copy$1(source, target) {
          return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
        }
        function transformer$2() {
          var domain = unit, range = unit, interpolate = d3Interpolate.interpolate, transform, untransform, unknown, clamp = identity$1, piecewise, output, input;
          function rescale() {
            var n = Math.min(domain.length, range.length);
            if (clamp !== identity$1)
              clamp = clamper(domain[0], domain[n - 1]);
            piecewise = n > 2 ? polymap : bimap;
            output = input = null;
            return scale;
          }
          function scale(x) {
            return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
          }
          scale.invert = function(y) {
            return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));
          };
          scale.domain = function(_) {
            return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
          };
          scale.range = function(_) {
            return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
          };
          scale.rangeRound = function(_) {
            return range = Array.from(_), interpolate = d3Interpolate.interpolateRound, rescale();
          };
          scale.clamp = function(_) {
            return arguments.length ? (clamp = _ ? true : identity$1, rescale()) : clamp !== identity$1;
          };
          scale.interpolate = function(_) {
            return arguments.length ? (interpolate = _, rescale()) : interpolate;
          };
          scale.unknown = function(_) {
            return arguments.length ? (unknown = _, scale) : unknown;
          };
          return function(t, u) {
            transform = t, untransform = u;
            return rescale();
          };
        }
        function continuous() {
          return transformer$2()(identity$1, identity$1);
        }
        function tickFormat(start, stop, count, specifier) {
          var step = d3Array.tickStep(start, stop, count), precision;
          specifier = d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
          switch (specifier.type) {
            case "s": {
              var value = Math.max(Math.abs(start), Math.abs(stop));
              if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value)))
                specifier.precision = precision;
              return d3Format.formatPrefix(specifier, value);
            }
            case "":
            case "e":
            case "g":
            case "p":
            case "r": {
              if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)))))
                specifier.precision = precision - (specifier.type === "e");
              break;
            }
            case "f":
            case "%": {
              if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step)))
                specifier.precision = precision - (specifier.type === "%") * 2;
              break;
            }
          }
          return d3Format.format(specifier);
        }
        function linearish(scale) {
          var domain = scale.domain;
          scale.ticks = function(count) {
            var d = domain();
            return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
          };
          scale.tickFormat = function(count, specifier) {
            var d = domain();
            return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
          };
          scale.nice = function(count) {
            if (count == null)
              count = 10;
            var d = domain();
            var i0 = 0;
            var i1 = d.length - 1;
            var start = d[i0];
            var stop = d[i1];
            var prestep;
            var step;
            var maxIter = 10;
            if (stop < start) {
              step = start, start = stop, stop = step;
              step = i0, i0 = i1, i1 = step;
            }
            while (maxIter-- > 0) {
              step = d3Array.tickIncrement(start, stop, count);
              if (step === prestep) {
                d[i0] = start;
                d[i1] = stop;
                return domain(d);
              } else if (step > 0) {
                start = Math.floor(start / step) * step;
                stop = Math.ceil(stop / step) * step;
              } else if (step < 0) {
                start = Math.ceil(start * step) / step;
                stop = Math.floor(stop * step) / step;
              } else {
                break;
              }
              prestep = step;
            }
            return scale;
          };
          return scale;
        }
        function linear() {
          var scale = continuous();
          scale.copy = function() {
            return copy$1(scale, linear());
          };
          initRange.apply(scale, arguments);
          return linearish(scale);
        }
        function identity(domain) {
          var unknown;
          function scale(x) {
            return x == null || isNaN(x = +x) ? unknown : x;
          }
          scale.invert = scale;
          scale.domain = scale.range = function(_) {
            return arguments.length ? (domain = Array.from(_, number$1), scale) : domain.slice();
          };
          scale.unknown = function(_) {
            return arguments.length ? (unknown = _, scale) : unknown;
          };
          scale.copy = function() {
            return identity(domain).unknown(unknown);
          };
          domain = arguments.length ? Array.from(domain, number$1) : [0, 1];
          return linearish(scale);
        }
        function nice(domain, interval) {
          domain = domain.slice();
          var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
          if (x1 < x0) {
            t = i0, i0 = i1, i1 = t;
            t = x0, x0 = x1, x1 = t;
          }
          domain[i0] = interval.floor(x0);
          domain[i1] = interval.ceil(x1);
          return domain;
        }
        function transformLog(x) {
          return Math.log(x);
        }
        function transformExp(x) {
          return Math.exp(x);
        }
        function transformLogn(x) {
          return -Math.log(-x);
        }
        function transformExpn(x) {
          return -Math.exp(-x);
        }
        function pow10(x) {
          return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
        }
        function powp(base) {
          return base === 10 ? pow10 : base === Math.E ? Math.exp : function(x) {
            return Math.pow(base, x);
          };
        }
        function logp(base) {
          return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function(x) {
            return Math.log(x) / base;
          });
        }
        function reflect(f) {
          return function(x) {
            return -f(-x);
          };
        }
        function loggish(transform) {
          var scale = transform(transformLog, transformExp), domain = scale.domain, base = 10, logs, pows;
          function rescale() {
            logs = logp(base), pows = powp(base);
            if (domain()[0] < 0) {
              logs = reflect(logs), pows = reflect(pows);
              transform(transformLogn, transformExpn);
            } else {
              transform(transformLog, transformExp);
            }
            return scale;
          }
          scale.base = function(_) {
            return arguments.length ? (base = +_, rescale()) : base;
          };
          scale.domain = function(_) {
            return arguments.length ? (domain(_), rescale()) : domain();
          };
          scale.ticks = function(count) {
            var d = domain(), u = d[0], v = d[d.length - 1], r;
            if (r = v < u)
              i = u, u = v, v = i;
            var i = logs(u), j = logs(v), p, k, t, n = count == null ? 10 : +count, z = [];
            if (!(base % 1) && j - i < n) {
              i = Math.floor(i), j = Math.ceil(j);
              if (u > 0)
                for (; i <= j; ++i) {
                  for (k = 1, p = pows(i); k < base; ++k) {
                    t = p * k;
                    if (t < u)
                      continue;
                    if (t > v)
                      break;
                    z.push(t);
                  }
                }
              else
                for (; i <= j; ++i) {
                  for (k = base - 1, p = pows(i); k >= 1; --k) {
                    t = p * k;
                    if (t < u)
                      continue;
                    if (t > v)
                      break;
                    z.push(t);
                  }
                }
              if (z.length * 2 < n)
                z = d3Array.ticks(u, v, n);
            } else {
              z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
            }
            return r ? z.reverse() : z;
          };
          scale.tickFormat = function(count, specifier) {
            if (specifier == null)
              specifier = base === 10 ? ".0e" : ",";
            if (typeof specifier !== "function")
              specifier = d3Format.format(specifier);
            if (count === Infinity)
              return specifier;
            if (count == null)
              count = 10;
            var k = Math.max(1, base * count / scale.ticks().length);
            return function(d) {
              var i = d / pows(Math.round(logs(d)));
              if (i * base < base - 0.5)
                i *= base;
              return i <= k ? specifier(d) : "";
            };
          };
          scale.nice = function() {
            return domain(nice(domain(), {
              floor: function(x) {
                return pows(Math.floor(logs(x)));
              },
              ceil: function(x) {
                return pows(Math.ceil(logs(x)));
              }
            }));
          };
          return scale;
        }
        function log() {
          var scale = loggish(transformer$2()).domain([1, 10]);
          scale.copy = function() {
            return copy$1(scale, log()).base(scale.base());
          };
          initRange.apply(scale, arguments);
          return scale;
        }
        function transformSymlog(c) {
          return function(x) {
            return Math.sign(x) * Math.log1p(Math.abs(x / c));
          };
        }
        function transformSymexp(c) {
          return function(x) {
            return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
          };
        }
        function symlogish(transform) {
          var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));
          scale.constant = function(_) {
            return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
          };
          return linearish(scale);
        }
        function symlog() {
          var scale = symlogish(transformer$2());
          scale.copy = function() {
            return copy$1(scale, symlog()).constant(scale.constant());
          };
          return initRange.apply(scale, arguments);
        }
        function transformPow(exponent) {
          return function(x) {
            return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
          };
        }
        function transformSqrt(x) {
          return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
        }
        function transformSquare(x) {
          return x < 0 ? -x * x : x * x;
        }
        function powish(transform) {
          var scale = transform(identity$1, identity$1), exponent = 1;
          function rescale() {
            return exponent === 1 ? transform(identity$1, identity$1) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
          }
          scale.exponent = function(_) {
            return arguments.length ? (exponent = +_, rescale()) : exponent;
          };
          return linearish(scale);
        }
        function pow() {
          var scale = powish(transformer$2());
          scale.copy = function() {
            return copy$1(scale, pow()).exponent(scale.exponent());
          };
          initRange.apply(scale, arguments);
          return scale;
        }
        function sqrt() {
          return pow.apply(null, arguments).exponent(0.5);
        }
        function square(x) {
          return Math.sign(x) * x * x;
        }
        function unsquare(x) {
          return Math.sign(x) * Math.sqrt(Math.abs(x));
        }
        function radial() {
          var squared = continuous(), range = [0, 1], round = false, unknown;
          function scale(x) {
            var y = unsquare(squared(x));
            return isNaN(y) ? unknown : round ? Math.round(y) : y;
          }
          scale.invert = function(y) {
            return squared.invert(square(y));
          };
          scale.domain = function(_) {
            return arguments.length ? (squared.domain(_), scale) : squared.domain();
          };
          scale.range = function(_) {
            return arguments.length ? (squared.range((range = Array.from(_, number$1)).map(square)), scale) : range.slice();
          };
          scale.rangeRound = function(_) {
            return scale.range(_).round(true);
          };
          scale.round = function(_) {
            return arguments.length ? (round = !!_, scale) : round;
          };
          scale.clamp = function(_) {
            return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
          };
          scale.unknown = function(_) {
            return arguments.length ? (unknown = _, scale) : unknown;
          };
          scale.copy = function() {
            return radial(squared.domain(), range).round(round).clamp(squared.clamp()).unknown(unknown);
          };
          initRange.apply(scale, arguments);
          return linearish(scale);
        }
        function quantile() {
          var domain = [], range = [], thresholds = [], unknown;
          function rescale() {
            var i = 0, n = Math.max(1, range.length);
            thresholds = new Array(n - 1);
            while (++i < n)
              thresholds[i - 1] = d3Array.quantileSorted(domain, i / n);
            return scale;
          }
          function scale(x) {
            return x == null || isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];
          }
          scale.invertExtent = function(y) {
            var i = range.indexOf(y);
            return i < 0 ? [NaN, NaN] : [
              i > 0 ? thresholds[i - 1] : domain[0],
              i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
            ];
          };
          scale.domain = function(_) {
            if (!arguments.length)
              return domain.slice();
            domain = [];
            for (let d of _)
              if (d != null && !isNaN(d = +d))
                domain.push(d);
            domain.sort(d3Array.ascending);
            return rescale();
          };
          scale.range = function(_) {
            return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
          };
          scale.unknown = function(_) {
            return arguments.length ? (unknown = _, scale) : unknown;
          };
          scale.quantiles = function() {
            return thresholds.slice();
          };
          scale.copy = function() {
            return quantile().domain(domain).range(range).unknown(unknown);
          };
          return initRange.apply(scale, arguments);
        }
        function quantize() {
          var x0 = 0, x1 = 1, n = 1, domain = [0.5], range = [0, 1], unknown;
          function scale(x) {
            return x != null && x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
          }
          function rescale() {
            var i = -1;
            domain = new Array(n);
            while (++i < n)
              domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
            return scale;
          }
          scale.domain = function(_) {
            return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
          };
          scale.range = function(_) {
            return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
          };
          scale.invertExtent = function(y) {
            var i = range.indexOf(y);
            return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
          };
          scale.unknown = function(_) {
            return arguments.length ? (unknown = _, scale) : scale;
          };
          scale.thresholds = function() {
            return domain.slice();
          };
          scale.copy = function() {
            return quantize().domain([x0, x1]).range(range).unknown(unknown);
          };
          return initRange.apply(linearish(scale), arguments);
        }
        function threshold() {
          var domain = [0.5], range = [0, 1], unknown, n = 1;
          function scale(x) {
            return x != null && x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
          }
          scale.domain = function(_) {
            return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
          };
          scale.range = function(_) {
            return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
          };
          scale.invertExtent = function(y) {
            var i = range.indexOf(y);
            return [domain[i - 1], domain[i]];
          };
          scale.unknown = function(_) {
            return arguments.length ? (unknown = _, scale) : unknown;
          };
          scale.copy = function() {
            return threshold().domain(domain).range(range).unknown(unknown);
          };
          return initRange.apply(scale, arguments);
        }
        function date(t) {
          return new Date(t);
        }
        function number(t) {
          return t instanceof Date ? +t : +new Date(+t);
        }
        function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
          var scale = continuous(), invert = scale.invert, domain = scale.domain;
          var formatMillisecond = format(".%L"), formatSecond = format(":%S"), formatMinute = format("%I:%M"), formatHour = format("%I %p"), formatDay = format("%a %d"), formatWeek = format("%b %d"), formatMonth = format("%B"), formatYear2 = format("%Y");
          function tickFormat2(date2) {
            return (second(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
          }
          scale.invert = function(y) {
            return new Date(invert(y));
          };
          scale.domain = function(_) {
            return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
          };
          scale.ticks = function(interval) {
            var d = domain();
            return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
          };
          scale.tickFormat = function(count, specifier) {
            return specifier == null ? tickFormat2 : format(specifier);
          };
          scale.nice = function(interval) {
            var d = domain();
            if (!interval || typeof interval.range !== "function")
              interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
            return interval ? domain(nice(d, interval)) : scale;
          };
          scale.copy = function() {
            return copy$1(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
          };
          return scale;
        }
        function time() {
          return initRange.apply(calendar(d3Time.timeTicks, d3Time.timeTickInterval, d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3TimeFormat.timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
        }
        function utcTime() {
          return initRange.apply(calendar(d3Time.utcTicks, d3Time.utcTickInterval, d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3TimeFormat.utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
        }
        function transformer$1() {
          var x0 = 0, x1 = 1, t0, t1, k10, transform, interpolator = identity$1, clamp = false, unknown;
          function scale(x) {
            return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
          }
          scale.domain = function(_) {
            return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
          };
          scale.clamp = function(_) {
            return arguments.length ? (clamp = !!_, scale) : clamp;
          };
          scale.interpolator = function(_) {
            return arguments.length ? (interpolator = _, scale) : interpolator;
          };
          function range(interpolate) {
            return function(_) {
              var r0, r1;
              return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
            };
          }
          scale.range = range(d3Interpolate.interpolate);
          scale.rangeRound = range(d3Interpolate.interpolateRound);
          scale.unknown = function(_) {
            return arguments.length ? (unknown = _, scale) : unknown;
          };
          return function(t) {
            transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
            return scale;
          };
        }
        function copy(source, target) {
          return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
        }
        function sequential() {
          var scale = linearish(transformer$1()(identity$1));
          scale.copy = function() {
            return copy(scale, sequential());
          };
          return initInterpolator.apply(scale, arguments);
        }
        function sequentialLog() {
          var scale = loggish(transformer$1()).domain([1, 10]);
          scale.copy = function() {
            return copy(scale, sequentialLog()).base(scale.base());
          };
          return initInterpolator.apply(scale, arguments);
        }
        function sequentialSymlog() {
          var scale = symlogish(transformer$1());
          scale.copy = function() {
            return copy(scale, sequentialSymlog()).constant(scale.constant());
          };
          return initInterpolator.apply(scale, arguments);
        }
        function sequentialPow() {
          var scale = powish(transformer$1());
          scale.copy = function() {
            return copy(scale, sequentialPow()).exponent(scale.exponent());
          };
          return initInterpolator.apply(scale, arguments);
        }
        function sequentialSqrt() {
          return sequentialPow.apply(null, arguments).exponent(0.5);
        }
        function sequentialQuantile() {
          var domain = [], interpolator = identity$1;
          function scale(x) {
            if (x != null && !isNaN(x = +x))
              return interpolator((d3Array.bisect(domain, x, 1) - 1) / (domain.length - 1));
          }
          scale.domain = function(_) {
            if (!arguments.length)
              return domain.slice();
            domain = [];
            for (let d of _)
              if (d != null && !isNaN(d = +d))
                domain.push(d);
            domain.sort(d3Array.ascending);
            return scale;
          };
          scale.interpolator = function(_) {
            return arguments.length ? (interpolator = _, scale) : interpolator;
          };
          scale.range = function() {
            return domain.map((d, i) => interpolator(i / (domain.length - 1)));
          };
          scale.quantiles = function(n) {
            return Array.from({ length: n + 1 }, (_, i) => d3Array.quantile(domain, i / n));
          };
          scale.copy = function() {
            return sequentialQuantile(interpolator).domain(domain);
          };
          return initInterpolator.apply(scale, arguments);
        }
        function transformer() {
          var x0 = 0, x1 = 0.5, x2 = 1, s = 1, t0, t1, t2, k10, k21, interpolator = identity$1, transform, clamp = false, unknown;
          function scale(x) {
            return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
          }
          scale.domain = function(_) {
            return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
          };
          scale.clamp = function(_) {
            return arguments.length ? (clamp = !!_, scale) : clamp;
          };
          scale.interpolator = function(_) {
            return arguments.length ? (interpolator = _, scale) : interpolator;
          };
          function range(interpolate) {
            return function(_) {
              var r0, r1, r2;
              return arguments.length ? ([r0, r1, r2] = _, interpolator = d3Interpolate.piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
            };
          }
          scale.range = range(d3Interpolate.interpolate);
          scale.rangeRound = range(d3Interpolate.interpolateRound);
          scale.unknown = function(_) {
            return arguments.length ? (unknown = _, scale) : unknown;
          };
          return function(t) {
            transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
            return scale;
          };
        }
        function diverging() {
          var scale = linearish(transformer()(identity$1));
          scale.copy = function() {
            return copy(scale, diverging());
          };
          return initInterpolator.apply(scale, arguments);
        }
        function divergingLog() {
          var scale = loggish(transformer()).domain([0.1, 1, 10]);
          scale.copy = function() {
            return copy(scale, divergingLog()).base(scale.base());
          };
          return initInterpolator.apply(scale, arguments);
        }
        function divergingSymlog() {
          var scale = symlogish(transformer());
          scale.copy = function() {
            return copy(scale, divergingSymlog()).constant(scale.constant());
          };
          return initInterpolator.apply(scale, arguments);
        }
        function divergingPow() {
          var scale = powish(transformer());
          scale.copy = function() {
            return copy(scale, divergingPow()).exponent(scale.exponent());
          };
          return initInterpolator.apply(scale, arguments);
        }
        function divergingSqrt() {
          return divergingPow.apply(null, arguments).exponent(0.5);
        }
        exports2.scaleBand = band;
        exports2.scaleDiverging = diverging;
        exports2.scaleDivergingLog = divergingLog;
        exports2.scaleDivergingPow = divergingPow;
        exports2.scaleDivergingSqrt = divergingSqrt;
        exports2.scaleDivergingSymlog = divergingSymlog;
        exports2.scaleIdentity = identity;
        exports2.scaleImplicit = implicit;
        exports2.scaleLinear = linear;
        exports2.scaleLog = log;
        exports2.scaleOrdinal = ordinal;
        exports2.scalePoint = point;
        exports2.scalePow = pow;
        exports2.scaleQuantile = quantile;
        exports2.scaleQuantize = quantize;
        exports2.scaleRadial = radial;
        exports2.scaleSequential = sequential;
        exports2.scaleSequentialLog = sequentialLog;
        exports2.scaleSequentialPow = sequentialPow;
        exports2.scaleSequentialQuantile = sequentialQuantile;
        exports2.scaleSequentialSqrt = sequentialSqrt;
        exports2.scaleSequentialSymlog = sequentialSymlog;
        exports2.scaleSqrt = sqrt;
        exports2.scaleSymlog = symlog;
        exports2.scaleThreshold = threshold;
        exports2.scaleTime = time;
        exports2.scaleUtc = utcTime;
        exports2.tickFormat = tickFormat;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-scale-chromatic-npm-2.0.0-75af9c90b0-9fe5b4c1d9.zip/node_modules/d3-scale-chromatic/dist/d3-scale-chromatic.js
  var require_d3_scale_chromatic = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-scale-chromatic-npm-2.0.0-75af9c90b0-9fe5b4c1d9.zip/node_modules/d3-scale-chromatic/dist/d3-scale-chromatic.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_interpolate(), require_d3_color()) : typeof define === "function" && define.amd ? define(["exports", "d3-interpolate", "d3-color"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3, global2.d3));
      })(exports, function(exports2, d3Interpolate, d3Color) {
        "use strict";
        function colors(specifier) {
          var n = specifier.length / 6 | 0, colors2 = new Array(n), i = 0;
          while (i < n)
            colors2[i] = "#" + specifier.slice(i * 6, ++i * 6);
          return colors2;
        }
        var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
        var Accent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");
        var Dark2 = colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");
        var Paired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");
        var Pastel1 = colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");
        var Pastel2 = colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");
        var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");
        var Set2 = colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");
        var Set3 = colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");
        var Tableau10 = colors("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");
        var ramp = (scheme2) => d3Interpolate.interpolateRgbBasis(scheme2[scheme2.length - 1]);
        var scheme = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(colors);
        var BrBG = ramp(scheme);
        var scheme$1 = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(colors);
        var PRGn = ramp(scheme$1);
        var scheme$2 = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(colors);
        var PiYG = ramp(scheme$2);
        var scheme$3 = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(colors);
        var PuOr = ramp(scheme$3);
        var scheme$4 = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(colors);
        var RdBu = ramp(scheme$4);
        var scheme$5 = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(colors);
        var RdGy = ramp(scheme$5);
        var scheme$6 = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(colors);
        var RdYlBu = ramp(scheme$6);
        var scheme$7 = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(colors);
        var RdYlGn = ramp(scheme$7);
        var scheme$8 = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(colors);
        var Spectral = ramp(scheme$8);
        var scheme$9 = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(colors);
        var BuGn = ramp(scheme$9);
        var scheme$a = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(colors);
        var BuPu = ramp(scheme$a);
        var scheme$b = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(colors);
        var GnBu = ramp(scheme$b);
        var scheme$c = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(colors);
        var OrRd = ramp(scheme$c);
        var scheme$d = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(colors);
        var PuBuGn = ramp(scheme$d);
        var scheme$e = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(colors);
        var PuBu = ramp(scheme$e);
        var scheme$f = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(colors);
        var PuRd = ramp(scheme$f);
        var scheme$g = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(colors);
        var RdPu = ramp(scheme$g);
        var scheme$h = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(colors);
        var YlGnBu = ramp(scheme$h);
        var scheme$i = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(colors);
        var YlGn = ramp(scheme$i);
        var scheme$j = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(colors);
        var YlOrBr = ramp(scheme$j);
        var scheme$k = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(colors);
        var YlOrRd = ramp(scheme$k);
        var scheme$l = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(colors);
        var Blues = ramp(scheme$l);
        var scheme$m = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(colors);
        var Greens = ramp(scheme$m);
        var scheme$n = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(colors);
        var Greys = ramp(scheme$n);
        var scheme$o = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(colors);
        var Purples = ramp(scheme$o);
        var scheme$p = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(colors);
        var Reds = ramp(scheme$p);
        var scheme$q = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(colors);
        var Oranges = ramp(scheme$q);
        function cividis(t) {
          t = Math.max(0, Math.min(1, t));
          return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
        }
        var cubehelix = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(300, 0.5, 0), d3Color.cubehelix(-240, 0.5, 1));
        var warm = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(-100, 0.75, 0.35), d3Color.cubehelix(80, 1.5, 0.8));
        var cool = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(260, 0.75, 0.35), d3Color.cubehelix(80, 1.5, 0.8));
        var c = d3Color.cubehelix();
        function rainbow(t) {
          if (t < 0 || t > 1)
            t -= Math.floor(t);
          var ts = Math.abs(t - 0.5);
          c.h = 360 * t - 100;
          c.s = 1.5 - 1.5 * ts;
          c.l = 0.8 - 0.9 * ts;
          return c + "";
        }
        var c$1 = d3Color.rgb(), pi_1_3 = Math.PI / 3, pi_2_3 = Math.PI * 2 / 3;
        function sinebow(t) {
          var x;
          t = (0.5 - t) * Math.PI;
          c$1.r = 255 * (x = Math.sin(t)) * x;
          c$1.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
          c$1.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
          return c$1 + "";
        }
        function turbo(t) {
          t = Math.max(0, Math.min(1, t));
          return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
        }
        function ramp$1(range) {
          var n = range.length;
          return function(t) {
            return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
          };
        }
        var viridis = ramp$1(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
        var magma = ramp$1(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
        var inferno = ramp$1(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
        var plasma = ramp$1(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
        exports2.interpolateBlues = Blues;
        exports2.interpolateBrBG = BrBG;
        exports2.interpolateBuGn = BuGn;
        exports2.interpolateBuPu = BuPu;
        exports2.interpolateCividis = cividis;
        exports2.interpolateCool = cool;
        exports2.interpolateCubehelixDefault = cubehelix;
        exports2.interpolateGnBu = GnBu;
        exports2.interpolateGreens = Greens;
        exports2.interpolateGreys = Greys;
        exports2.interpolateInferno = inferno;
        exports2.interpolateMagma = magma;
        exports2.interpolateOrRd = OrRd;
        exports2.interpolateOranges = Oranges;
        exports2.interpolatePRGn = PRGn;
        exports2.interpolatePiYG = PiYG;
        exports2.interpolatePlasma = plasma;
        exports2.interpolatePuBu = PuBu;
        exports2.interpolatePuBuGn = PuBuGn;
        exports2.interpolatePuOr = PuOr;
        exports2.interpolatePuRd = PuRd;
        exports2.interpolatePurples = Purples;
        exports2.interpolateRainbow = rainbow;
        exports2.interpolateRdBu = RdBu;
        exports2.interpolateRdGy = RdGy;
        exports2.interpolateRdPu = RdPu;
        exports2.interpolateRdYlBu = RdYlBu;
        exports2.interpolateRdYlGn = RdYlGn;
        exports2.interpolateReds = Reds;
        exports2.interpolateSinebow = sinebow;
        exports2.interpolateSpectral = Spectral;
        exports2.interpolateTurbo = turbo;
        exports2.interpolateViridis = viridis;
        exports2.interpolateWarm = warm;
        exports2.interpolateYlGn = YlGn;
        exports2.interpolateYlGnBu = YlGnBu;
        exports2.interpolateYlOrBr = YlOrBr;
        exports2.interpolateYlOrRd = YlOrRd;
        exports2.schemeAccent = Accent;
        exports2.schemeBlues = scheme$l;
        exports2.schemeBrBG = scheme;
        exports2.schemeBuGn = scheme$9;
        exports2.schemeBuPu = scheme$a;
        exports2.schemeCategory10 = category10;
        exports2.schemeDark2 = Dark2;
        exports2.schemeGnBu = scheme$b;
        exports2.schemeGreens = scheme$m;
        exports2.schemeGreys = scheme$n;
        exports2.schemeOrRd = scheme$c;
        exports2.schemeOranges = scheme$q;
        exports2.schemePRGn = scheme$1;
        exports2.schemePaired = Paired;
        exports2.schemePastel1 = Pastel1;
        exports2.schemePastel2 = Pastel2;
        exports2.schemePiYG = scheme$2;
        exports2.schemePuBu = scheme$e;
        exports2.schemePuBuGn = scheme$d;
        exports2.schemePuOr = scheme$3;
        exports2.schemePuRd = scheme$f;
        exports2.schemePurples = scheme$o;
        exports2.schemeRdBu = scheme$4;
        exports2.schemeRdGy = scheme$5;
        exports2.schemeRdPu = scheme$g;
        exports2.schemeRdYlBu = scheme$6;
        exports2.schemeRdYlGn = scheme$7;
        exports2.schemeReds = scheme$p;
        exports2.schemeSet1 = Set1;
        exports2.schemeSet2 = Set2;
        exports2.schemeSet3 = Set3;
        exports2.schemeSpectral = scheme$8;
        exports2.schemeTableau10 = Tableau10;
        exports2.schemeYlGn = scheme$i;
        exports2.schemeYlGnBu = scheme$h;
        exports2.schemeYlOrBr = scheme$j;
        exports2.schemeYlOrRd = scheme$k;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-shape-npm-2.1.0-9537c858fd-4a82a83fbb.zip/node_modules/d3-shape/dist/d3-shape.js
  var require_d3_shape = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-shape-npm-2.1.0-9537c858fd-4a82a83fbb.zip/node_modules/d3-shape/dist/d3-shape.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_path()) : typeof define === "function" && define.amd ? define(["exports", "d3-path"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3));
      })(exports, function(exports2, d3Path) {
        "use strict";
        function constant(x2) {
          return function constant2() {
            return x2;
          };
        }
        var abs = Math.abs;
        var atan2 = Math.atan2;
        var cos = Math.cos;
        var max = Math.max;
        var min = Math.min;
        var sin = Math.sin;
        var sqrt = Math.sqrt;
        var epsilon = 1e-12;
        var pi = Math.PI;
        var halfPi = pi / 2;
        var tau = 2 * pi;
        function acos(x2) {
          return x2 > 1 ? 0 : x2 < -1 ? pi : Math.acos(x2);
        }
        function asin(x2) {
          return x2 >= 1 ? halfPi : x2 <= -1 ? -halfPi : Math.asin(x2);
        }
        function arcInnerRadius(d) {
          return d.innerRadius;
        }
        function arcOuterRadius(d) {
          return d.outerRadius;
        }
        function arcStartAngle(d) {
          return d.startAngle;
        }
        function arcEndAngle(d) {
          return d.endAngle;
        }
        function arcPadAngle(d) {
          return d && d.padAngle;
        }
        function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
          var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
          if (t * t < epsilon)
            return;
          t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
          return [x0 + t * x10, y0 + t * y10];
        }
        function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
          var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
          if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
            cx0 = cx1, cy0 = cy1;
          return {
            cx: cx0,
            cy: cy0,
            x01: -ox,
            y01: -oy,
            x11: cx0 * (r1 / r - 1),
            y11: cy0 * (r1 / r - 1)
          };
        }
        function arc() {
          var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
          function arc2() {
            var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
            if (!context)
              context = buffer = d3Path.path();
            if (r1 < r0)
              r = r1, r1 = r0, r0 = r;
            if (!(r1 > epsilon))
              context.moveTo(0, 0);
            else if (da > tau - epsilon) {
              context.moveTo(r1 * cos(a0), r1 * sin(a0));
              context.arc(0, 0, r1, a0, a1, !cw);
              if (r0 > epsilon) {
                context.moveTo(r0 * cos(a1), r0 * sin(a1));
                context.arc(0, 0, r0, a1, a0, cw);
              }
            } else {
              var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)), rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
              if (rp > epsilon) {
                var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
                if ((da0 -= p0 * 2) > epsilon)
                  p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
                else
                  da0 = 0, a00 = a10 = (a0 + a1) / 2;
                if ((da1 -= p1 * 2) > epsilon)
                  p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
                else
                  da1 = 0, a01 = a11 = (a0 + a1) / 2;
              }
              var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
              if (rc > epsilon) {
                var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
                if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
                  var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2), lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                  rc0 = min(rc, (r0 - lc) / (kc - 1));
                  rc1 = min(rc, (r1 - lc) / (kc + 1));
                }
              }
              if (!(da1 > epsilon))
                context.moveTo(x01, y01);
              else if (rc1 > epsilon) {
                t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
                if (rc1 < rc)
                  context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);
                else {
                  context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
                }
              } else
                context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
              if (!(r0 > epsilon) || !(da0 > epsilon))
                context.lineTo(x10, y10);
              else if (rc0 > epsilon) {
                t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
                if (rc0 < rc)
                  context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);
                else {
                  context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
                }
              } else
                context.arc(0, 0, r0, a10, a00, cw);
            }
            context.closePath();
            if (buffer)
              return context = null, buffer + "" || null;
          }
          arc2.centroid = function() {
            var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a2 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
            return [cos(a2) * r, sin(a2) * r];
          };
          arc2.innerRadius = function(_) {
            return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc2) : innerRadius;
          };
          arc2.outerRadius = function(_) {
            return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc2) : outerRadius;
          };
          arc2.cornerRadius = function(_) {
            return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc2) : cornerRadius;
          };
          arc2.padRadius = function(_) {
            return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc2) : padRadius;
          };
          arc2.startAngle = function(_) {
            return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc2) : startAngle;
          };
          arc2.endAngle = function(_) {
            return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc2) : endAngle;
          };
          arc2.padAngle = function(_) {
            return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc2) : padAngle;
          };
          arc2.context = function(_) {
            return arguments.length ? (context = _ == null ? null : _, arc2) : context;
          };
          return arc2;
        }
        var slice = Array.prototype.slice;
        function array(x2) {
          return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
        }
        function Linear(context) {
          this._context = context;
        }
        Linear.prototype = {
          areaStart: function() {
            this._line = 0;
          },
          areaEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._point = 0;
          },
          lineEnd: function() {
            if (this._line || this._line !== 0 && this._point === 1)
              this._context.closePath();
            this._line = 1 - this._line;
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            switch (this._point) {
              case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
                break;
              case 1:
                this._point = 2;
              default:
                this._context.lineTo(x2, y2);
                break;
            }
          }
        };
        function curveLinear(context) {
          return new Linear(context);
        }
        function x(p) {
          return p[0];
        }
        function y(p) {
          return p[1];
        }
        function line2(x$1, y$1) {
          var defined = constant(true), context = null, curve = curveLinear, output = null;
          x$1 = typeof x$1 === "function" ? x$1 : x$1 === void 0 ? x : constant(x$1);
          y$1 = typeof y$1 === "function" ? y$1 : y$1 === void 0 ? y : constant(y$1);
          function line3(data) {
            var i, n = (data = array(data)).length, d, defined0 = false, buffer;
            if (context == null)
              output = curve(buffer = d3Path.path());
            for (i = 0; i <= n; ++i) {
              if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0)
                  output.lineStart();
                else
                  output.lineEnd();
              }
              if (defined0)
                output.point(+x$1(d, i, data), +y$1(d, i, data));
            }
            if (buffer)
              return output = null, buffer + "" || null;
          }
          line3.x = function(_) {
            return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line3) : x$1;
          };
          line3.y = function(_) {
            return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line3) : y$1;
          };
          line3.defined = function(_) {
            return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line3) : defined;
          };
          line3.curve = function(_) {
            return arguments.length ? (curve = _, context != null && (output = curve(context)), line3) : curve;
          };
          line3.context = function(_) {
            return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line3) : context;
          };
          return line3;
        }
        function area(x0, y0, y1) {
          var x1 = null, defined = constant(true), context = null, curve = curveLinear, output = null;
          x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x : constant(+x0);
          y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant(0) : constant(+y0);
          y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y : constant(+y1);
          function area2(data) {
            var i, j, k2, n = (data = array(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
            if (context == null)
              output = curve(buffer = d3Path.path());
            for (i = 0; i <= n; ++i) {
              if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) {
                  j = i;
                  output.areaStart();
                  output.lineStart();
                } else {
                  output.lineEnd();
                  output.lineStart();
                  for (k2 = i - 1; k2 >= j; --k2) {
                    output.point(x0z[k2], y0z[k2]);
                  }
                  output.lineEnd();
                  output.areaEnd();
                }
              }
              if (defined0) {
                x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
                output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
              }
            }
            if (buffer)
              return output = null, buffer + "" || null;
          }
          function arealine() {
            return line2().defined(defined).curve(curve).context(context);
          }
          area2.x = function(_) {
            return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area2) : x0;
          };
          area2.x0 = function(_) {
            return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area2) : x0;
          };
          area2.x1 = function(_) {
            return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area2) : x1;
          };
          area2.y = function(_) {
            return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area2) : y0;
          };
          area2.y0 = function(_) {
            return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area2) : y0;
          };
          area2.y1 = function(_) {
            return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area2) : y1;
          };
          area2.lineX0 = area2.lineY0 = function() {
            return arealine().x(x0).y(y0);
          };
          area2.lineY1 = function() {
            return arealine().x(x0).y(y1);
          };
          area2.lineX1 = function() {
            return arealine().x(x1).y(y0);
          };
          area2.defined = function(_) {
            return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area2) : defined;
          };
          area2.curve = function(_) {
            return arguments.length ? (curve = _, context != null && (output = curve(context)), area2) : curve;
          };
          area2.context = function(_) {
            return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area2) : context;
          };
          return area2;
        }
        function descending$1(a2, b) {
          return b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
        }
        function identity(d) {
          return d;
        }
        function pie() {
          var value = identity, sortValues = descending$1, sort = null, startAngle = constant(0), endAngle = constant(tau), padAngle = constant(0);
          function pie2(data) {
            var i, n = (data = array(data)).length, j, k2, sum2 = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
            for (i = 0; i < n; ++i) {
              if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
                sum2 += v;
              }
            }
            if (sortValues != null)
              index.sort(function(i2, j2) {
                return sortValues(arcs[i2], arcs[j2]);
              });
            else if (sort != null)
              index.sort(function(i2, j2) {
                return sort(data[i2], data[j2]);
              });
            for (i = 0, k2 = sum2 ? (da - n * pa) / sum2 : 0; i < n; ++i, a0 = a1) {
              j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k2 : 0) + pa, arcs[j] = {
                data: data[j],
                index: i,
                value: v,
                startAngle: a0,
                endAngle: a1,
                padAngle: p
              };
            }
            return arcs;
          }
          pie2.value = function(_) {
            return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie2) : value;
          };
          pie2.sortValues = function(_) {
            return arguments.length ? (sortValues = _, sort = null, pie2) : sortValues;
          };
          pie2.sort = function(_) {
            return arguments.length ? (sort = _, sortValues = null, pie2) : sort;
          };
          pie2.startAngle = function(_) {
            return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie2) : startAngle;
          };
          pie2.endAngle = function(_) {
            return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie2) : endAngle;
          };
          pie2.padAngle = function(_) {
            return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie2) : padAngle;
          };
          return pie2;
        }
        var curveRadialLinear = curveRadial$1(curveLinear);
        function Radial(curve) {
          this._curve = curve;
        }
        Radial.prototype = {
          areaStart: function() {
            this._curve.areaStart();
          },
          areaEnd: function() {
            this._curve.areaEnd();
          },
          lineStart: function() {
            this._curve.lineStart();
          },
          lineEnd: function() {
            this._curve.lineEnd();
          },
          point: function(a2, r) {
            this._curve.point(r * Math.sin(a2), r * -Math.cos(a2));
          }
        };
        function curveRadial$1(curve) {
          function radial(context) {
            return new Radial(curve(context));
          }
          radial._curve = curve;
          return radial;
        }
        function lineRadial(l) {
          var c2 = l.curve;
          l.angle = l.x, delete l.x;
          l.radius = l.y, delete l.y;
          l.curve = function(_) {
            return arguments.length ? c2(curveRadial$1(_)) : c2()._curve;
          };
          return l;
        }
        function lineRadial$1() {
          return lineRadial(line2().curve(curveRadialLinear));
        }
        function areaRadial() {
          var a2 = area().curve(curveRadialLinear), c2 = a2.curve, x0 = a2.lineX0, x1 = a2.lineX1, y0 = a2.lineY0, y1 = a2.lineY1;
          a2.angle = a2.x, delete a2.x;
          a2.startAngle = a2.x0, delete a2.x0;
          a2.endAngle = a2.x1, delete a2.x1;
          a2.radius = a2.y, delete a2.y;
          a2.innerRadius = a2.y0, delete a2.y0;
          a2.outerRadius = a2.y1, delete a2.y1;
          a2.lineStartAngle = function() {
            return lineRadial(x0());
          }, delete a2.lineX0;
          a2.lineEndAngle = function() {
            return lineRadial(x1());
          }, delete a2.lineX1;
          a2.lineInnerRadius = function() {
            return lineRadial(y0());
          }, delete a2.lineY0;
          a2.lineOuterRadius = function() {
            return lineRadial(y1());
          }, delete a2.lineY1;
          a2.curve = function(_) {
            return arguments.length ? c2(curveRadial$1(_)) : c2()._curve;
          };
          return a2;
        }
        function pointRadial(x2, y2) {
          return [(y2 = +y2) * Math.cos(x2 -= Math.PI / 2), y2 * Math.sin(x2)];
        }
        function linkSource(d) {
          return d.source;
        }
        function linkTarget(d) {
          return d.target;
        }
        function link(curve) {
          var source = linkSource, target = linkTarget, x$1 = x, y$1 = y, context = null;
          function link2() {
            var buffer, argv = slice.call(arguments), s2 = source.apply(this, argv), t = target.apply(this, argv);
            if (!context)
              context = buffer = d3Path.path();
            curve(context, +x$1.apply(this, (argv[0] = s2, argv)), +y$1.apply(this, argv), +x$1.apply(this, (argv[0] = t, argv)), +y$1.apply(this, argv));
            if (buffer)
              return context = null, buffer + "" || null;
          }
          link2.source = function(_) {
            return arguments.length ? (source = _, link2) : source;
          };
          link2.target = function(_) {
            return arguments.length ? (target = _, link2) : target;
          };
          link2.x = function(_) {
            return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), link2) : x$1;
          };
          link2.y = function(_) {
            return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), link2) : y$1;
          };
          link2.context = function(_) {
            return arguments.length ? (context = _ == null ? null : _, link2) : context;
          };
          return link2;
        }
        function curveHorizontal(context, x0, y0, x1, y1) {
          context.moveTo(x0, y0);
          context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
        }
        function curveVertical(context, x0, y0, x1, y1) {
          context.moveTo(x0, y0);
          context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
        }
        function curveRadial(context, x0, y0, x1, y1) {
          var p0 = pointRadial(x0, y0), p1 = pointRadial(x0, y0 = (y0 + y1) / 2), p2 = pointRadial(x1, y0), p3 = pointRadial(x1, y1);
          context.moveTo(p0[0], p0[1]);
          context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
        }
        function linkHorizontal() {
          return link(curveHorizontal);
        }
        function linkVertical() {
          return link(curveVertical);
        }
        function linkRadial() {
          var l = link(curveRadial);
          l.angle = l.x, delete l.x;
          l.radius = l.y, delete l.y;
          return l;
        }
        var circle = {
          draw: function(context, size) {
            var r = Math.sqrt(size / pi);
            context.moveTo(r, 0);
            context.arc(0, 0, r, 0, tau);
          }
        };
        var cross = {
          draw: function(context, size) {
            var r = Math.sqrt(size / 5) / 2;
            context.moveTo(-3 * r, -r);
            context.lineTo(-r, -r);
            context.lineTo(-r, -3 * r);
            context.lineTo(r, -3 * r);
            context.lineTo(r, -r);
            context.lineTo(3 * r, -r);
            context.lineTo(3 * r, r);
            context.lineTo(r, r);
            context.lineTo(r, 3 * r);
            context.lineTo(-r, 3 * r);
            context.lineTo(-r, r);
            context.lineTo(-3 * r, r);
            context.closePath();
          }
        };
        var tan30 = Math.sqrt(1 / 3), tan30_2 = tan30 * 2;
        var diamond = {
          draw: function(context, size) {
            var y2 = Math.sqrt(size / tan30_2), x2 = y2 * tan30;
            context.moveTo(0, -y2);
            context.lineTo(x2, 0);
            context.lineTo(0, y2);
            context.lineTo(-x2, 0);
            context.closePath();
          }
        };
        var ka = 0.8908130915292852, kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10), kx = Math.sin(tau / 10) * kr, ky = -Math.cos(tau / 10) * kr;
        var star = {
          draw: function(context, size) {
            var r = Math.sqrt(size * ka), x2 = kx * r, y2 = ky * r;
            context.moveTo(0, -r);
            context.lineTo(x2, y2);
            for (var i = 1; i < 5; ++i) {
              var a2 = tau * i / 5, c2 = Math.cos(a2), s2 = Math.sin(a2);
              context.lineTo(s2 * r, -c2 * r);
              context.lineTo(c2 * x2 - s2 * y2, s2 * x2 + c2 * y2);
            }
            context.closePath();
          }
        };
        var square = {
          draw: function(context, size) {
            var w = Math.sqrt(size), x2 = -w / 2;
            context.rect(x2, x2, w, w);
          }
        };
        var sqrt3 = Math.sqrt(3);
        var triangle = {
          draw: function(context, size) {
            var y2 = -Math.sqrt(size / (sqrt3 * 3));
            context.moveTo(0, y2 * 2);
            context.lineTo(-sqrt3 * y2, -y2);
            context.lineTo(sqrt3 * y2, -y2);
            context.closePath();
          }
        };
        var c = -0.5, s = Math.sqrt(3) / 2, k = 1 / Math.sqrt(12), a = (k / 2 + 1) * 3;
        var wye = {
          draw: function(context, size) {
            var r = Math.sqrt(size / a), x0 = r / 2, y0 = r * k, x1 = x0, y1 = r * k + r, x2 = -x1, y2 = y1;
            context.moveTo(x0, y0);
            context.lineTo(x1, y1);
            context.lineTo(x2, y2);
            context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
            context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
            context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
            context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
            context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
            context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
            context.closePath();
          }
        };
        var symbols = [
          circle,
          cross,
          diamond,
          square,
          star,
          triangle,
          wye
        ];
        function symbol(type, size) {
          var context = null;
          type = typeof type === "function" ? type : constant(type || circle);
          size = typeof size === "function" ? size : constant(size === void 0 ? 64 : +size);
          function symbol2() {
            var buffer;
            if (!context)
              context = buffer = d3Path.path();
            type.apply(this, arguments).draw(context, +size.apply(this, arguments));
            if (buffer)
              return context = null, buffer + "" || null;
          }
          symbol2.type = function(_) {
            return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol2) : type;
          };
          symbol2.size = function(_) {
            return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol2) : size;
          };
          symbol2.context = function(_) {
            return arguments.length ? (context = _ == null ? null : _, symbol2) : context;
          };
          return symbol2;
        }
        function noop() {
        }
        function point$3(that, x2, y2) {
          that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x2) / 6, (that._y0 + 4 * that._y1 + y2) / 6);
        }
        function Basis(context) {
          this._context = context;
        }
        Basis.prototype = {
          areaStart: function() {
            this._line = 0;
          },
          areaEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._x0 = this._x1 = this._y0 = this._y1 = NaN;
            this._point = 0;
          },
          lineEnd: function() {
            switch (this._point) {
              case 3:
                point$3(this, this._x1, this._y1);
              case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
            }
            if (this._line || this._line !== 0 && this._point === 1)
              this._context.closePath();
            this._line = 1 - this._line;
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            switch (this._point) {
              case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
                break;
              case 1:
                this._point = 2;
                break;
              case 2:
                this._point = 3;
                this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
              default:
                point$3(this, x2, y2);
                break;
            }
            this._x0 = this._x1, this._x1 = x2;
            this._y0 = this._y1, this._y1 = y2;
          }
        };
        function basis(context) {
          return new Basis(context);
        }
        function BasisClosed(context) {
          this._context = context;
        }
        BasisClosed.prototype = {
          areaStart: noop,
          areaEnd: noop,
          lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
            this._point = 0;
          },
          lineEnd: function() {
            switch (this._point) {
              case 1: {
                this._context.moveTo(this._x2, this._y2);
                this._context.closePath();
                break;
              }
              case 2: {
                this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                this._context.closePath();
                break;
              }
              case 3: {
                this.point(this._x2, this._y2);
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                break;
              }
            }
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            switch (this._point) {
              case 0:
                this._point = 1;
                this._x2 = x2, this._y2 = y2;
                break;
              case 1:
                this._point = 2;
                this._x3 = x2, this._y3 = y2;
                break;
              case 2:
                this._point = 3;
                this._x4 = x2, this._y4 = y2;
                this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
                break;
              default:
                point$3(this, x2, y2);
                break;
            }
            this._x0 = this._x1, this._x1 = x2;
            this._y0 = this._y1, this._y1 = y2;
          }
        };
        function basisClosed(context) {
          return new BasisClosed(context);
        }
        function BasisOpen(context) {
          this._context = context;
        }
        BasisOpen.prototype = {
          areaStart: function() {
            this._line = 0;
          },
          areaEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._x0 = this._x1 = this._y0 = this._y1 = NaN;
            this._point = 0;
          },
          lineEnd: function() {
            if (this._line || this._line !== 0 && this._point === 3)
              this._context.closePath();
            this._line = 1 - this._line;
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            switch (this._point) {
              case 0:
                this._point = 1;
                break;
              case 1:
                this._point = 2;
                break;
              case 2:
                this._point = 3;
                var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
                this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
                break;
              case 3:
                this._point = 4;
              default:
                point$3(this, x2, y2);
                break;
            }
            this._x0 = this._x1, this._x1 = x2;
            this._y0 = this._y1, this._y1 = y2;
          }
        };
        function basisOpen(context) {
          return new BasisOpen(context);
        }
        class Bump {
          constructor(context, x2) {
            this._context = context;
            this._x = x2;
          }
          areaStart() {
            this._line = 0;
          }
          areaEnd() {
            this._line = NaN;
          }
          lineStart() {
            this._point = 0;
          }
          lineEnd() {
            if (this._line || this._line !== 0 && this._point === 1)
              this._context.closePath();
            this._line = 1 - this._line;
          }
          point(x2, y2) {
            x2 = +x2, y2 = +y2;
            switch (this._point) {
              case 0: {
                this._point = 1;
                if (this._line)
                  this._context.lineTo(x2, y2);
                else
                  this._context.moveTo(x2, y2);
                break;
              }
              case 1:
                this._point = 2;
              default: {
                if (this._x)
                  this._context.bezierCurveTo(this._x0 = (this._x0 + x2) / 2, this._y0, this._x0, y2, x2, y2);
                else
                  this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y2) / 2, x2, this._y0, x2, y2);
                break;
              }
            }
            this._x0 = x2, this._y0 = y2;
          }
        }
        function bumpX(context) {
          return new Bump(context, true);
        }
        function bumpY(context) {
          return new Bump(context, false);
        }
        function Bundle(context, beta) {
          this._basis = new Basis(context);
          this._beta = beta;
        }
        Bundle.prototype = {
          lineStart: function() {
            this._x = [];
            this._y = [];
            this._basis.lineStart();
          },
          lineEnd: function() {
            var x2 = this._x, y2 = this._y, j = x2.length - 1;
            if (j > 0) {
              var x0 = x2[0], y0 = y2[0], dx = x2[j] - x0, dy = y2[j] - y0, i = -1, t;
              while (++i <= j) {
                t = i / j;
                this._basis.point(this._beta * x2[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y2[i] + (1 - this._beta) * (y0 + t * dy));
              }
            }
            this._x = this._y = null;
            this._basis.lineEnd();
          },
          point: function(x2, y2) {
            this._x.push(+x2);
            this._y.push(+y2);
          }
        };
        var bundle = function custom(beta) {
          function bundle2(context) {
            return beta === 1 ? new Basis(context) : new Bundle(context, beta);
          }
          bundle2.beta = function(beta2) {
            return custom(+beta2);
          };
          return bundle2;
        }(0.85);
        function point$2(that, x2, y2) {
          that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x2), that._y2 + that._k * (that._y1 - y2), that._x2, that._y2);
        }
        function Cardinal(context, tension) {
          this._context = context;
          this._k = (1 - tension) / 6;
        }
        Cardinal.prototype = {
          areaStart: function() {
            this._line = 0;
          },
          areaEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._point = 0;
          },
          lineEnd: function() {
            switch (this._point) {
              case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
              case 3:
                point$2(this, this._x1, this._y1);
                break;
            }
            if (this._line || this._line !== 0 && this._point === 1)
              this._context.closePath();
            this._line = 1 - this._line;
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            switch (this._point) {
              case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
                break;
              case 1:
                this._point = 2;
                this._x1 = x2, this._y1 = y2;
                break;
              case 2:
                this._point = 3;
              default:
                point$2(this, x2, y2);
                break;
            }
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
          }
        };
        var cardinal = function custom(tension) {
          function cardinal2(context) {
            return new Cardinal(context, tension);
          }
          cardinal2.tension = function(tension2) {
            return custom(+tension2);
          };
          return cardinal2;
        }(0);
        function CardinalClosed(context, tension) {
          this._context = context;
          this._k = (1 - tension) / 6;
        }
        CardinalClosed.prototype = {
          areaStart: noop,
          areaEnd: noop,
          lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
            this._point = 0;
          },
          lineEnd: function() {
            switch (this._point) {
              case 1: {
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
              }
              case 2: {
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
              }
              case 3: {
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
              }
            }
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            switch (this._point) {
              case 0:
                this._point = 1;
                this._x3 = x2, this._y3 = y2;
                break;
              case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x2, this._y4 = y2);
                break;
              case 2:
                this._point = 3;
                this._x5 = x2, this._y5 = y2;
                break;
              default:
                point$2(this, x2, y2);
                break;
            }
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
          }
        };
        var cardinalClosed = function custom(tension) {
          function cardinal2(context) {
            return new CardinalClosed(context, tension);
          }
          cardinal2.tension = function(tension2) {
            return custom(+tension2);
          };
          return cardinal2;
        }(0);
        function CardinalOpen(context, tension) {
          this._context = context;
          this._k = (1 - tension) / 6;
        }
        CardinalOpen.prototype = {
          areaStart: function() {
            this._line = 0;
          },
          areaEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._point = 0;
          },
          lineEnd: function() {
            if (this._line || this._line !== 0 && this._point === 3)
              this._context.closePath();
            this._line = 1 - this._line;
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            switch (this._point) {
              case 0:
                this._point = 1;
                break;
              case 1:
                this._point = 2;
                break;
              case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
              case 3:
                this._point = 4;
              default:
                point$2(this, x2, y2);
                break;
            }
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
          }
        };
        var cardinalOpen = function custom(tension) {
          function cardinal2(context) {
            return new CardinalOpen(context, tension);
          }
          cardinal2.tension = function(tension2) {
            return custom(+tension2);
          };
          return cardinal2;
        }(0);
        function point$1(that, x2, y2) {
          var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
          if (that._l01_a > epsilon) {
            var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
            x1 = (x1 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
            y1 = (y1 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
          }
          if (that._l23_a > epsilon) {
            var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
            x22 = (x22 * b + that._x1 * that._l23_2a - x2 * that._l12_2a) / m;
            y22 = (y22 * b + that._y1 * that._l23_2a - y2 * that._l12_2a) / m;
          }
          that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
        }
        function CatmullRom(context, alpha) {
          this._context = context;
          this._alpha = alpha;
        }
        CatmullRom.prototype = {
          areaStart: function() {
            this._line = 0;
          },
          areaEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
          },
          lineEnd: function() {
            switch (this._point) {
              case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
              case 3:
                this.point(this._x2, this._y2);
                break;
            }
            if (this._line || this._line !== 0 && this._point === 1)
              this._context.closePath();
            this._line = 1 - this._line;
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            if (this._point) {
              var x23 = this._x2 - x2, y23 = this._y2 - y2;
              this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
            }
            switch (this._point) {
              case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
                break;
              case 1:
                this._point = 2;
                break;
              case 2:
                this._point = 3;
              default:
                point$1(this, x2, y2);
                break;
            }
            this._l01_a = this._l12_a, this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
          }
        };
        var catmullRom = function custom(alpha) {
          function catmullRom2(context) {
            return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
          }
          catmullRom2.alpha = function(alpha2) {
            return custom(+alpha2);
          };
          return catmullRom2;
        }(0.5);
        function CatmullRomClosed(context, alpha) {
          this._context = context;
          this._alpha = alpha;
        }
        CatmullRomClosed.prototype = {
          areaStart: noop,
          areaEnd: noop,
          lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
          },
          lineEnd: function() {
            switch (this._point) {
              case 1: {
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
              }
              case 2: {
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
              }
              case 3: {
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
              }
            }
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            if (this._point) {
              var x23 = this._x2 - x2, y23 = this._y2 - y2;
              this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
            }
            switch (this._point) {
              case 0:
                this._point = 1;
                this._x3 = x2, this._y3 = y2;
                break;
              case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x2, this._y4 = y2);
                break;
              case 2:
                this._point = 3;
                this._x5 = x2, this._y5 = y2;
                break;
              default:
                point$1(this, x2, y2);
                break;
            }
            this._l01_a = this._l12_a, this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
          }
        };
        var catmullRomClosed = function custom(alpha) {
          function catmullRom2(context) {
            return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
          }
          catmullRom2.alpha = function(alpha2) {
            return custom(+alpha2);
          };
          return catmullRom2;
        }(0.5);
        function CatmullRomOpen(context, alpha) {
          this._context = context;
          this._alpha = alpha;
        }
        CatmullRomOpen.prototype = {
          areaStart: function() {
            this._line = 0;
          },
          areaEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
          },
          lineEnd: function() {
            if (this._line || this._line !== 0 && this._point === 3)
              this._context.closePath();
            this._line = 1 - this._line;
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            if (this._point) {
              var x23 = this._x2 - x2, y23 = this._y2 - y2;
              this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
            }
            switch (this._point) {
              case 0:
                this._point = 1;
                break;
              case 1:
                this._point = 2;
                break;
              case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
              case 3:
                this._point = 4;
              default:
                point$1(this, x2, y2);
                break;
            }
            this._l01_a = this._l12_a, this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
          }
        };
        var catmullRomOpen = function custom(alpha) {
          function catmullRom2(context) {
            return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
          }
          catmullRom2.alpha = function(alpha2) {
            return custom(+alpha2);
          };
          return catmullRom2;
        }(0.5);
        function LinearClosed(context) {
          this._context = context;
        }
        LinearClosed.prototype = {
          areaStart: noop,
          areaEnd: noop,
          lineStart: function() {
            this._point = 0;
          },
          lineEnd: function() {
            if (this._point)
              this._context.closePath();
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            if (this._point)
              this._context.lineTo(x2, y2);
            else
              this._point = 1, this._context.moveTo(x2, y2);
          }
        };
        function linearClosed(context) {
          return new LinearClosed(context);
        }
        function sign(x2) {
          return x2 < 0 ? -1 : 1;
        }
        function slope3(that, x2, y2) {
          var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
          return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
        }
        function slope2(that, t) {
          var h19 = that._x1 - that._x0;
          return h19 ? (3 * (that._y1 - that._y0) / h19 - t) / 2 : t;
        }
        function point(that, t0, t1) {
          var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
          that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
        }
        function MonotoneX(context) {
          this._context = context;
        }
        MonotoneX.prototype = {
          areaStart: function() {
            this._line = 0;
          },
          areaEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
            this._point = 0;
          },
          lineEnd: function() {
            switch (this._point) {
              case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
              case 3:
                point(this, this._t0, slope2(this, this._t0));
                break;
            }
            if (this._line || this._line !== 0 && this._point === 1)
              this._context.closePath();
            this._line = 1 - this._line;
          },
          point: function(x2, y2) {
            var t1 = NaN;
            x2 = +x2, y2 = +y2;
            if (x2 === this._x1 && y2 === this._y1)
              return;
            switch (this._point) {
              case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
                break;
              case 1:
                this._point = 2;
                break;
              case 2:
                this._point = 3;
                point(this, slope2(this, t1 = slope3(this, x2, y2)), t1);
                break;
              default:
                point(this, this._t0, t1 = slope3(this, x2, y2));
                break;
            }
            this._x0 = this._x1, this._x1 = x2;
            this._y0 = this._y1, this._y1 = y2;
            this._t0 = t1;
          }
        };
        function MonotoneY(context) {
          this._context = new ReflectContext(context);
        }
        (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
          MonotoneX.prototype.point.call(this, y2, x2);
        };
        function ReflectContext(context) {
          this._context = context;
        }
        ReflectContext.prototype = {
          moveTo: function(x2, y2) {
            this._context.moveTo(y2, x2);
          },
          closePath: function() {
            this._context.closePath();
          },
          lineTo: function(x2, y2) {
            this._context.lineTo(y2, x2);
          },
          bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
            this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
          }
        };
        function monotoneX(context) {
          return new MonotoneX(context);
        }
        function monotoneY(context) {
          return new MonotoneY(context);
        }
        function Natural(context) {
          this._context = context;
        }
        Natural.prototype = {
          areaStart: function() {
            this._line = 0;
          },
          areaEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._x = [];
            this._y = [];
          },
          lineEnd: function() {
            var x2 = this._x, y2 = this._y, n = x2.length;
            if (n) {
              this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
              if (n === 2) {
                this._context.lineTo(x2[1], y2[1]);
              } else {
                var px = controlPoints(x2), py = controlPoints(y2);
                for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
                  this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
                }
              }
            }
            if (this._line || this._line !== 0 && n === 1)
              this._context.closePath();
            this._line = 1 - this._line;
            this._x = this._y = null;
          },
          point: function(x2, y2) {
            this._x.push(+x2);
            this._y.push(+y2);
          }
        };
        function controlPoints(x2) {
          var i, n = x2.length - 1, m, a2 = new Array(n), b = new Array(n), r = new Array(n);
          a2[0] = 0, b[0] = 2, r[0] = x2[0] + 2 * x2[1];
          for (i = 1; i < n - 1; ++i)
            a2[i] = 1, b[i] = 4, r[i] = 4 * x2[i] + 2 * x2[i + 1];
          a2[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x2[n - 1] + x2[n];
          for (i = 1; i < n; ++i)
            m = a2[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
          a2[n - 1] = r[n - 1] / b[n - 1];
          for (i = n - 2; i >= 0; --i)
            a2[i] = (r[i] - a2[i + 1]) / b[i];
          b[n - 1] = (x2[n] + a2[n - 1]) / 2;
          for (i = 0; i < n - 1; ++i)
            b[i] = 2 * x2[i + 1] - a2[i + 1];
          return [a2, b];
        }
        function natural(context) {
          return new Natural(context);
        }
        function Step(context, t) {
          this._context = context;
          this._t = t;
        }
        Step.prototype = {
          areaStart: function() {
            this._line = 0;
          },
          areaEnd: function() {
            this._line = NaN;
          },
          lineStart: function() {
            this._x = this._y = NaN;
            this._point = 0;
          },
          lineEnd: function() {
            if (0 < this._t && this._t < 1 && this._point === 2)
              this._context.lineTo(this._x, this._y);
            if (this._line || this._line !== 0 && this._point === 1)
              this._context.closePath();
            if (this._line >= 0)
              this._t = 1 - this._t, this._line = 1 - this._line;
          },
          point: function(x2, y2) {
            x2 = +x2, y2 = +y2;
            switch (this._point) {
              case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
                break;
              case 1:
                this._point = 2;
              default: {
                if (this._t <= 0) {
                  this._context.lineTo(this._x, y2);
                  this._context.lineTo(x2, y2);
                } else {
                  var x1 = this._x * (1 - this._t) + x2 * this._t;
                  this._context.lineTo(x1, this._y);
                  this._context.lineTo(x1, y2);
                }
                break;
              }
            }
            this._x = x2, this._y = y2;
          }
        };
        function step(context) {
          return new Step(context, 0.5);
        }
        function stepBefore(context) {
          return new Step(context, 0);
        }
        function stepAfter(context) {
          return new Step(context, 1);
        }
        function none$1(series, order) {
          if (!((n = series.length) > 1))
            return;
          for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
            s0 = s1, s1 = series[order[i]];
            for (j = 0; j < m; ++j) {
              s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
            }
          }
        }
        function none(series) {
          var n = series.length, o = new Array(n);
          while (--n >= 0)
            o[n] = n;
          return o;
        }
        function stackValue(d, key) {
          return d[key];
        }
        function stackSeries(key) {
          const series = [];
          series.key = key;
          return series;
        }
        function stack() {
          var keys = constant([]), order = none, offset = none$1, value = stackValue;
          function stack2(data) {
            var sz = Array.from(keys.apply(this, arguments), stackSeries), i, n = sz.length, j = -1, oz;
            for (const d of data) {
              for (i = 0, ++j; i < n; ++i) {
                (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
              }
            }
            for (i = 0, oz = array(order(sz)); i < n; ++i) {
              sz[oz[i]].index = i;
            }
            offset(sz, oz);
            return sz;
          }
          stack2.keys = function(_) {
            return arguments.length ? (keys = typeof _ === "function" ? _ : constant(Array.from(_)), stack2) : keys;
          };
          stack2.value = function(_) {
            return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack2) : value;
          };
          stack2.order = function(_) {
            return arguments.length ? (order = _ == null ? none : typeof _ === "function" ? _ : constant(Array.from(_)), stack2) : order;
          };
          stack2.offset = function(_) {
            return arguments.length ? (offset = _ == null ? none$1 : _, stack2) : offset;
          };
          return stack2;
        }
        function expand(series, order) {
          if (!((n = series.length) > 0))
            return;
          for (var i, n, j = 0, m = series[0].length, y2; j < m; ++j) {
            for (y2 = i = 0; i < n; ++i)
              y2 += series[i][j][1] || 0;
            if (y2)
              for (i = 0; i < n; ++i)
                series[i][j][1] /= y2;
          }
          none$1(series, order);
        }
        function diverging(series, order) {
          if (!((n = series.length) > 0))
            return;
          for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
            for (yp = yn = 0, i = 0; i < n; ++i) {
              if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
                d[0] = yp, d[1] = yp += dy;
              } else if (dy < 0) {
                d[1] = yn, d[0] = yn += dy;
              } else {
                d[0] = 0, d[1] = dy;
              }
            }
          }
        }
        function silhouette(series, order) {
          if (!((n = series.length) > 0))
            return;
          for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
            for (var i = 0, y2 = 0; i < n; ++i)
              y2 += series[i][j][1] || 0;
            s0[j][1] += s0[j][0] = -y2 / 2;
          }
          none$1(series, order);
        }
        function wiggle(series, order) {
          if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0))
            return;
          for (var y2 = 0, j = 1, s0, m, n; j < m; ++j) {
            for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
              var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
              for (var k2 = 0; k2 < i; ++k2) {
                var sk = series[order[k2]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
                s3 += skj0 - skj1;
              }
              s1 += sij0, s2 += s3 * sij0;
            }
            s0[j - 1][1] += s0[j - 1][0] = y2;
            if (s1)
              y2 -= s2 / s1;
          }
          s0[j - 1][1] += s0[j - 1][0] = y2;
          none$1(series, order);
        }
        function appearance(series) {
          var peaks = series.map(peak);
          return none(series).sort(function(a2, b) {
            return peaks[a2] - peaks[b];
          });
        }
        function peak(series) {
          var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
          while (++i < n)
            if ((vi = +series[i][1]) > vj)
              vj = vi, j = i;
          return j;
        }
        function ascending(series) {
          var sums = series.map(sum);
          return none(series).sort(function(a2, b) {
            return sums[a2] - sums[b];
          });
        }
        function sum(series) {
          var s2 = 0, i = -1, n = series.length, v;
          while (++i < n)
            if (v = +series[i][1])
              s2 += v;
          return s2;
        }
        function descending(series) {
          return ascending(series).reverse();
        }
        function insideOut(series) {
          var n = series.length, i, j, sums = series.map(sum), order = appearance(series), top = 0, bottom = 0, tops = [], bottoms = [];
          for (i = 0; i < n; ++i) {
            j = order[i];
            if (top < bottom) {
              top += sums[j];
              tops.push(j);
            } else {
              bottom += sums[j];
              bottoms.push(j);
            }
          }
          return bottoms.reverse().concat(tops);
        }
        function reverse(series) {
          return none(series).reverse();
        }
        exports2.arc = arc;
        exports2.area = area;
        exports2.areaRadial = areaRadial;
        exports2.curveBasis = basis;
        exports2.curveBasisClosed = basisClosed;
        exports2.curveBasisOpen = basisOpen;
        exports2.curveBumpX = bumpX;
        exports2.curveBumpY = bumpY;
        exports2.curveBundle = bundle;
        exports2.curveCardinal = cardinal;
        exports2.curveCardinalClosed = cardinalClosed;
        exports2.curveCardinalOpen = cardinalOpen;
        exports2.curveCatmullRom = catmullRom;
        exports2.curveCatmullRomClosed = catmullRomClosed;
        exports2.curveCatmullRomOpen = catmullRomOpen;
        exports2.curveLinear = curveLinear;
        exports2.curveLinearClosed = linearClosed;
        exports2.curveMonotoneX = monotoneX;
        exports2.curveMonotoneY = monotoneY;
        exports2.curveNatural = natural;
        exports2.curveStep = step;
        exports2.curveStepAfter = stepAfter;
        exports2.curveStepBefore = stepBefore;
        exports2.line = line2;
        exports2.lineRadial = lineRadial$1;
        exports2.linkHorizontal = linkHorizontal;
        exports2.linkRadial = linkRadial;
        exports2.linkVertical = linkVertical;
        exports2.pie = pie;
        exports2.pointRadial = pointRadial;
        exports2.radialArea = areaRadial;
        exports2.radialLine = lineRadial$1;
        exports2.stack = stack;
        exports2.stackOffsetDiverging = diverging;
        exports2.stackOffsetExpand = expand;
        exports2.stackOffsetNone = none$1;
        exports2.stackOffsetSilhouette = silhouette;
        exports2.stackOffsetWiggle = wiggle;
        exports2.stackOrderAppearance = appearance;
        exports2.stackOrderAscending = ascending;
        exports2.stackOrderDescending = descending;
        exports2.stackOrderInsideOut = insideOut;
        exports2.stackOrderNone = none;
        exports2.stackOrderReverse = reverse;
        exports2.symbol = symbol;
        exports2.symbolCircle = circle;
        exports2.symbolCross = cross;
        exports2.symbolDiamond = diamond;
        exports2.symbolSquare = square;
        exports2.symbolStar = star;
        exports2.symbolTriangle = triangle;
        exports2.symbolWye = wye;
        exports2.symbols = symbols;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-zoom-npm-2.0.0-643f83d80d-d98cc6ffa1.zip/node_modules/d3-zoom/dist/d3-zoom.js
  var require_d3_zoom = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-zoom-npm-2.0.0-643f83d80d-d98cc6ffa1.zip/node_modules/d3-zoom/dist/d3-zoom.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_d3_dispatch(), require_d3_drag(), require_d3_interpolate(), require_d3_selection(), require_d3_transition()) : typeof define === "function" && define.amd ? define(["exports", "d3-dispatch", "d3-drag", "d3-interpolate", "d3-selection", "d3-transition"], factory) : (global2 = global2 || self, factory(global2.d3 = global2.d3 || {}, global2.d3, global2.d3, global2.d3, global2.d3, global2.d3));
      })(exports, function(exports2, d3Dispatch, d3Drag, d3Interpolate, d3Selection, d3Transition) {
        "use strict";
        var constant = (x) => () => x;
        function ZoomEvent(type, {
          sourceEvent,
          target,
          transform: transform2,
          dispatch
        }) {
          Object.defineProperties(this, {
            type: { value: type, enumerable: true, configurable: true },
            sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
            target: { value: target, enumerable: true, configurable: true },
            transform: { value: transform2, enumerable: true, configurable: true },
            _: { value: dispatch }
          });
        }
        function Transform(k, x, y) {
          this.k = k;
          this.x = x;
          this.y = y;
        }
        Transform.prototype = {
          constructor: Transform,
          scale: function(k) {
            return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
          },
          translate: function(x, y) {
            return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
          },
          apply: function(point) {
            return [point[0] * this.k + this.x, point[1] * this.k + this.y];
          },
          applyX: function(x) {
            return x * this.k + this.x;
          },
          applyY: function(y) {
            return y * this.k + this.y;
          },
          invert: function(location2) {
            return [(location2[0] - this.x) / this.k, (location2[1] - this.y) / this.k];
          },
          invertX: function(x) {
            return (x - this.x) / this.k;
          },
          invertY: function(y) {
            return (y - this.y) / this.k;
          },
          rescaleX: function(x) {
            return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
          },
          rescaleY: function(y) {
            return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
          },
          toString: function() {
            return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
          }
        };
        var identity = new Transform(1, 0, 0);
        transform.prototype = Transform.prototype;
        function transform(node) {
          while (!node.__zoom)
            if (!(node = node.parentNode))
              return identity;
          return node.__zoom;
        }
        function nopropagation(event) {
          event.stopImmediatePropagation();
        }
        function noevent(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
        }
        function defaultFilter(event) {
          return (!event.ctrlKey || event.type === "wheel") && !event.button;
        }
        function defaultExtent() {
          var e = this;
          if (e instanceof SVGElement) {
            e = e.ownerSVGElement || e;
            if (e.hasAttribute("viewBox")) {
              e = e.viewBox.baseVal;
              return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
            }
            return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
          }
          return [[0, 0], [e.clientWidth, e.clientHeight]];
        }
        function defaultTransform() {
          return this.__zoom || identity;
        }
        function defaultWheelDelta(event) {
          return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
        }
        function defaultTouchable() {
          return navigator.maxTouchPoints || "ontouchstart" in this;
        }
        function defaultConstrain(transform2, extent, translateExtent) {
          var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
          return transform2.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
        }
        function zoom() {
          var filter = defaultFilter, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = d3Interpolate.interpolateZoom, listeners = d3Dispatch.dispatch("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
          function zoom2(selection) {
            selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
          }
          zoom2.transform = function(collection, transform2, point, event) {
            var selection = collection.selection ? collection.selection() : collection;
            selection.property("__zoom", defaultTransform);
            if (collection !== selection) {
              schedule(collection, transform2, point, event);
            } else {
              selection.interrupt().each(function() {
                gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
              });
            }
          };
          zoom2.scaleBy = function(selection, k, p, event) {
            zoom2.scaleTo(selection, function() {
              var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
              return k0 * k1;
            }, p, event);
          };
          zoom2.scaleTo = function(selection, k, p, event) {
            zoom2.transform(selection, function() {
              var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
              return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
            }, p, event);
          };
          zoom2.translateBy = function(selection, x, y, event) {
            zoom2.transform(selection, function() {
              return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
            }, null, event);
          };
          zoom2.translateTo = function(selection, x, y, p, event) {
            zoom2.transform(selection, function() {
              var e = extent.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
              return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
            }, p, event);
          };
          function scale(transform2, k) {
            k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
            return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
          }
          function translate(transform2, p0, p1) {
            var x = p0[0] - p1[0] * transform2.k, y = p0[1] - p1[1] * transform2.k;
            return x === transform2.x && y === transform2.y ? transform2 : new Transform(transform2.k, x, y);
          }
          function centroid(extent2) {
            return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
          }
          function schedule(transition, transform2, point, event) {
            transition.on("start.zoom", function() {
              gesture(this, arguments).event(event).start();
            }).on("interrupt.zoom end.zoom", function() {
              gesture(this, arguments).event(event).end();
            }).tween("zoom", function() {
              var that = this, args = arguments, g = gesture(that, args).event(event), e = extent.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
              return function(t) {
                if (t === 1)
                  t = b;
                else {
                  var l = i(t), k = w / l[2];
                  t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
                }
                g.zoom(null, t);
              };
            });
          }
          function gesture(that, args, clean) {
            return !clean && that.__zooming || new Gesture(that, args);
          }
          function Gesture(that, args) {
            this.that = that;
            this.args = args;
            this.active = 0;
            this.sourceEvent = null;
            this.extent = extent.apply(that, args);
            this.taps = 0;
          }
          Gesture.prototype = {
            event: function(event) {
              if (event)
                this.sourceEvent = event;
              return this;
            },
            start: function() {
              if (++this.active === 1) {
                this.that.__zooming = this;
                this.emit("start");
              }
              return this;
            },
            zoom: function(key, transform2) {
              if (this.mouse && key !== "mouse")
                this.mouse[1] = transform2.invert(this.mouse[0]);
              if (this.touch0 && key !== "touch")
                this.touch0[1] = transform2.invert(this.touch0[0]);
              if (this.touch1 && key !== "touch")
                this.touch1[1] = transform2.invert(this.touch1[0]);
              this.that.__zoom = transform2;
              this.emit("zoom");
              return this;
            },
            end: function() {
              if (--this.active === 0) {
                delete this.that.__zooming;
                this.emit("end");
              }
              return this;
            },
            emit: function(type) {
              var d = d3Selection.select(this.that).datum();
              listeners.call(type, this.that, new ZoomEvent(type, {
                sourceEvent: this.sourceEvent,
                target: zoom2,
                type,
                transform: this.that.__zoom,
                dispatch: listeners
              }), d);
            }
          };
          function wheeled(event, ...args) {
            if (!filter.apply(this, arguments))
              return;
            var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = d3Selection.pointer(event);
            if (g.wheel) {
              if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
                g.mouse[1] = t.invert(g.mouse[0] = p);
              }
              clearTimeout(g.wheel);
            } else if (t.k === k)
              return;
            else {
              g.mouse = [p, t.invert(p)];
              d3Transition.interrupt(this);
              g.start();
            }
            noevent(event);
            g.wheel = setTimeout(wheelidled, wheelDelay);
            g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
            function wheelidled() {
              g.wheel = null;
              g.end();
            }
          }
          function mousedowned(event, ...args) {
            if (touchending || !filter.apply(this, arguments))
              return;
            var g = gesture(this, args, true).event(event), v = d3Selection.select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = d3Selection.pointer(event, currentTarget), currentTarget = event.currentTarget, x0 = event.clientX, y0 = event.clientY;
            d3Drag.dragDisable(event.view);
            nopropagation(event);
            g.mouse = [p, this.__zoom.invert(p)];
            d3Transition.interrupt(this);
            g.start();
            function mousemoved(event2) {
              noevent(event2);
              if (!g.moved) {
                var dx = event2.clientX - x0, dy = event2.clientY - y0;
                g.moved = dx * dx + dy * dy > clickDistance2;
              }
              g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = d3Selection.pointer(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
            }
            function mouseupped(event2) {
              v.on("mousemove.zoom mouseup.zoom", null);
              d3Drag.dragEnable(event2.view, g.moved);
              noevent(event2);
              g.event(event2).end();
            }
          }
          function dblclicked(event, ...args) {
            if (!filter.apply(this, arguments))
              return;
            var t0 = this.__zoom, p0 = d3Selection.pointer(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
            noevent(event);
            if (duration > 0)
              d3Selection.select(this).transition().duration(duration).call(schedule, t1, p0, event);
            else
              d3Selection.select(this).call(zoom2.transform, t1, p0, event);
          }
          function touchstarted(event, ...args) {
            if (!filter.apply(this, arguments))
              return;
            var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
            nopropagation(event);
            for (i = 0; i < n; ++i) {
              t = touches[i], p = d3Selection.pointer(t, this);
              p = [p, this.__zoom.invert(p), t.identifier];
              if (!g.touch0)
                g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
              else if (!g.touch1 && g.touch0[2] !== p[2])
                g.touch1 = p, g.taps = 0;
            }
            if (touchstarting)
              touchstarting = clearTimeout(touchstarting);
            if (started) {
              if (g.taps < 2)
                touchfirst = p[0], touchstarting = setTimeout(function() {
                  touchstarting = null;
                }, touchDelay);
              d3Transition.interrupt(this);
              g.start();
            }
          }
          function touchmoved(event, ...args) {
            if (!this.__zooming)
              return;
            var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
            noevent(event);
            for (i = 0; i < n; ++i) {
              t = touches[i], p = d3Selection.pointer(t, this);
              if (g.touch0 && g.touch0[2] === t.identifier)
                g.touch0[0] = p;
              else if (g.touch1 && g.touch1[2] === t.identifier)
                g.touch1[0] = p;
            }
            t = g.that.__zoom;
            if (g.touch1) {
              var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
              t = scale(t, Math.sqrt(dp / dl));
              p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
              l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
            } else if (g.touch0)
              p = g.touch0[0], l = g.touch0[1];
            else
              return;
            g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
          }
          function touchended(event, ...args) {
            if (!this.__zooming)
              return;
            var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
            nopropagation(event);
            if (touchending)
              clearTimeout(touchending);
            touchending = setTimeout(function() {
              touchending = null;
            }, touchDelay);
            for (i = 0; i < n; ++i) {
              t = touches[i];
              if (g.touch0 && g.touch0[2] === t.identifier)
                delete g.touch0;
              else if (g.touch1 && g.touch1[2] === t.identifier)
                delete g.touch1;
            }
            if (g.touch1 && !g.touch0)
              g.touch0 = g.touch1, delete g.touch1;
            if (g.touch0)
              g.touch0[1] = this.__zoom.invert(g.touch0[0]);
            else {
              g.end();
              if (g.taps === 2) {
                t = d3Selection.pointer(t, this);
                if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
                  var p = d3Selection.select(this).on("dblclick.zoom");
                  if (p)
                    p.apply(this, arguments);
                }
              }
            }
          }
          zoom2.wheelDelta = function(_) {
            return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom2) : wheelDelta;
          };
          zoom2.filter = function(_) {
            return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom2) : filter;
          };
          zoom2.touchable = function(_) {
            return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom2) : touchable;
          };
          zoom2.extent = function(_) {
            return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom2) : extent;
          };
          zoom2.scaleExtent = function(_) {
            return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom2) : [scaleExtent[0], scaleExtent[1]];
          };
          zoom2.translateExtent = function(_) {
            return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom2) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
          };
          zoom2.constrain = function(_) {
            return arguments.length ? (constrain = _, zoom2) : constrain;
          };
          zoom2.duration = function(_) {
            return arguments.length ? (duration = +_, zoom2) : duration;
          };
          zoom2.interpolate = function(_) {
            return arguments.length ? (interpolate = _, zoom2) : interpolate;
          };
          zoom2.on = function() {
            var value = listeners.on.apply(listeners, arguments);
            return value === listeners ? zoom2 : value;
          };
          zoom2.clickDistance = function(_) {
            return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom2) : Math.sqrt(clickDistance2);
          };
          zoom2.tapDistance = function(_) {
            return arguments.length ? (tapDistance = +_, zoom2) : tapDistance;
          };
          return zoom2;
        }
        exports2.zoom = zoom;
        exports2.zoomIdentity = identity;
        exports2.zoomTransform = transform;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-npm-6.7.0-46f157a97a-68e37250ba.zip/node_modules/d3/dist/d3.node.js
  var require_d3_node = __commonJS({
    "pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-npm-6.7.0-46f157a97a-68e37250ba.zip/node_modules/d3/dist/d3.node.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var d3Array = require_d3_array();
      var d3Axis = require_d3_axis();
      var d3Brush = require_d3_brush();
      var d3Chord = require_d3_chord();
      var d3Color = require_d3_color();
      var d3Contour = require_d3_contour();
      var d3Delaunay = require_d3_delaunay();
      var d3Dispatch = require_d3_dispatch();
      var d3Drag = require_d3_drag();
      var d3Dsv = require_d3_dsv();
      var d3Ease = require_d3_ease();
      var d3Fetch = require_d3_fetch();
      var d3Force = require_d3_force();
      var d3Format = require_d3_format();
      var d3Geo = require_d3_geo();
      var d3Hierarchy = require_d3_hierarchy();
      var d3Interpolate = require_d3_interpolate();
      var d3Path = require_d3_path();
      var d3Polygon = require_d3_polygon();
      var d3Quadtree = require_d3_quadtree();
      var d3Random = require_d3_random();
      var d3Scale = require_d3_scale();
      var d3ScaleChromatic = require_d3_scale_chromatic();
      var d3Selection = require_d3_selection();
      var d3Shape = require_d3_shape();
      var d3Time = require_d3_time();
      var d3TimeFormat = require_d3_time_format();
      var d3Timer = require_d3_timer();
      var d3Transition = require_d3_transition();
      var d3Zoom = require_d3_zoom();
      var version2 = "6.7.0";
      exports.version = version2;
      Object.keys(d3Array).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Array[k];
            }
          });
      });
      Object.keys(d3Axis).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Axis[k];
            }
          });
      });
      Object.keys(d3Brush).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Brush[k];
            }
          });
      });
      Object.keys(d3Chord).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Chord[k];
            }
          });
      });
      Object.keys(d3Color).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Color[k];
            }
          });
      });
      Object.keys(d3Contour).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Contour[k];
            }
          });
      });
      Object.keys(d3Delaunay).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Delaunay[k];
            }
          });
      });
      Object.keys(d3Dispatch).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Dispatch[k];
            }
          });
      });
      Object.keys(d3Drag).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Drag[k];
            }
          });
      });
      Object.keys(d3Dsv).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Dsv[k];
            }
          });
      });
      Object.keys(d3Ease).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Ease[k];
            }
          });
      });
      Object.keys(d3Fetch).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Fetch[k];
            }
          });
      });
      Object.keys(d3Force).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Force[k];
            }
          });
      });
      Object.keys(d3Format).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Format[k];
            }
          });
      });
      Object.keys(d3Geo).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Geo[k];
            }
          });
      });
      Object.keys(d3Hierarchy).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Hierarchy[k];
            }
          });
      });
      Object.keys(d3Interpolate).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Interpolate[k];
            }
          });
      });
      Object.keys(d3Path).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Path[k];
            }
          });
      });
      Object.keys(d3Polygon).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Polygon[k];
            }
          });
      });
      Object.keys(d3Quadtree).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Quadtree[k];
            }
          });
      });
      Object.keys(d3Random).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Random[k];
            }
          });
      });
      Object.keys(d3Scale).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Scale[k];
            }
          });
      });
      Object.keys(d3ScaleChromatic).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3ScaleChromatic[k];
            }
          });
      });
      Object.keys(d3Selection).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Selection[k];
            }
          });
      });
      Object.keys(d3Shape).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Shape[k];
            }
          });
      });
      Object.keys(d3Time).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Time[k];
            }
          });
      });
      Object.keys(d3TimeFormat).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3TimeFormat[k];
            }
          });
      });
      Object.keys(d3Timer).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Timer[k];
            }
          });
      });
      Object.keys(d3Transition).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Transition[k];
            }
          });
      });
      Object.keys(d3Zoom).forEach(function(k) {
        if (k !== "default" && !exports.hasOwnProperty(k))
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return d3Zoom[k];
            }
          });
      });
    }
  });

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/index.jsx
  var import_preact17 = __toModule(require_preact());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/context/language-context.jsx
  var import_preact = __toModule(require_preact());
  var import_hooks = __toModule(require_hooks());
  var import_preact_i18n = __toModule(require_preact_i18n());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/i18n/fr.json
  var language = "English";
  var header = {
    title: "Recensement Cartographique",
    home: "Accueil",
    results: "R\xE9sultats",
    form: "Formulaire",
    lang: "English"
  };
  var home = {
    title: "Page d'accueil",
    content: "Pr\xE9sentation du projet..."
  };
  var results = {
    title: "R\xE9sultats",
    content: "Pr\xE9sentation des r\xE9sultats...",
    knobs: {
      title: "Options de visualisation",
      graphtype: "Type de graphique:",
      scatterplot: "nuage de points",
      density: "nuage de points avec courbe de densit\xE9",
      contourScatter: "nuage de points avec topographie",
      contour: "contour",
      colorContour: "topographie",
      heatmap: "heatmap",
      numbers: "d\xE9comptes",
      percentage: "pourcentage",
      revColor: "invers\xE9?",
      dotsize: "Taille des points",
      dotopacity: "Opacit\xE9 des points",
      colormid: "Courbe de couleur",
      color: "Coloration",
      chooseRespondents: "Afficher les r\xE9pondant.e.s provenants de...",
      selected: "s\xE9lectionn\xE9.e.s",
      custom: "Combiner des questions en un diagramme sur mesure",
      horizontal: "Axe horizontal",
      vertical: "Axe vertical",
      z: "3i\xE8me dimension",
      option: "choisissez une option",
      showdata: "Afficher les r\xE9ponses de",
      aga: "Sobey Art Award Exhibition, Art Gallery of Alberta, Edmonton, 5 octobre 2019 au 5 janvier 2020",
      ba: 'Expo "Positions", Galerie Bradley Ertaskiran, Montr\xE9al, 24 janvier au 7 mars 2020',
      engforms: "Formulaires anglais",
      frforms: "Formulaires fran\xE7ais",
      respondents: "r\xE9pondant.e.s",
      reset: "R\xE9initialiser",
      clickto: "Cliquez pour afficher / cacher",
      show: "afficher",
      hide: "cacher",
      questions: {
        "0": "D\xE9but / fin de ma vie",
        "1": "C'est facile / dur d'exister dans ce monde",
        "2": "La vie n'est que la vie / besoin de signification",
        "3": "Normes sociales universelles / culturelles",
        "4": "Jamais quitt\xE9 / me d\xE9place constamment",
        "5": "Profonde connexion / ne pense pas territoire",
        "6": "R\xE9alit\xE9 concr\xE8te / grandes abstractions",
        "7": "Je crois / ne crois pas l\xE9gitimit\xE9 ordre mondial",
        "8": "D\xE9finis identit\xE9 moi-m\xEAme / avec groupes",
        "9": "S'exposer m\xE8ne \xE0 tol\xE9rance / confrontation",
        "10": "Nous allons vers autodestruction / progr\xE8s",
        "11": "Impact cosmologique / aucun impact",
        "12": "D\xE9fendre l'\xE9conomie / prot\xE9ger la plan\xE8te",
        "13": "Donner ma vie / indiff\xE9rent.e",
        "14": "J'ai le pouvoir de changer / impuissant.e",
        "15": "Pragmatisme / id\xE9alisme",
        "16": "Questions biais\xE9es / \xE9quilibr\xE9es",
        "17": "Repr\xE9sente ma position / n'importe quoi"
      }
    },
    "back-to-top": "Remonter ",
    intro: "<h1>Enjeux existentiels:<br/>Exercice de cartographie</h1><p>Dans deux de mes r\xE9centes expositions, j'ai invit\xE9 les personnes pr\xE9sentes \xE0 prendre quelques minutes pour remplir un questionnaire comprenant une vari\xE9t\xE9 de questions existentielles. Les participant\xB7e\xB7s devaient indiquer leur position en tra\xE7ant un point sur une s\xE9rie de diagrammes.</p><h1>R\xE9sultats</h1><p>Au total, 1222 personnes ont rempli le questionnaire : 941 lors de l'exposition du \xABSobey Art Award Exhibition\xBB \xE0 la Art Gallery of Alberta, Edmonton (5 octobre 2019 au 5 janvier 2020) et 281 lors de mon exposition solo \xABPositions\xBB \xE0 la Galerie Bradley Ertaskiran, Montr\xE9al (24 janvier au 7 mars 2020).</p><p>Dans les graphiques en nuage de points ci-dessous, chaque point correspond \xE0 la r\xE9ponse d'un\xB7e participant\xB7e. Les questions apparaissent exactement comme sur le questionnaire original.</p>",
    "intro--link-p1": "Vous trouverez plus d\u2019informations sous les graphiques, ",
    "intro--link-p2": "en bas de la page",
    analysis: {
      graph1: "<p>Graphique 1</p><ul><li><strong>La plupart des r\xE9pondant\xB7e\xB7s se situent dans la premi\xE8re moiti\xE9 de leur vie et trouvent qu'il est plut\xF4t \xABfacile d'exister dans ce monde\xBB.</strong><li>Dans l'ensemble, environ un tiers (360 r\xE9pondants, soit 32%) trouvent qu\u2019il est plut\xF4t \xABdifficile d'exister dans ce monde\xBB.</ul>",
      graph2: "<h3>Graphique 2</h3><ul><li><strong>La grande majorit\xE9 des personnes interrog\xE9es</strong> (782 personnes, soit 66%) <strong>souhaitent que leur vie ait une signification au-del\xE0 de leur petite existence. </strong>Parmi ceux-ci, une majorit\xE9 pense que la moralit\xE9 et les normes sociales sont universelles.<li>Cependant, <strong>il n\u2019y a aucun consensus quant \xE0 la question de la moralit\xE9 et des normes sociales, \xE0 savoir si celles-ci sont \xABuniverselles\xBB ou \xABsubjectives et culturelles\xBB. </strong>Une tr\xE8s mince majorit\xE9 de r\xE9pondant\xB7e\xB7s (535, soit 45%) pensent que la moralit\xE9 est subjective et culturelle plut\xF4t qu'universelle (486, ou 41%), et une proportion significative est neutre ou ambivalente (146, ou 13%).</ul>",
      graph3: "<h3>Graphique 3</h3><ul><li>Il y a une forte concentration dans le quadrant sup\xE9rieur droit, o\xF9 <strong>une majorit\xE9 de r\xE9pondant\xB7e\xB7s</strong> (657, soit 56%) <strong>indiquent qu\u2019ils\xB7elles ressentent une profonde connexion avec le monde physique, et se d\xE9placent fr\xE9quemment sur de grandes distances.</strong></ul>",
      graph4: "<h3>Graphique 4</h3><ul><li><strong>Une nette majorit\xE9 de r\xE9pondant\xB7e\xB7s</strong> (665, soit 57%) <strong>n'accepte pas la l\xE9gitimit\xE9 de l'ordre mondial actuel.</strong> Parmi ce groupe, la plupart des r\xE9pondant\xB7e\xB7s (371) indiquent se soucier davantage des grandes questions et abstractions que de la r\xE9alit\xE9 tangible de la vie.<li>Dans l'ensemble, les r\xE9ponses sont dispers\xE9es sur tous les quadrants, et une grande proportion (332, soit 28%) est neutre ou ambivalente entre se soucier davantage de la \xABr\xE9alit\xE9 tangible de la vie\xBB ou des \xABgrandes questions et abstractions\xBB.</ul>",
      graph5: "<h3>Graphique 5</h3><ul><li><strong>Il y a une unanimit\xE9 quasi totale</strong> (1049 r\xE9pondant\xB7e\xB7s, soit 92%): <strong>s\u2019exposer \xE0 diff\xE9rents des syst\xE8mes de valeurs et croyances m\xE8ne \xE0 une plus grande tol\xE9rance et compr\xE9hension mutuelle.</strong><li>Une majorit\xE9 de r\xE9pondant\xB7e\xB7s (589 ou 51%) affirment d\xE9finir leur identit\xE9 et leurs convictions eux-m\xEAmes, mais beaucoup se d\xE9finissent aussi en rapport avec leurs groupes d\u2019appartenance (380, ou 33%), et une bonne proportion est neutre ou ambivalente (182 ou 16%).</ul>",
      graph6: "<h3>Graphique 6</h3><ul><li><strong>Il y a un fort consensus</strong> (938 r\xE9pondant\xB7e\xB7s, soit 83%): <strong>nous, humains vivant aujourd'hui, aurons un impact d'importance cosmologique pour l'avenir de l'humanit\xE9.</strong><li><strong>Une forte majorit\xE9</strong> (653 r\xE9pondant\xB7e\xB7s, soit 57%) <strong>estime que \xABnous allons vers l'autodestruction\xBB</strong>, tandis qu'une petite minorit\xE9 (266, soit 23%) estime que nous progressons constamment, et presque autant de r\xE9pondant\xB7e\xB7s (223, soit 20%) sont neutres ou ambivalent\xB7e\xB7s.</ul>",
      graph7: "<h3>Graphique 7</h3><ul><li><strong>Une forte majorit\xE9</strong> (847 r\xE9pondant\xB7e\xB7s, soit 75%) <strong>veut prot\xE9ger la plan\xE8te et r\xE9inventer un monde plus \xE9galitaire et, parmi cette majorit\xE9, la plupart des r\xE9pondant\xB7e\xB7s se disent pr\xEAt\xB7e\xB7s s \xE0 se consacrer \xE0 la cause.</strong><li>Une infime minorit\xE9 affirme \xEAtre fortement d\xE9termin\xE9e \xE0 d\xE9fendre \xABla propri\xE9t\xE9 priv\xE9e, l'\xE9conomie de libre march\xE9 et la libert\xE9 de l'individu\xBB (70 r\xE9pondant\xB7e\xB7s soit 6%). Une proportion plus importante est neutre ou ambivalente (161 r\xE9pondant\xB7e\xB7s, soit 15%).</ul>",
      graph8: "<h3>Graphique 8</h3><ul><li><strong>Les r\xE9ponses sont dispers\xE9es sur les quatre quadrants.</strong><li><strong>Une petite majorit\xE9 de personnes</strong> (586 r\xE9pondant\xB7e\xB7s, soit 51%) <strong>estime avoir le pouvoir de changer les choses au niveau structurel</strong>, alors qu\u2019environ un tiers se sent impuissant (386, soit 34%).<li>Une petite majorit\xE9 pense que l'id\xE9alisme est plus important que le pragmatisme, et un tiers de tous les r\xE9pondant\xB7e\xB7s (351, soit 31%) sont neutres ou ambivalent\xB7e\xB7s.</ul>",
      graph9: "<h3>Graphique 9</h3><ul><li>Heureusement, <strong>il y a un fort consensus parmi les r\xE9pondant\xB7e\xB7s</strong> (871, soit 76%): <strong>ils\xB7elles jugent que les questions \xE9taient plut\xF4t bien \xE9quilibr\xE9es et pertinentes, et que leurs r\xE9ponses repr\xE9sentent vraiment leur position face \xE0 ces enjeux.</strong><li>Une petite proportion de r\xE9pondant\xB7e\xB7s (100, soit 8%) juge les questions plut\xF4t biais\xE9es et / ou moralisatrices et / ou irritantes.<li>Une infime proportion affirme que leurs r\xE9ponses au questionnaire ne sont pas significatives (19 r\xE9pondant\xB7e\xB7s, soit moins de 2%).</ul>"
    },
    footer: {
      select: "Selectionner et suivre des r\xE9pondant\xB7e\xB7s",
      "select--body": "Vous pouvez dessiner un rectangle pour s\xE9lectionner certains r\xE9pondants et suivre leurs r\xE9ponses d'un graphique \xE0 l'autre. (Cette fonction n'est pas disponible sur les \xE9crans tactiles.)",
      analysis: "Analyse",
      "analysis--body": "<p>(Analyse des donn\xE9es par Group Leger Analytics, interpr\xE9tation compl\xE9mentaire et commentaires de Nicolas Grenier.)<h2>PARTIE I - VOUS</h2><h3>Graphique 1</h3><ul><li><strong>La plupart des r\xE9pondant\xB7e\xB7s se situent dans la premi\xE8re moiti\xE9 de leur vie et trouvent qu'il est plut\xF4t \xABfacile d'exister dans ce monde\xBB.</strong><li>Dans l'ensemble, environ un tiers (360 r\xE9pondants, soit 32%) trouvent qu\u2019il est plut\xF4t \xABdifficile d'exister dans ce monde\xBB.</ul><h3>Graphique 2</h3><ul><li><strong>La grande majorit\xE9 des personnes interrog\xE9es</strong> (782 personnes, soit 66%) <strong>souhaitent que leur vie ait une signification au-del\xE0 de leur petite existence. </strong>Parmi ceux-ci, une majorit\xE9 pense que la moralit\xE9 et les normes sociales sont universelles.<li>Cependant, <strong>il n\u2019y a aucun consensus quant \xE0 la question de la moralit\xE9 et des normes sociales, \xE0 savoir si celles-ci sont \xABuniverselles\xBB ou \xABsubjectives et culturelles\xBB. </strong>Une tr\xE8s mince majorit\xE9 de r\xE9pondant\xB7e\xB7s (535, soit 45%) pensent que la moralit\xE9 est subjective et culturelle plut\xF4t qu'universelle (486, ou 41%), et une proportion significative est neutre ou ambivalente (146, ou 13%).</ul><h2>PARTIE II - VOUS ET LE MONDE</h2><h3>Graphique 3</h3><ul><li>Il y a une forte concentration dans le quadrant sup\xE9rieur droit, o\xF9 <strong>une majorit\xE9 de r\xE9pondant\xB7e\xB7s</strong> (657, soit 56%) <strong>indiquent qu\u2019ils\xB7elles ressentent une profonde connexion avec le monde physique, et se d\xE9placent fr\xE9quemment sur de grandes distances.</strong></ul><h3>Graphique 4</h3><ul><li><strong>Une nette majorit\xE9 de r\xE9pondant\xB7e\xB7s</strong> (665, soit 57%) <strong>n'accepte pas la l\xE9gitimit\xE9 de l'ordre mondial actuel.</strong> Parmi ce groupe, la plupart des r\xE9pondant\xB7e\xB7s (371) indiquent se soucier davantage des grandes questions et abstractions que de la r\xE9alit\xE9 tangible de la vie.<li>Dans l'ensemble, les r\xE9ponses sont dispers\xE9es sur tous les quadrants, et une grande proportion (332, soit 28%) est neutre ou ambivalente entre se soucier davantage de la \xABr\xE9alit\xE9 tangible de la vie\xBB ou des \xABgrandes questions et abstractions\xBB.</ul><h3>Graphique 5</h3><ul><li><strong>Il y a une unanimit\xE9 quasi totale</strong> (1049 r\xE9pondant\xB7e\xB7s, soit 92%): <strong>s\u2019exposer \xE0 diff\xE9rents des syst\xE8mes de valeurs et croyances m\xE8ne \xE0 une plus grande tol\xE9rance et compr\xE9hension mutuelle.</strong><li>Une majorit\xE9 de r\xE9pondant\xB7e\xB7s (589 ou 51%) affirment d\xE9finir leur identit\xE9 et leurs convictions eux-m\xEAmes, mais beaucoup se d\xE9finissent aussi en rapport avec leurs groupes d\u2019appartenance (380, ou 33%), et une bonne proportion est neutre ou ambivalente (182 ou 16%).</ul><h2>PARTIE III - VOUS ET LE FUTURE</h2><h3>Graphique 6</h3><ul><li><strong>Il y a un fort consensus</strong> (938 r\xE9pondant\xB7e\xB7s, soit 83%): <strong>nous, humains vivant aujourd'hui, aurons un impact d'importance cosmologique pour l'avenir de l'humanit\xE9.</strong><li><strong>Une forte majorit\xE9</strong> (653 r\xE9pondant\xB7e\xB7s, soit 57%) <strong>estime que \xABnous allons vers l'autodestruction\xBB</strong>, tandis qu'une petite minorit\xE9 (266, soit 23%) estime que nous progressons constamment, et presque autant de r\xE9pondant\xB7e\xB7s (223, soit 20%) sont neutres ou ambivalent\xB7e\xB7s.</ul><h3>Graphique 7</h3><ul><li><strong>Une forte majorit\xE9</strong> (847 r\xE9pondant\xB7e\xB7s, soit 75%) <strong>veut prot\xE9ger la plan\xE8te et r\xE9inventer un monde plus \xE9galitaire et, parmi cette majorit\xE9, la plupart des r\xE9pondant\xB7e\xB7s se disent pr\xEAt\xB7e\xB7s s \xE0 se consacrer \xE0 la cause.</strong><li>Une infime minorit\xE9 affirme \xEAtre fortement d\xE9termin\xE9e \xE0 d\xE9fendre \xABla propri\xE9t\xE9 priv\xE9e, l'\xE9conomie de libre march\xE9 et la libert\xE9 de l'individu\xBB (70 r\xE9pondant\xB7e\xB7s soit 6%). Une proportion plus importante est neutre ou ambivalente (161 r\xE9pondant\xB7e\xB7s, soit 15%).</ul><h3>Graphique 8</h3><ul><li><strong>Les r\xE9ponses sont dispers\xE9es sur les quatre quadrants.</strong><li><strong>Une petite majorit\xE9 de personnes</strong> (586 r\xE9pondant\xB7e\xB7s, soit 51%) <strong>estime avoir le pouvoir de changer les choses au niveau structurel </strong>, alors qu\u2019environ un tiers se sent impuissant (386, soit 34%).<li>Une petite majorit\xE9 pense que l'id\xE9alisme est plus important que le pragmatisme, et un tiers de tous les r\xE9pondant\xB7e\xB7s (351, soit 31%) sont neutres ou ambivalent\xB7e\xB7s.</ul><h2>VOUS ET CET EXERCICE</h2><h3>Graphique 9</h3><ul><li>Heureusement, <strong>il y a un fort consensus parmi les r\xE9pondant\xB7e\xB7s</strong> (871, soit 76%): <strong>ils\xB7elles jugent que les questions \xE9taient plut\xF4t bien \xE9quilibr\xE9es et pertinentes, et que leurs r\xE9ponses repr\xE9sentent vraiment leur position face \xE0 ces enjeux.</strong><li>Une petite proportion de r\xE9pondant\xB7e\xB7s (100, soit 8%) juge les questions plut\xF4t biais\xE9es et / ou moralisatrices et / ou irritantes.<li>Une infime proportion affirme que leurs r\xE9ponses au questionnaire ne sont pas significatives (19 r\xE9pondant\xB7e\xB7s, soit moins de 2%).</ul>",
      objectives: "Objectifs",
      "objectives--body": "<p>L\u2019objectif de ce projet n\u2019\xE9tait pas d\u2019obtenir des r\xE9sultats pour les publier, mais plut\xF4t d\u2019inclure comme partie int\xE9grante des expositions une exp\xE9rience active de questionnement.</p><p>La structure sch\xE9matique du questionnaire refl\xE8te certaines de mes peintures. Je voulais cr\xE9er une exp\xE9rience dans laquelle les visiteurs\xB7euses pourraient se plonger dans les \u0153uvres non seulement en regardant, mais aussi en se positionnant par rapport aux m\xEAmes enjeux existentiels que j\u2019aborde dans mon travail. Prendre position implique de choisir ceci plut\xF4t que cela, ce qui n\xE9cessite une forme de mesure. Mais un cadre quantitatif est intrins\xE8quement inappropri\xE9 pour m\xE9diter sur des notions qualitatives telles que la moralit\xE9 ou le progr\xE8s. J\u2019ai donc utilis\xE9 un plan cart\xE9sien avec axes X et Y (pour la simplicit\xE9 et familiarit\xE9), mais d\xE9lib\xE9r\xE9ment \xE9vit\xE9 de pr\xE9senter des grilles, chiffres ou m\xE9triques pr\xE9cis. Je ne voulais pas que l\u2019accent soit mis sur la quantification, mais sur la navigation \u2014 je voulais que les participants naviguent \xE0 travers diff\xE9rents enjeux mis en relation les uns avec les autres et trouvent leur propre position aussi intuitivement que possible. C'est pourquoi ce questionnaire, contrairement \xE0 la plupart des sondages ou enqu\xEAtes, \xE9vitait d\xE9lib\xE9r\xE9ment tout ce qui peut \xEAtre mesur\xE9 objectivement, comme l'\xE2ge, le revenu, l'origine ethnique, et toute question \xE0 laquelle on peut r\xE9pondre par oui ou non. Le but \xE9tait d'essayer de concr\xE9tiser, m\xEAme modestement, la structure dans laquelle nous consid\xE9rons les grandes questions existentielles. Plonger les r\xE9pondant\xB7e\xB7s dans cette exp\xE9rience \xE9tait l'essence m\xEAme du projet.</p><p>Bien s\xFBr, des critiques l\xE9gitimes peuvent \xEAtre formul\xE9es sur plusieurs aspects du projet : la nature binaire des questions, le choix des th\xE8mes, mes propres pr\xE9jug\xE9s en tant qu'homme blanc, la difficult\xE9 \xE0 aborder de si grands enjeux avec honn\xEAtet\xE9, et la tendance de ces questions \xE0 ramener les vieux pi\xE8ges de l'universalisme. Malgr\xE9 ces d\xE9fauts, beaucoup plus de personnes que je ne le pensais ont pris le temps de compl\xE9ter le questionnaire et m\u2019ont transmis des commentaires positifs, ce qui, pour moi, indique que l'exp\xE9rience pourrait \xEAtre pouss\xE9e plus loin. J'esp\xE8re d\xE9velopper un questionnaire o\xF9 les r\xE9pondants pourraient donner des r\xE9ponses multidimensionnelles, exprimer des positions contradictoires, critiquer les questions, etc. Il me semble pertinent de d\xE9velopper des alternatives exp\xE9rimentales aux syst\xE8mes de mesure conventionnels et de voir ce que l'on peut faire avec de telles m\xE9thodes.</p>",
      comments: "Commentaires laiss\xE9s par les r\xE9pondant\xB7e\xB7s",
      "comments--body": "<p>Un espace \xE0 la fin du questionnaire permettait de laisser, de fa\xE7on optionnelle, des commentaires.</p><p>Environ 10 \xE0 15% des r\xE9pondants ont laiss\xE9 un commentaire. Voici une liste non-exhaustive des commentaires re\xE7us. Les commentaires les plus r\xE9p\xE9titifs (\xABtr\xE8s int\xE9ressant\xBB, \xABbravo pour la belle expo\xBB, etc.) ont \xE9t\xE9 enlev\xE9s, et certains commentaires ont \xE9t\xE9 condens\xE9s ou abr\xE9g\xE9s durant la transcription.</p>",
      "comments--montreal": "Montr\xE9al",
      considerations: "Consid\xE9rations",
      "considerations--body": "<h2>Extras : dessins, lignes et autres</h2><p>Environ 5 \xE0 10% des questionnaires comprenaient des marques autres que des points. Malheureusement, pour des raisons d\u2019un pragmatisme d\xE9solant (temps et budget), il est impossible de reproduire tout cela ici.<p>Dans la majorit\xE9 des cas, il s\u2019agit d\u2019un ou plusieurs points additionnels, d\u2019une ou plusieurs lignes, ou d\u2019une forme englobant une zone d\u2019une des cartes. Parfois (dans environ 1 ou 2 % des cas), il s\u2019agit d\u2019un dessin ou d\u2019une inscription. En g\xE9n\xE9ral, lorsque c\u2019\xE9tait possible, nous avons simplement consid\xE9r\xE9 l\u2019emplacement de ces marques sur le graphique comme s\u2019il s\u2019agissait d\u2019un point.<p>Dans presque tous les cas, ces marques expriment clairement la volont\xE9 de ne pas se limiter \xE0 la logique cart\xE9sienne et \xE0 une r\xE9ponse unique, qui appara\xEEt comme r\xE9ductrice. Cette critique revient \xE9galement dans les commentaires.<h2>Pourquoi y a-t-il autant de points au centre ?</h2><p>En moyenne, 5,5% de toutes les r\xE9ponses se trouvent au centre des graphiques (entre 3% et 11%, d\u2019un graphique \xE0 l\u2019autre), ce qui n\u2019est pas autant que ce qu\u2019on pourrait croire au premier coup d\u2019\u0153il. Toutefois, cela demeure significatif.<p>Compte tenu de la structure des graphiques avec un axe X / Y et de la nature existentielle des questions, le centre a probablement \xE9t\xE9 utilis\xE9 comme position par d\xE9faut pour exprimer la neutralit\xE9 et / ou l'ambivalence et / ou la position r\xE9elle dans laquelle les r\xE9pondants se per\xE7oivent et / ou une fa\xE7on d'exprimer \xABaucune de ces r\xE9ponses\xBB ou \xABtoutes ces r\xE9ponses\xBB. (Parmi les r\xE9pondant\xB7e\xB7s qui ont laiss\xE9 des commentaires dans le questionnaire, plusieurs ont \xE9crit qu'un seul point ne pouvait exprimer correctement leur position.)<h2>Cat\xE9gories de r\xE9pondants</h2><p><strong>Cette analyse est pour l\u2019ensemble des r\xE9pondant\xB7e\xB7s.</strong> Dans l\u2019ensemble, il n\u2019y a pas de diff\xE9rences majeures entre les r\xE9ponses des populations de Montr\xE9al et d\u2019Edmonton, ni entre les francophones et les anglophones. Toutefois, pour comparer les diff\xE9rentes cat\xE9gories de r\xE9pondant\xB7e\xB7s (Edmonton ou Montr\xE9al, questionnaires en fran\xE7ais ou en anglais), allez dans \xABOptions de visualisation\xBB, cliquez \xABAffichez les r\xE9pondant\xB7e\xB7s provenant de\u2026\xBB et choisissez les groupes que vous voulez.<p>Les personnes ayant rempli ce questionnaire sont des adeptes des mus\xE9es et des galeries et, \xE0 ce titre, ne sont pas n\xE9cessairement repr\xE9sentatifs de la population g\xE9n\xE9rale.<h2>P\xE9riode vis\xE9e</h2><p>Il faut noter que les derniers questionnaires furent d\xE9pos\xE9s le 7 mars 2020, tout juste une semaine avant que la pand\xE9mie ne change nos vies. (Dans quelle mesure les r\xE9ponses seraient-elles diff\xE9rentes si l'enqu\xEAte devait \xEAtre men\xE9e aujourd\u2019hui ? Compte tenu de la nature du questionnaire, la pand\xE9mie serait-elle davantage une distraction ou modifierait-elle fondamentalement la fa\xE7on dont les gens per\xE7oivent ces enjeux ?)<h2>Repr\xE9sentation des points</h2><p>Afin de mieux montrer chaque point sur les graphiques en nuage de points, un algorithme a \xE9t\xE9 appliqu\xE9 afin de s\xE9parer l\xE9g\xE8rement les points les uns des autres. (Par exemple, si 35 r\xE9pondant\xB7e\xB7s ont plac\xE9 un point exactement au centre, ces points sont ici pr\xE9sent\xE9s non pas comme un point unique mais comme un groupe de points.)<h2>Attention aux chiffres</h2><p>La raison d\u2019\xEAtre de ce questionnaire est avant tout d\u2019exister visuellement, et de remettre en question la fa\xE7on dont on consid\xE8re les enjeux de nature qualitative. Nous vivons dans un monde ax\xE9 sur les donn\xE9es, o\xF9 les chiffres sont souvent utilis\xE9s pour cr\xE9er un sentiment de connaissance, d\u2019expertise ou de pr\xE9visibilit\xE9 qui cache l'incertitude fondamentale et radicale qui d\xE9finit la condition humaine. Ici, nous avons essay\xE9 d'\xE9quilibrer l'utilisation des chiffres et des \xE9l\xE9ments visuels pour vous donner le meilleur portrait possible des r\xE9sultats. Mais les chiffres ne peuvent vous donner qu'un portrait simplifi\xE9 ; reportez-vous toujours aux graphiques en nuage de points pour interpr\xE9ter les chiffres.",
      contact: "Contact et commentaires",
      "contact--body": "Pour tout question, commentaire ou autre, merci de m'\xE9crire \xE0 grenier.nicolas@gmail.com",
      acknowledgements: "Remerciements",
      "acknowledgements--body": "<p>Le questionnaire a \xE9t\xE9 con\xE7u avec l'aide de <strong>Tyson Atkings, David Elliott</strong> et <strong>Chantal Gevrey</strong>.<p>Les questionnaires furent collect\xE9s gr\xE2ce \xE0 l\u2019\xE9quipe de la <strong>Art Gallery of Alberta</strong> (merci \xE0 la commissaire <strong>Lindsey Sharman</strong>) et \xE0 l\u2019\xE9quipe de la <strong>Galerie Bradley Ertaskiran</strong> (merci \xE0 <strong>Soad Carrier</strong>, <strong>C\xE9cile Bert\xE9vas</strong>, <strong>Mark Lowe</strong>, <strong>Russell Banx</strong>, <strong>Megan Bradley</strong> et <strong>Antoine Ertaskiran</strong>).<p>Les donn\xE9es re\xE7ues sur les questionnaires papier ont \xE9t\xE9 compil\xE9es par <strong>Loucas Braconnier</strong>, avec l'aide de <strong>William Sabourin</strong>, <strong>Sarah Boutin</strong> et <strong>Mathieu Reed</strong>.<p>L'analyse des donn\xE9es a \xE9t\xE9 r\xE9alis\xE9e par <strong>Bich Tran</strong> et <strong>Am\xE9lie B\xE9riault-Poirier</strong> du <strong>Group Leger Analytics</strong>.<p>Cette interface pour la visualisation des donn\xE9es a \xE9t\xE9 construite par <strong>Nicolas Epstein</strong>.<h1 style='margin-top: 3rem;'>Le projet a \xE9t\xE9 rendu possible gr\xE2ce au soutien de:<h1>"
    },
    customgraph: "Carte sur mesure",
    part: "Partie",
    part1: {
      title: "Vous"
    },
    part2: {
      title: "Vous et le monde",
      description: "<p>Pensez au territoire o\xF9 vous avez grandi. Pensez \xE0 ses propri\xE9t\xE9s physiques naturelles: montagnes, vall\xE9es, plaines, for\xEAts, milieux humides, rivi\xE8res, lacs, mer, d\xE9sert, etc. Imaginez ensuite ce territoire en rapport avec la totalit\xE9 des espaces physiques de la plan\xE8te.</p><p>Dans votre vie, jusqu'\xE0 quel point avez-vous appris \xE0 conna\xEEtre le monde physique?</p>"
    },
    part3: {
      title: "Vous et le futur",
      description: "<p>Essayez de vous repr\xE9senter la totalit\xE9 des activit\xE9s humaines se d\xE9roulant sur la plan\xE8te aujourd'hui.</p><p>Croyez-vous que l'humanit\xE9 dans son ensemble se dirige dans une bonne direction, align\xE9e sur une vision coh\xE9rente pour le futur?</p>"
    },
    part4: {
      title: "Vous et cet exercice"
    },
    savebtn: "T\xE9l\xE9charger l'image"
  };
  var form = {
    title: "Formulaire",
    presentation: "Cet exercice est une sorte de questionnaire dans lequel je vous demande d'indiquer votre position sur une s\xE9rie de diagrammes, en rapport avec une vari\xE9t\xE9 de questions subjectives. Je pr\xE9vois rassembler toutes les r\xE9ponses que je collecterai dans une publication. Vos r\xE9ponses seront anonymes.<br/>Dans chaque diagramme, tentez de voir o\xF9 vous vous situez sur les \xE9chelles verticales et horizontales. Indiquez le ou les endroits o\xF9 ces valeurs se croisent en tra\xE7ant un point.",
    "lang-select": "Langue",
    part: "Partie",
    demo: {
      description: "",
      top: "L'identit\xE9 de genre est une construction sociale \xE0 100%",
      bottom: "L'identit\xE9 de genre est biologique \xE0 100%",
      left: "Homme",
      right: "Femme"
    },
    submit: "Soumettre"
  };
  var graph = {
    instructions: "<ol><li>Indiquer votre position en mettant un point \xE0 l'intersection des axes X et Y qui correspond \xE0 votre position.</li><li>Si un point unique ne repr\xE9sente pas l'esprit de votre position, vous pouvez ajouter un ou plusieurs autres points afin d'exprimer autrement votre position.</li><li>Utilisez les curseurs situ\xE9s sous le graphique afin de nuancer davantage votre r\xE9ponse.</li><ol>",
    connectcheckbox: "Connecter les points?",
    confidenceslider: {
      before: "Ma position est floue",
      after: "Ma position est claire et nette"
    },
    fuckoffSlider: {
      before: "\xC7a va comme \xE7a",
      after: "Fuck cette question"
    },
    removepoint: "Retirer un point",
    reset: "R\xE9initialiser",
    position: "Position: x = {{x}}, y = {{y}}",
    size: "Taille"
  };
  var questions = {
    "Beginning / end of my life": {
      en: {
        start: "Beginning of my life",
        end: "End of my life"
      },
      fr: {
        start: "D\xE9but de ma vie",
        end: "Fin de ma vie"
      }
    },
    "It's easy / hard to live in this world": {
      en: {
        start: "It's hard for me to exist in the world",
        end: "It's easy for me to exist in this world"
      },
      fr: {
        start: "C'est dur pour moi d'exister dans ce monde",
        end: "C'est facile pour moi d'exister dans ce monde"
      }
    },
    "Life is just life / part of larger whole": {
      en: {
        start: "Life is just life, there is no greater meaning to be found",
        end: "I want my life to be part of a larger whole, of something that has meaning beyond my small existence"
      },
      fr: {
        start: "La vie n\u2019est que ce qu\u2019elle est, il n\u2019y a pas de signification transcendante \xE0 y chercher",
        end: "J\u2019ai besoin que ma vie soit reli\xE9e \xE0 quelque chose de plus grand, qui ait une signification au-del\xE0 de ma petite existence"
      }
    },
    "Morality is universal / subjective": {
      en: {
        start: "Nothing is inherently good or bad, morality is completely subjective and cultural",
        end: "Morality and social norms are human universals"
      },
      fr: {
        start: "Rien n'est fondamentalement bien ou mal, la moralit\xE9 est subjective et culturelle",
        end: "La moralit\xE9 et les normes sociales sont universelles"
      }
    },
    "I never left / I keep moving": {
      en: {
        start: "I never left the place where I was born",
        end: "I constantly keep moving far and wide"
      },
      fr: {
        start: "Je n'ai jamais quitt\xE9 mon lieu de naissance",
        end: "Je me d\xE9place constamment, sur de grandes distances"
      }
    },
    "Deep connection / never think about land": {
      en: {
        start: "I never even think about the land",
        end: "I have a deep connection with the land and I can feel the vastness of the physical world in my bones"
      },
      fr: {
        start: "Je n'ai jamais pens\xE9 au territoire physique o\xF9 je me trouve",
        end: "J'ai une profonde connexion avec le monde physique, j'en ressens l'immensit\xE9 dans mes tripes"
      }
    },
    "I care only about concrete / abstractions": {
      en: {
        start: "I care only about the concrete and tangible reality of life",
        end: "I care only about the larger questions and abstractions"
      },
      fr: {
        start: "Je me pr\xE9occupe exclusivement de la r\xE9alit\xE9 concr\xE8te et tangible de la vie",
        end: "Je me pr\xE9occupe exclusivement des grandes questions et abstractions"
      }
    },
    "I accept / I don't believe world order": {
      en: {
        start: "I don't believe in the legitimacy of the current world order",
        end: "I accept the legitimacy of the current world order, with its borders, states, nations, etc."
      },
      fr: {
        start: "Je ne crois pas en la l\xE9gitimit\xE9 de l'ordre mondial actuel",
        end: "J'accepte la l\xE9gitimit\xE9 de l'ordre mondial actuel, avec ses fronti\xE8res, \xE9tats, nations, etc."
      }
    },
    "I define myself / in relation to groups": {
      en: {
        start: "I define myself and my convictions on my own, not in relation to any group",
        end: "I define myself and my convictions in relation to groups with which I identify"
      },
      fr: {
        start: "Je d\xE9finis mon identit\xE9 et mes convictions par moi-m\xEAme",
        end: "Je d\xE9finis mon identit\xE9 et mes convictions en rapport avec les groupes auxquelles j'appartiens"
      }
    },
    "Exposure leads to tolerance / violence": {
      en: {
        start: "Exposure to different beliefs and value systems leads to confusion / confrontation / violence",
        end: "Exposure to different beliefs and value systems leads to increased tolerance and mutual understanding"
      },
      fr: {
        start: "S'exposer \xE0 diff\xE9remts syst\xE8mes de valeurs et croyance m\xE8ne \xE0 la confusion / confrontation / violence",
        end: "S'exposer \xE0 diff\xE9rents syst\xE8mes de valeurs et croyances m\xE8ne \xE0 une plus grande tol\xE9rance et \xE0 une compr\xE9hension mutuelle"
      }
    },
    "Going toward self-destruction / progress": {
      en: {
        start: "We're moving towards self-destruction",
        end: "We're making constant progress"
      },
      fr: {
        start: "Nous allons vers l'autodestruction",
        end: "Nous progressons constamment"
      }
    },
    "Impact on future of humanity / no impact": {
      en: {
        start: "We, humans living today, will have no impact whatsoever on the future of humanity",
        end: "We, humans living today, will have an impact of cosmological importance for the future of humanity"
      },
      fr: {
        start: "Nous, humains vivant aujourd'hui, n'aurons absolument aucun impact sur le futur de l'humanit\xE9",
        end: "Nous, humains vivant aujourd'hui, aurons un impact d'une importance cosmologique pour le futur de l'humanit\xE9"
      }
    },
    "We need individual / egalitarian world": {
      en: {
        start: "We need to fight the establishment and create a new vision to defend private property, the free market economy and the freedom of the individual",
        end: "We need to fight the establishment and create a radically new vision to protect our planet and reinvent a more egalitarian world"
      },
      fr: {
        start: "Nous devons combattre le pouvoir dominant et cr\xE9er une nouvelle vision pour d\xE9fendre la propri\xE9t\xE9 priv\xE9e, l'\xE9conomie de libre march\xE9 et la libert\xE9 de l'individu",
        end: "Nous devons combattre le pouvoir dominant et cr\xE9er une vision radicalement nouvelle afin de prot\xE9ger la plan\xE8te et de r\xE9inventer un monde plus \xE9galitaire"
      }
    },
    "I'm ready to give my life / I don't care": {
      en: {
        start: "I don't care",
        end: "I'm ready to give my life for this"
      },
      fr: {
        start: "Je suis totalement indiff\xE9rent.e",
        end: "Je suis pr\xEAt.e \xE0 donner ma vie pour la cause"
      }
    },
    "Pragmatism / Idealism": {
      en: {
        start: "Pragmatism is more important",
        end: "Idealism is more important"
      },
      fr: {
        start: "Le pragmatisme est plus important",
        end: "L'id\xE9alisme est plus important"
      }
    },
    "I have power / feel powerless": {
      en: {
        start: "I feel powerless",
        end: "I have the power to change things on a structural level"
      },
      fr: {
        start: "Je suis impuissant.e",
        end: "J'ai le pouvoir de changer les choses sur le plan structurel"
      }
    },
    "Questions annoying / well balanced": {
      en: {
        start: "I found the questions biased and/or moralizing and/or annoying",
        end: "I thought the questions were relevant and well balanced"
      },
      fr: {
        start: "J'ai trouv\xE9 les questions biais\xE9es et/ou moralisatrices et/ou irritantes",
        end: "J'ai trouv\xE9 les questions pertinentes et bien \xE9quilibr\xE9es"
      }
    },
    "My answers represent / it means nothing": {
      en: {
        start: "I answered randomly, it means nothing",
        end: "My answers truly represent how I feel about these issues"
      },
      fr: {
        start: "J'ai r\xE9pondu n'importe quoi, \xE7a ne veut rien dire",
        end: "Mes r\xE9ponses expriment parfaitement ma position face \xE0 ces enjeux"
      }
    }
  };
  var fr_default = {
    language,
    header,
    home,
    results,
    form,
    graph,
    questions
  };

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/context/language-context.jsx
  function getDefinition(lang) {
    return lang === "fr" ? fr_default : {};
  }
  var userLang = typeof navigator !== "undefined" ? navigator.language.slice(0, 2) === "fr" ? "fr" : "en" : "en";
  var Language = (0, import_preact.createContext)();
  function LanguageContextProvider({ children }) {
    let [definition, setDefinition] = (0, import_hooks.useState)(getDefinition(userLang));
    function swapLang(lang) {
      if (lang == null) {
        userLang = userLang === "en" ? "fr" : "en";
      } else {
        userLang = lang;
      }
      setDefinition(getDefinition(userLang));
    }
    return /* @__PURE__ */ (0, import_preact.h)(import_preact_i18n.IntlProvider, {
      definition
    }, /* @__PURE__ */ (0, import_preact.h)(Language.Provider, {
      value: { userLang, swapLang }
    }, children));
  }
  function useLanguageContext() {
    const context = (0, import_hooks.useContext)(Language);
    if (context == null) {
      throw new Error("useLanguageContext must be used with a LanguageContextProvider");
    }
    return context;
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/context/mobile-context.jsx
  var import_preact2 = __toModule(require_preact());
  var import_hooks2 = __toModule(require_hooks());
  var mobileCheck = function() {
    if (typeof navigator !== "undefined" && typeof window !== "undefined") {
      return function(a) {
        return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
      }(navigator.userAgent || navigator.vendor || window.opera);
    }
  };
  var MobileContext = (0, import_preact2.createContext)();
  function MobileContextProvider({ children }) {
    const isMobileClient = mobileCheck();
    return /* @__PURE__ */ (0, import_preact2.h)(MobileContext.Provider, {
      value: isMobileClient
    }, children);
  }
  function useMobileContext() {
    const context = (0, import_hooks2.useContext)(MobileContext);
    if (context == null && typeof window !== "undefined")
      throw new Error("useMobileContext must be used with a MobileContextProvider");
    return context;
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/results.jsx
  var import_preact16 = __toModule(require_preact());
  var import_hooks5 = __toModule(require_hooks());
  var import_preact_i18n4 = __toModule(require_preact_i18n());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/asyncReducer.js
  var import_lodash2 = __toModule(require_lodash());
  var import_lodash3 = __toModule(require_lodash2());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/constants.js
  var import_d3 = __toModule(require_d3_node());
  var APP_BASE_URL = true ? "" : package_default.publicPath.endsWith("/") ? package_default.publicPath.substring(0, package_default.publicPath.length - 1) : package_default.publicPath;
  var NA_SYMBOL = "NA";
  var GRAPH_TYPE = {
    scatterplot: "scatterplot",
    heatmap: "heatmap",
    density: "density scatterplot",
    contour: "contour",
    colorContour: "color contour",
    contourScatterplot: "contour scatterplot",
    numbers: "numbers",
    proportions: "proportions"
  };
  var COLOR_SCHEME = {
    greyscale: "interpolateGreys",
    viridis: "interpolateViridis",
    plasma: "interpolatePlasma",
    warm: "interpolateWarm",
    cividis: "interpolateCividis",
    coolwarm: "coolwarm",
    nicolas: "nicolas",
    nicolas2: "nicolas2",
    nicolas3: "nicolas3",
    nicolas4: "nicolas4"
  };
  var CUSTOM_COLORS = {
    coolwarm: (0, import_d3.interpolateRgbBasis)(["CornflowerBlue", "DimGray", "IndianRed"]),
    nicolas: (0, import_d3.interpolateRgbBasis)([
      "#de0000",
      "#b9001e",
      "#a5013c",
      "#920e64",
      "#782793",
      "#694dc6",
      "#4e6ee3",
      "#1e83ff",
      "#03a2ff"
    ]),
    nicolas2: (0, import_d3.interpolateRgbBasis)([
      "#efddff",
      "#e6abe6",
      "#d65da4",
      "#d65da4",
      "#640700"
    ]),
    nicolas3: (0, import_d3.interpolateRgbBasis)(["#eeeeee", "#272727"]),
    nicolas4: (0, import_d3.interpolateRgbBasis)([
      "#e2e2e2",
      "#c4c4c4",
      "#a1a1a1",
      "#7c7c7c",
      "#5f5f5f",
      "#4a4a4a",
      "#3b3b3b",
      "#2d2d2d"
    ])
  };
  var DEFAULT_COLOR_SCHEME = COLOR_SCHEME.nicolas4;
  var DEFAULT_GRAPH_TYPE = GRAPH_TYPE.scatterplot;
  var DEFAULT_DOT_SIZE = 22;
  var DEFAULT_DOT_OPACITY = 0.28;
  var DEFAULT_COLOR_MID = 1;
  var DEFAULT_CANVAS_WIDTH = 1e3;
  var DEFAULT_CANVAS_HEIGHT = 1e3;
  var DEFAULT_CANVAS_MARGIN = {
    top: 30,
    bottom: 30,
    right: 100,
    left: 100
  };
  var DATASETS = {
    language: ["en", "fr"],
    form: ["aga", "ba"]
  };
  var MARGIN = DEFAULT_CANVAS_MARGIN;
  var UNCERTAINTY = 0.5;
  var DOMAIN = [-15, 15];
  var AXES_DOMAIN = [-10, 10];
  function rangeDiscreet(range) {
    const min = Math.min(...range), max = Math.max(...range);
    return new Array(max - min + 1).fill(0).map((_, i) => i + min);
  }
  var DOMAIN_DISCREET = rangeDiscreet(DOMAIN);
  var AXES_DOMAIN_DISCREET = rangeDiscreet(AXES_DOMAIN);
  var ORIGIN = {
    x: MARGIN.left + DEFAULT_CANVAS_WIDTH / 2,
    y: MARGIN.top + DEFAULT_CANVAS_HEIGHT / 2
  };
  var VIEWBOX = [
    0,
    0,
    MARGIN.left + DEFAULT_CANVAS_WIDTH + MARGIN.right,
    MARGIN.top + DEFAULT_CANVAS_HEIGHT + MARGIN.bottom
  ];
  var INITIAL_STATE = {
    data: null,
    filteredDataset: null,
    standardRegionCounts: null,
    questions: null,
    vizColumns: [],
    standardColumnSet: [],
    customViz: false,
    userAxes: {
      x: "",
      y: ""
    },
    brushMap: {},
    colorScale: () => {
    },
    options: {
      reverseColor: false,
      size: DEFAULT_DOT_SIZE,
      opacity: DEFAULT_DOT_OPACITY,
      contourBandwidth: 25,
      graph: DEFAULT_GRAPH_TYPE,
      color: DEFAULT_COLOR_SCHEME,
      k: DEFAULT_COLOR_MID,
      dataset: {
        aga: true,
        ba: true,
        en: true,
        fr: true
      }
    }
  };

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-dsv-npm-3.0.1-5d88fb8a85-5fc0723647.zip/node_modules/d3-dsv/src/dsv.js
  var EOL = {};
  var EOF = {};
  var QUOTE = 34;
  var NEWLINE = 10;
  var RETURN = 13;
  function objectConverter(columns) {
    return new Function("d", "return {" + columns.map(function(name, i) {
      return JSON.stringify(name) + ": d[" + i + '] || ""';
    }).join(",") + "}");
  }
  function customConverter(columns, f) {
    var object = objectConverter(columns);
    return function(row, i) {
      return f(object(row), i, columns);
    };
  }
  function inferColumns(rows) {
    var columnSet = Object.create(null), columns = [];
    rows.forEach(function(row) {
      for (var column in row) {
        if (!(column in columnSet)) {
          columns.push(columnSet[column] = column);
        }
      }
    });
    return columns;
  }
  function pad(value, width) {
    var s = value + "", length = s.length;
    return length < width ? new Array(width - length + 1).join(0) + s : s;
  }
  function formatYear(year) {
    return year < 0 ? "-" + pad(-year, 6) : year > 9999 ? "+" + pad(year, 6) : pad(year, 4);
  }
  function formatDate(date) {
    var hours = date.getUTCHours(), minutes = date.getUTCMinutes(), seconds = date.getUTCSeconds(), milliseconds = date.getUTCMilliseconds();
    return isNaN(date) ? "Invalid Date" : formatYear(date.getUTCFullYear(), 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2) + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z" : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z" : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z" : "");
  }
  function dsv_default(delimiter) {
    var reFormat = new RegExp('["' + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
    function parse(text, f) {
      var convert, columns, rows = parseRows(text, function(row, i) {
        if (convert)
          return convert(row, i - 1);
        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
      });
      rows.columns = columns || [];
      return rows;
    }
    function parseRows(text, f) {
      var rows = [], N = text.length, I = 0, n = 0, t, eof = N <= 0, eol = false;
      if (text.charCodeAt(N - 1) === NEWLINE)
        --N;
      if (text.charCodeAt(N - 1) === RETURN)
        --N;
      function token() {
        if (eof)
          return EOF;
        if (eol)
          return eol = false, EOL;
        var i, j = I, c;
        if (text.charCodeAt(j) === QUOTE) {
          while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE)
            ;
          if ((i = I) >= N)
            eof = true;
          else if ((c = text.charCodeAt(I++)) === NEWLINE)
            eol = true;
          else if (c === RETURN) {
            eol = true;
            if (text.charCodeAt(I) === NEWLINE)
              ++I;
          }
          return text.slice(j + 1, i - 1).replace(/""/g, '"');
        }
        while (I < N) {
          if ((c = text.charCodeAt(i = I++)) === NEWLINE)
            eol = true;
          else if (c === RETURN) {
            eol = true;
            if (text.charCodeAt(I) === NEWLINE)
              ++I;
          } else if (c !== DELIMITER)
            continue;
          return text.slice(j, i);
        }
        return eof = true, text.slice(j, N);
      }
      while ((t = token()) !== EOF) {
        var row = [];
        while (t !== EOL && t !== EOF)
          row.push(t), t = token();
        if (f && (row = f(row, n++)) == null)
          continue;
        rows.push(row);
      }
      return rows;
    }
    function preformatBody(rows, columns) {
      return rows.map(function(row) {
        return columns.map(function(column) {
          return formatValue(row[column]);
        }).join(delimiter);
      });
    }
    function format(rows, columns) {
      if (columns == null)
        columns = inferColumns(rows);
      return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
    }
    function formatBody(rows, columns) {
      if (columns == null)
        columns = inferColumns(rows);
      return preformatBody(rows, columns).join("\n");
    }
    function formatRows(rows) {
      return rows.map(formatRow).join("\n");
    }
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(value) {
      return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? '"' + value.replace(/"/g, '""') + '"' : value;
    }
    return {
      parse,
      parseRows,
      format,
      formatBody,
      formatRows,
      formatRow,
      formatValue
    };
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-dsv-npm-3.0.1-5d88fb8a85-5fc0723647.zip/node_modules/d3-dsv/src/csv.js
  var csv = dsv_default(",");
  var csvParse = csv.parse;
  var csvParseRows = csv.parseRows;
  var csvFormat = csv.format;
  var csvFormatBody = csv.formatBody;
  var csvFormatRows = csv.formatRows;
  var csvFormatRow = csv.formatRow;
  var csvFormatValue = csv.formatValue;

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-dsv-npm-3.0.1-5d88fb8a85-5fc0723647.zip/node_modules/d3-dsv/src/tsv.js
  var tsv = dsv_default("	");
  var tsvParse = tsv.parse;
  var tsvParseRows = tsv.parseRows;
  var tsvFormat = tsv.format;
  var tsvFormatBody = tsv.formatBody;
  var tsvFormatRows = tsv.formatRows;
  var tsvFormatRow = tsv.formatRow;
  var tsvFormatValue = tsv.formatValue;

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-dsv-npm-3.0.1-5d88fb8a85-5fc0723647.zip/node_modules/d3-dsv/src/autoType.js
  var fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-fetch-npm-3.0.1-ad9ce3dc3e-382dcea065.zip/node_modules/d3-fetch/src/text.js
  function responseText(response) {
    if (!response.ok)
      throw new Error(response.status + " " + response.statusText);
    return response.text();
  }
  function text_default(input, init) {
    return fetch(input, init).then(responseText);
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-fetch-npm-3.0.1-ad9ce3dc3e-382dcea065.zip/node_modules/d3-fetch/src/dsv.js
  function dsvParse(parse) {
    return function(input, init, row) {
      if (arguments.length === 2 && typeof init === "function")
        row = init, init = void 0;
      return text_default(input, init).then(function(response) {
        return parse(response, row);
      });
    };
  }
  var csv2 = dsvParse(csvParse);
  var tsv2 = dsvParse(tsvParse);

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/.yarn/cache/d3-fetch-npm-3.0.1-ad9ce3dc3e-382dcea065.zip/node_modules/d3-fetch/src/xml.js
  function parser(type) {
    return (input, init) => text_default(input, init).then((text) => new DOMParser().parseFromString(text, type));
  }
  var xml_default = parser("application/xml");
  var html = parser("text/html");
  var svg = parser("image/svg+xml");

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/fetch/parseLocalCSV.js
  async function parseLocalCSV(path) {
    return await csv2(path, (d) => {
      const row = d;
      for (let col in row) {
        if (col !== "poll" && col != "Language" && row[col] !== NA_SYMBOL) {
          row[col] = +row[col];
        }
      }
      return row;
    }).then((data) => {
      data.forEach((d, i) => d.id = i);
      return data;
    });
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/lib/data-manipulation.js
  var import_lodash = __toModule(require_lodash());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/fetch/jitter.js
  function jitter_default(k) {
    return Math.random() * k * 2 - k;
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/lib/viztools.js
  var d3 = __toModule(require_d3_node());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/color-contour.jsx
  var import_preact4 = __toModule(require_preact());
  var import_d35 = __toModule(require_d3_node());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/hooks/useD3.js
  var import_d32 = __toModule(require_d3_node());
  var import_hooks3 = __toModule(require_hooks());
  var useD3 = (renderChartFn, dependencies) => {
    const ref = (0, import_hooks3.useRef)();
    (0, import_hooks3.useEffect)(() => {
      renderChartFn((0, import_d32.select)(ref.current));
      return () => {
      };
    }, [renderChartFn, ...dependencies]);
    return ref;
  };

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/scatterplot-axes.jsx
  var import_preact3 = __toModule(require_preact());
  var import_d34 = __toModule(require_d3_node());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/lib/scales.js
  var import_d33 = __toModule(require_d3_node());
  var xScale = (0, import_d33.scaleLinear)().domain(DOMAIN).range([MARGIN.left, MARGIN.left + DEFAULT_CANVAS_WIDTH]);
  var yScale = (0, import_d33.scaleLinear)().domain(DOMAIN).range([MARGIN.top + DEFAULT_CANVAS_HEIGHT, MARGIN.top]);
  var xBand = (0, import_d33.scaleBand)().domain(DOMAIN_DISCREET).range([MARGIN.left, MARGIN.left + DEFAULT_CANVAS_WIDTH]);
  var yBand = (0, import_d33.scaleBand)().domain(DOMAIN_DISCREET).range([MARGIN.top + DEFAULT_CANVAS_HEIGHT, MARGIN.top]);

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/scatterplot-axes.css
  var _default = {};

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/scatterplot-axes.jsx
  var xAxisScale = (0, import_d34.scaleLinear)(AXES_DOMAIN).range([
    xScale(AXES_DOMAIN[0]),
    xScale(AXES_DOMAIN[1])
  ]);
  var yAxisScale = (0, import_d34.scaleLinear)(AXES_DOMAIN).range([
    yScale(AXES_DOMAIN[1]),
    yScale(AXES_DOMAIN[0])
  ]);
  var xAxis = (g) => g.attr("transform", `translate(0, ${ORIGIN.y})`).attr("class", _default.axis).call((0, import_d34.axisBottom)(xAxisScale).ticks("").tickSizeOuter(0));
  var yAxis = (g) => g.attr("transform", `translate(${ORIGIN.x}, 0)`).attr("class", _default.axis).call((0, import_d34.axisLeft)(yAxisScale).ticks("").tickSizeOuter(0));
  var ARROW_LENGTH = 24;
  var ARROW_FEATHER_SIZE = 8;
  var CARDINAL_MATRICES = [
    [
      [
        [1, 0],
        [0, 1]
      ],
      [
        [-1, 0],
        [0, 1]
      ]
    ],
    [
      [
        [0, -1],
        [1, 0]
      ],
      [
        [0, -1],
        [-1, 0]
      ]
    ],
    [
      [
        [-1, 0],
        [0, -1]
      ],
      [
        [1, 0],
        [0, -1]
      ]
    ],
    [
      [
        [0, 1],
        [-1, 0]
      ],
      [
        [0, 1],
        [1, 0]
      ]
    ]
  ];
  var scaledArrowTips = [
    [ORIGIN.x, yScale(AXES_DOMAIN[1]) - ARROW_LENGTH],
    [xScale(AXES_DOMAIN[1]) + ARROW_LENGTH, ORIGIN.y],
    [ORIGIN.x, yScale(AXES_DOMAIN[0]) + ARROW_LENGTH],
    [xScale(AXES_DOMAIN[0]) - ARROW_LENGTH, ORIGIN.y]
  ];
  var ARROW_PATHS = scaledArrowTips.map((arrow, i) => {
    let v1, v2;
    const translate = (n) => (p, j) => p + CARDINAL_MATRICES[i][n][j][0] * ARROW_FEATHER_SIZE + CARDINAL_MATRICES[i][n][j][1] * ARROW_LENGTH;
    v1 = arrow.map(translate(0));
    v2 = arrow.map(translate(1));
    return [...arrow, ...v1, ...v2];
  });
  var arrowheads = (g) => {
    g.attr("class", _default.arrowhead).selectAll("path").data(ARROW_PATHS).join("path").attr("d", (d) => `M${d[0]} ${d[1]} L ${d[2]} ${d[3]} L ${d[4]} ${d[5]} Z`);
  };
  function appendAxes(svg2) {
    svg2.append("g").call(xAxis);
    svg2.append("g").call(yAxis);
    svg2.append("g").call(arrowheads);
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/viz.css
  var _default2 = {};

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/color-contour.jsx
  function ColorContour({ data, columns: columns2d, options }) {
    const ref = useD3((svg2) => {
      svg2.selectAll("*").remove();
      const densityData = computeDensity(data, options.contourBandwidth, columns2d);
      const color = getColorScale(options.color, [
        Math.min(...densityData.map((d) => d.value)),
        Math.max(...densityData.map((d) => d.value))
      ], options.reverseColor);
      svg2.append("g").selectAll("path").data(densityData).enter().append("path").attr("class", _default2.coutourPath).attr("d", (0, import_d35.geoPath)()).attr("fill", (d) => color(d.value));
      appendAxes(svg2);
    }, [
      data,
      columns2d,
      options.color,
      options.contourBandwidth,
      options.reverseColor
    ]);
    return /* @__PURE__ */ (0, import_preact4.h)(Fragment, null, /* @__PURE__ */ (0, import_preact4.h)("svg", {
      ref,
      viewBox: VIEWBOX.join(","),
      width: VIEWBOX[2],
      height: VIEWBOX[3],
      style: "width: 100%; height: auto;"
    }));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/contour.jsx
  var import_preact5 = __toModule(require_preact());
  var import_d36 = __toModule(require_d3_node());
  function ContourChart({ data, columns, options }) {
    const ref = useD3((svg2) => {
      svg2.selectAll("*").remove();
      const densityData = computeDensity(data, options.contourBandwidth, columns);
      svg2.append("g").selectAll("path").data(densityData).enter().append("path").attr("class", _default2.contourPath).attr("d", (0, import_d36.geoPath)());
      appendAxes(svg2);
    }, [data, columns, options.contourBandwidth]);
    return /* @__PURE__ */ (0, import_preact5.h)(Fragment, null, /* @__PURE__ */ (0, import_preact5.h)("svg", {
      ref,
      viewBox: VIEWBOX.join(","),
      width: VIEWBOX[2],
      height: VIEWBOX[3],
      style: "width: 100%; height: auto;"
    }));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/contour-scatterplot.jsx
  var import_preact6 = __toModule(require_preact());
  var import_d37 = __toModule(require_d3_node());
  function ContourScatterplot({
    data,
    columns,
    options,
    brushMap,
    callback
  }) {
    let [x, y] = columns;
    const isMobile = useMobileContext();
    const hasBrushing = Object.keys(brushMap).length > 0;
    function getClasses(d) {
      let classes = _default2.dot;
      if (hasBrushing) {
        classes += brushMap[d.id] ? ` ${_default2.brushed}` : ` ${_default2.notbrushed}`;
      }
      return classes;
    }
    const ref = useD3((svg2) => {
      svg2.selectAll("*").remove();
      svg2.append("g").selectAll("path").data(data.map((d, i) => brushMap[i] ? { ...d, brushed: true } : d).filter((d) => isValidDatum(d, columns))).join("path").attr("stroke-width", options.size).attr("stroke-opacity", options.opacity).attr("class", getClasses).attr("d", (d) => `M${xScale(d[x])}, ${yScale(d[y])}h0`);
      const densityData = computeDensity(data, options.contourBandwidth, columns);
      svg2.append("g").selectAll("path").data(densityData).enter().append("path").attr("class", _default2.contourPath).attr("d", (0, import_d37.geoPath)());
      appendAxes(svg2);
      if (!isMobile)
        svg2.append("g").call(makeBrushTool(brushFn(data, columns, callback)));
    }, [
      data,
      columns,
      brushMap,
      options.size,
      options.opacity,
      options.contourBandwidth
    ]);
    return /* @__PURE__ */ (0, import_preact6.h)(Fragment, null, /* @__PURE__ */ (0, import_preact6.h)("svg", {
      id: "dataviz_scatterplot",
      class: _default2.viz,
      ref,
      viewBox: `0, 0, ${DEFAULT_CANVAS_WIDTH}, ${DEFAULT_CANVAS_HEIGHT}`,
      width: DEFAULT_CANVAS_WIDTH,
      height: DEFAULT_CANVAS_HEIGHT
    }));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/density-scatterplot.jsx
  var import_preact7 = __toModule(require_preact());
  var import_d38 = __toModule(require_d3_node());
  function DensityScatterplot({
    data,
    columns,
    options,
    brushMap,
    callback
  }) {
    let [x, y] = columns;
    const isMobile = useMobileContext();
    const hasBrushing = Object.keys(brushMap).length > 0;
    function getClasses(d) {
      let classes = _default2.dot;
      if (hasBrushing) {
        classes += brushMap[d.id] ? ` ${_default2.brushed}` : ` ${_default2.notbrushed}`;
      }
      return classes;
    }
    const ref = useD3((svg2) => {
      svg2.selectAll("*").remove();
      svg2.append("g").selectAll("path").data(data.filter((d) => isValidDatum(d, columns))).join("path").attr("stroke-width", options.size).attr("stroke-opacity", options.opacity).attr("class", getClasses).attr("d", (d) => `M${xScale(d[x])}, ${yScale(d[y])}h0`);
      appendAxes(svg2);
      if (!isMobile)
        svg2.append("g").call(makeBrushTool(brushFn(data, columns, callback)));
      function calcDensity(column, range) {
        const obj = {};
        data.filter((d) => isValidDatum(d, column)).map((d) => symFloor(d[column])).filter((n) => inRange(n, range)).forEach((n) => {
          if (obj[n] == null)
            obj[n] = 1;
          else
            obj[n] += 1;
        });
        for (let i = range[0]; i <= range[1]; i++) {
          if (obj[i] == null)
            obj[i] = 0;
        }
        return Object.entries(obj).sort(([a, _], [b, __]) => a - b).map(([a, b]) => [+a, b]);
      }
      const hDensity = calcDensity(x, AXES_DOMAIN);
      const vDensity = calcDensity(y, AXES_DOMAIN);
      const max = (d) => Math.max(...d.map(([_, d2]) => d2));
      const hMax = max(hDensity);
      const vMax = max(vDensity);
      function dScale(max2, scl, range) {
        return (0, import_d38.scaleLinear)().domain([0, max2]).range([scl(range[0]), scl(range[1])]);
      }
      const hScale = dScale(hMax, yScale, [AXES_DOMAIN[1], DOMAIN[1]]);
      const vScale = dScale(vMax, xScale, [AXES_DOMAIN[1], DOMAIN[1]]);
      const curveFn = import_d38.curveCardinal;
      const hLine = (0, import_d38.line)().x(([n, _]) => xScale(n)).y(([_, d]) => hScale(d)).curve(curveFn);
      const vLine = (0, import_d38.line)().x(([_, d]) => vScale(d)).y(([n, _]) => yScale(n)).curve(curveFn);
      svg2.append("path").attr("class", _default2.densityline).datum(hDensity).attr("d", hLine);
      svg2.append("path").attr("class", _default2.densityline).datum(vDensity).attr("d", vLine);
      appendAxes(svg2);
    }, [data, columns, brushMap, options.size, options.opacity, options.k]);
    function isBrushed2(extent, x2, y2) {
      const x0 = extent[0][0], y0 = extent[0][1], x1 = extent[1][0], y1 = extent[1][1];
      return x0 <= x2 && x2 <= x1 && y0 <= y2 && y2 <= y1;
    }
    return /* @__PURE__ */ (0, import_preact7.h)(Fragment, null, /* @__PURE__ */ (0, import_preact7.h)("svg", {
      id: "dataviz_scatterplot",
      class: _default2.viz,
      ref,
      viewBox: `0, 0, ${DEFAULT_CANVAS_WIDTH}, ${DEFAULT_CANVAS_HEIGHT}`,
      width: DEFAULT_CANVAS_WIDTH,
      height: DEFAULT_CANVAS_HEIGHT
    }));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/heatmap.jsx
  var import_preact8 = __toModule(require_preact());
  function Heatmap({ data, columns, options }) {
    const ref = useD3((svg2) => {
      const heatmap = calcHeatmap(data, columns);
      let min = Infinity, max = -Infinity;
      for (let { value } of heatmap) {
        let n = value;
        min = n < min ? n : min;
        max = n > max ? n : max;
      }
      const average = heatmap.map(({ value }) => value).reduce((sum, v) => {
        return v + sum;
      }, 0) / heatmap.length;
      max = average + (max - average) * 0.4;
      const colorScale = getColorScale(options.color, [min, max], options.reverseColor);
      svg2.selectAll("*").remove();
      svg2.append("g").selectAll("rect").data(heatmap).join("rect").attr("class", "rect graphcontent").attr("stroke", "none").attr("rx", "4").attr("ry", `${4 * yBand.bandwidth() / xBand.bandwidth()}`).attr("y", (d) => yScale(d.y + UNCERTAINTY)).attr("x", (d) => xScale(d.x - UNCERTAINTY)).attr("width", xBand.bandwidth()).attr("height", yBand.bandwidth()).attr("fill", (d) => colorScale(d.value));
      appendAxes(svg2);
    }, [data, columns, options.color, options.reverseColor]);
    return /* @__PURE__ */ (0, import_preact8.h)(Fragment, null, /* @__PURE__ */ (0, import_preact8.h)("svg", {
      ref,
      viewBox: VIEWBOX.join(","),
      width: VIEWBOX[2],
      height: VIEWBOX[3],
      style: "width: 100%; height: auto;"
    }));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/scatterplot.jsx
  var import_preact9 = __toModule(require_preact());
  function Scatterplot({
    data,
    columns,
    options,
    brushMap,
    dispatch
  }) {
    let [x, y] = columns;
    const isMobile = useMobileContext();
    const hasBrushing = Object.keys(brushMap).length > 0;
    function getClasses(d) {
      let classes = _default2.dot;
      if (hasBrushing) {
        classes += brushMap[d.id] ? ` ${_default2.brushed}` : ` ${_default2.notbrushed}`;
      }
      return classes;
    }
    const ref = useD3((svg2) => {
      svg2.selectAll("*").remove();
      svg2.append("g").selectAll("path").data(data.filter((d) => isValidDatum(d, columns))).join("path").attr("stroke-width", options.size).attr("stroke-opacity", options.opacity).attr("class", getClasses).attr("d", (d) => `M${xScale(d[x])}, ${yScale(d[y])}h0`);
      appendAxes(svg2);
      if (!isMobile)
        svg2.append("g").call(makeBrushTool(brushFn(data, columns, dispatch)));
    }, [data, columns, brushMap, options.size, options.opacity]);
    return /* @__PURE__ */ (0, import_preact9.h)(Fragment, null, /* @__PURE__ */ (0, import_preact9.h)("svg", {
      ref,
      viewBox: VIEWBOX.join(","),
      width: VIEWBOX[2],
      height: VIEWBOX[3],
      style: "width: 100%; height: auto;"
    }));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/numbers.jsx
  var import_preact10 = __toModule(require_preact());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/labels.js
  function appendLabel(svg2, textContent, x, y) {
    const label = svg2.append("g").attr("transform", `translate(${xScale(x)}, ${yScale(y)})`);
    label.append("text").text(textContent).style("stroke", "white").style("stroke-width", "20px");
    label.append("text").text(textContent).style("fill", "black");
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/numbers.jsx
  function Numbers({ state, columns }) {
    let [x, y] = columns;
    let counts;
    if (inStandardColumnSet(state.standardColumnSet, columns))
      counts = state.standardRegionCounts[x];
    else
      counts = countGraphRegions(state.processedRawData, columns);
    const ref = useD3((svg2) => {
      svg2.selectAll("*").remove();
      appendAxes(svg2);
      appendLabel(svg2, counts.origin, 0, 0);
      const getQuadrantTotal = (quadrant) => counts.quadrants[quadrant] + counts.outerQuadrants[quadrant];
      const nw = getQuadrantTotal("nw");
      const ne = getQuadrantTotal("ne");
      const se = getQuadrantTotal("se");
      const sw = getQuadrantTotal("sw");
      appendLabel(svg2, nw, -5, 5);
      appendLabel(svg2, ne, 5, 5);
      appendLabel(svg2, se, 5, -5);
      appendLabel(svg2, sw, -5, -5);
      const getAxisTotal = (cardinal) => counts.axes[cardinal] + counts.outerAxes[cardinal];
      const n = getAxisTotal("n");
      const e = getAxisTotal("e");
      const s = getAxisTotal("s");
      const w = getAxisTotal("w");
      appendLabel(svg2, n, 0, 5);
      appendLabel(svg2, e, 5, 0);
      appendLabel(svg2, s, 0, -5);
      appendLabel(svg2, w, -5, 0);
    }, [state.standardRegionCounts, columns]);
    return /* @__PURE__ */ (0, import_preact10.h)(Fragment, null, /* @__PURE__ */ (0, import_preact10.h)("svg", {
      ref,
      viewBox: VIEWBOX.join(","),
      width: VIEWBOX[2],
      height: VIEWBOX[3],
      style: "width: 100%; height: auto;"
    }));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/proportions.jsx
  var import_preact11 = __toModule(require_preact());
  function Proportions({ state, columns }) {
    let [x, y] = columns;
    let proportions;
    if (inStandardColumnSet(state.standardColumnSet, columns))
      proportions = state.standardProportions[x];
    else
      proportions = countGraphRegionProportions(state.processedRawData, columns);
    const ref = useD3((svg2) => {
      svg2.selectAll("*").remove();
      appendAxes(svg2);
      appendLabel(svg2, `${proportions.origin}%`, 0, 0);
      const { nw, ne, se, sw } = proportions.quadrants;
      appendLabel(svg2, `${ne}%`, 5, 5);
      appendLabel(svg2, `${nw}%`, -5, 5);
      appendLabel(svg2, `${se}%`, 5, -5);
      appendLabel(svg2, `${sw}%`, -5, -5);
      const { n, e, s, w } = proportions.axes;
      appendLabel(svg2, `${n}%`, 0, 5);
      appendLabel(svg2, `${e}%`, 5, 0);
      appendLabel(svg2, `${s}%`, 0, -5);
      appendLabel(svg2, `${w}%`, -5, 0);
    }, [state.standardProportions, columns]);
    return /* @__PURE__ */ (0, import_preact11.h)(Fragment, null, /* @__PURE__ */ (0, import_preact11.h)("svg", {
      ref,
      viewBox: VIEWBOX.join(","),
      width: VIEWBOX[2],
      height: VIEWBOX[3],
      style: "width: 100%; height: auto;"
    }));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/lib/misc.jsx
  var isChosenAxis = (a) => a != "";
  var hasXAxis = ({ x }) => isChosenAxis(x);
  var hasXYAxes = ({ x, y }) => isChosenAxis(x) && isChosenAxis(y);
  var canShowCustomViz = (axes) => hasXYAxes(axes);
  function symFloor(n) {
    return n / Math.abs(n) * Math.floor(Math.abs(n));
  }
  function rangeSize(range) {
    return Math.abs(Math.max(...range) - Math.min(...range));
  }
  function graphType2Component(graphType) {
    switch (graphType) {
      case GRAPH_TYPE.heatmap:
        return Heatmap;
      case GRAPH_TYPE.scatterplot:
        return Scatterplot;
      case GRAPH_TYPE.contourScatterplot:
        return ContourScatterplot;
      case GRAPH_TYPE.density:
        return DensityScatterplot;
      case GRAPH_TYPE.contour:
        return ContourChart;
      case GRAPH_TYPE.colorContour:
        return ColorContour;
      case GRAPH_TYPE.numbers:
        return Numbers;
      case GRAPH_TYPE.proportions:
        return Proportions;
      default: {
        const Fallback = () => /* @__PURE__ */ h("span", null, "nothing to display");
        return Fallback;
      }
    }
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/lib/svg-export.js
  var svgExport = {};
  var version = "1.0.0";
  var _options = {};
  function getSvgElement(svg2) {
    let div = document.createElement("div");
    div.className = "tempdiv-svg-exportJS";
    if (typeof svg2 === "string") {
      div.insertAdjacentHTML("beforeend", svg2.trim());
      svg2 = div.firstChild;
    }
    if (!svg2.nodeType || svg2.nodeType !== 1) {
      return null;
    }
    let svgClone = svg2.cloneNode(true);
    svgClone.style.display = null;
    div.appendChild(svgClone);
    div.style.visibility = "hidden";
    div.style.display = "table";
    div.style.position = "absolute";
    document.body.appendChild(div);
    return svgClone;
  }
  function setOptions(svgElement, options) {
    _options = {
      originalWidth: 100,
      originalHeight: 100,
      width: 100,
      height: 100,
      scale: 1,
      useCSS: true,
      transparentBackgroundReplace: "white",
      pdfOptions: {
        customFonts: [],
        pageLayout: { margin: 50, margins: {} },
        addTitleToPage: true,
        chartCaption: "",
        pdfTextFontFamily: "Helvetica",
        pdfTitleFontSize: 20,
        pdfCaptionFontSize: 14
      }
    };
    _options.originalHeight = svgElement.style.getPropertyValue("height").indexOf("%") !== -1 || svgElement.getAttribute("height") && svgElement.getAttribute("height").indexOf("%") !== -1 ? svgElement.getBBox().height * _options.scale : svgElement.getBoundingClientRect().height * _options.scale;
    _options.originalWidth = svgElement.style.getPropertyValue("width").indexOf("%") !== -1 || svgElement.getAttribute("width") && svgElement.getAttribute("width").indexOf("%") !== -1 ? svgElement.getBBox().width * _options.scale : svgElement.getBoundingClientRect().width * _options.scale;
    if (options && options.scale && typeof options.scale === "number") {
      _options.scale = options.scale;
    }
    if (!options || !options.height) {
      _options.height = _options.originalHeight * _options.scale;
    } else if (typeof options.height === "number") {
      _options.height = options.height * _options.scale;
    }
    if (!options || !options.width) {
      _options.width = _options.originalWidth * _options.scale;
    } else if (typeof options.width === "number") {
      _options.width = options.width * _options.scale;
    }
    if (options && options.useCSS === false) {
      _options.useCSS = false;
    }
    if (options && options.transparentBackgroundReplace) {
      _options.transparentBackgroundReplace = options.transparentBackgroundReplace;
    }
  }
  function useCSSfromComputedStyles(element, elementClone) {
    if (typeof getComputedStyle !== "function") {
      return;
    }
    element.childNodes.forEach((child, index) => {
      if (child.nodeType === 1) {
        useCSSfromComputedStyles(child, elementClone.childNodes[parseInt(index, 10)]);
      }
    });
    let compStyles = window.getComputedStyle(element);
    if (compStyles.length > 0) {
      for (const compStyle of compStyles) {
        if (["width", "height", "inline-size", "block-size"].indexOf(compStyle) === -1) {
          elementClone.style.setProperty(compStyle, compStyles.getPropertyValue(compStyle));
        }
      }
    }
  }
  function setupSvg(svgElement, originalSvg, asString) {
    if (typeof asString === "undefined") {
      asString = true;
    }
    if (_options.useCSS && typeof originalSvg === "object") {
      useCSSfromComputedStyles(originalSvg, svgElement);
      svgElement.style.display = null;
    }
    svgElement.style.width = null;
    svgElement.style.height = null;
    svgElement.setAttribute("width", _options.width);
    svgElement.setAttribute("height", _options.height);
    svgElement.setAttribute("preserveAspectRatio", "none");
    svgElement.setAttribute("viewBox", `0 0 ${_options.originalWidth} ${_options.originalHeight}`);
    let elements = document.getElementsByClassName("tempdiv-svg-exportJS");
    while (elements.length > 0) {
      elements[0].parentNode.removeChild(elements[0]);
    }
    if (asString) {
      let serializer = new XMLSerializer();
      let svgString = serializer.serializeToString(svgElement).replace(/currentColor/g, "black");
      if (!svgString.match(/^<svg[^>]+xmlns="http:\/\/www\.w3\.org\/2000\/svg"/)) {
        svgString = svgString.replace(/^<svg/, '<svg xmlns="http://www.w3.org/2000/svg"');
      }
      if (!svgString.match(/^<svg[^>]+"http:\/\/www\.w3\.org\/1999\/xlink"/)) {
        svgString = svgString.replace(/^<svg/, '<svg xmlns:xlink="http://www.w3.org/1999/xlink"');
      }
      return svgString;
    }
    return svgElement;
  }
  function triggerDownload(uri, name, canvas) {
    name = name.replace(/[/\\?%*:|"<>]/g, "_");
    if (navigator.msSaveBlob) {
      let binary = decodeURIComponent(uri.split(",")[1]), array = [];
      let mimeString = uri.split(",")[0].split(":")[1].split(";")[0];
      for (let i = 0; i < binary.length; i++) {
        array.push(binary.charCodeAt(i));
      }
      let blob = null;
      if (canvas != null) {
        blob = canvas.msToBlob();
      } else {
        blob = new Blob([new Uint8Array(array)], { type: mimeString });
      }
      return navigator.msSaveBlob(blob, name);
    }
    let link = document.createElement("a");
    link.download = name;
    link.href = uri;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
  function downloadSvg(svg2, svgName, options) {
    let svgElement = getSvgElement(svg2);
    if (!svgElement) {
      return;
    }
    if (svgName == null) {
      svgName = "chart";
    }
    setOptions(svgElement, options);
    let svgString = setupSvg(svgElement, svg2);
    svgString = `<?xml version="1.0" standalone="no"?>\r
${svgString}`;
    let url = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svgString)}`;
    triggerDownload(url, `${svgName}.svg`);
  }
  svgExport.version = version;
  svgExport.downloadSvg = downloadSvg;

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/lib/viztools.js
  function isValidDatum(datum, columns) {
    if (columns instanceof Array !== true)
      columns = [columns];
    return columns.every((c) => datum[c] !== NA_SYMBOL);
  }
  function getColorScale(color, domain, rev = false) {
    if (rev)
      domain = [domain[1], domain[0]];
    let colorScale;
    if (CUSTOM_COLORS[color] == null)
      colorScale = d3.scaleSequential(d3[color]).domain(domain);
    else
      colorScale = d3.scaleSequential(CUSTOM_COLORS[color]).domain(domain);
    return colorScale;
  }
  function calcHeatmap(data, columns) {
    const heatmap = [];
    const totals = {};
    const toPairStr = (x, y) => `${x},${y}`;
    for (let datum of data) {
      if (!isValidDatum(datum, columns))
        continue;
      const xValue = symFloor(datum[columns[0]]);
      const yValue = symFloor(datum[columns[1]]);
      const pair = toPairStr(xValue, yValue);
      if (totals[pair] == null)
        totals[pair] = 0;
      else
        totals[pair] += 1;
    }
    for (let pair in totals) {
      const [x, y] = pair.split(",").map((t) => +t);
      heatmap.push({ x, y, value: totals[pair] });
    }
    return heatmap;
  }
  function makeBrushTool(emit) {
    return d3.brush().extent([
      [0, 0],
      [VIEWBOX[2], VIEWBOX[3]]
    ]).on("end", emit);
  }
  function brushFn(data, columns, cb) {
    return function(BrushEvent) {
      const { selection } = BrushEvent;
      if (!BrushEvent.sourceEvent || selection == null) {
        cb({ type: "BRUSH", payload: {} });
        return;
      }
      const extent = selection;
      const brushed = data.reduce((map, d) => isValidDatum(d, columns) && isBrushed(extent, xScale(d[columns[0]]), yScale(d[columns[1]])) ? { ...map, [d.id]: true } : map, {});
      cb({ type: "BRUSH", payload: brushed });
    };
  }
  function isBrushed(extent, x, y) {
    const x0 = extent[0][0], y0 = extent[0][1], x1 = extent[1][0], y1 = extent[1][1];
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }
  function computeDensity(data, bandwidth, columns2d) {
    const [x, y] = columns2d;
    return d3.contourDensity().x((d) => xScale(d[x])).y((d) => yScale(d[y])).size([rangeSize(xScale.range()), rangeSize(yScale.range())]).cellSize(2).thresholds(20).bandwidth(bandwidth)(data);
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/lib/data-manipulation.js
  function cleanQuestions(data, header2) {
    return Object.keys(data[0]).filter((q) => q != "poll" && q != "Language" && q != "id");
  }
  function getPairwiseColumns(questions2) {
    let pairs = [];
    for (let idx = 0; idx < questions2.length; idx += 2) {
      const columns = [questions2[idx], questions2[idx + 1]];
      pairs.push(columns);
    }
    return pairs;
  }
  function getCustomColumns(questions2, axes) {
    return Object.values(axes).filter((a) => a !== "").map((a) => questions2[a]);
  }
  function filterDataByDataset(data, dataset) {
    return data.filter((d) => {
      for (let condition in dataset) {
        if (d.Language === condition && !dataset[condition])
          return false;
        if (d.poll.toLowerCase() === condition && !dataset[condition])
          return false;
      }
      return true;
    });
  }
  function inRange(n, range) {
    if (isNaN(n))
      return false;
    return range[0] <= n && n <= range[1];
  }
  function inStandardColumnSet(columnSet, columns) {
    return columnSet.find((pair) => pair[0] === columns[0] && pair[1] === columns[1]) != null;
  }
  function applyJitter(data) {
    const dataCopy = (0, import_lodash.cloneDeep)(data);
    for (const row of dataCopy) {
      for (const key in row) {
        if (typeof row[key] === "number")
          row[key] += jitter_default(UNCERTAINTY);
      }
    }
    return dataCopy;
  }
  function sumRegionCounts(region) {
    const sumProps = (obj) => Object.keys(obj).reduce((sum, key) => sum + obj[key], 0);
    return region.origin + sumProps(region.axes) + sumProps(region.outerAxes) + sumProps(region.quadrants) + sumProps(region.outerQuadrants);
  }
  function roundProps(obj) {
    for (let key in obj) {
      obj[key] = Math.round(obj[key]);
    }
    return obj;
  }
  function countGraphRegionProportions(data, columns, count = null) {
    if (count == null)
      count = countGraphRegions(data, columns);
    const total = sumRegionCounts(count);
    const proportions = {
      origin: count.origin / total * 100,
      quadrants: {
        nw: (count.quadrants.nw + count.outerQuadrants.nw) / total * 100,
        ne: (count.quadrants.ne + count.outerQuadrants.ne) / total * 100,
        se: (count.quadrants.se + count.outerQuadrants.se) / total * 100,
        sw: (count.quadrants.sw + count.outerQuadrants.sw) / total * 100
      },
      axes: {
        n: (count.axes.n + count.outerAxes.n) / total * 100,
        e: (count.axes.e + count.outerAxes.e) / total * 100,
        s: (count.axes.s + count.outerAxes.s) / total * 100,
        w: (count.axes.w + count.outerAxes.w) / total * 100
      }
    };
    proportions.origin = Math.round(proportions.origin);
    proportions.quadrants = roundProps(proportions.quadrants);
    proportions.axes = roundProps(proportions.axes);
    return proportions;
  }
  function countGraphRegions(data, columns) {
    const [a, b] = columns;
    const region = {
      origin: 0,
      quadrants: { nw: 0, ne: 0, se: 0, sw: 0 },
      outerQuadrants: { nw: 0, ne: 0, se: 0, sw: 0 },
      axes: { n: 0, e: 0, s: 0, w: 0 },
      outerAxes: { n: 0, e: 0, s: 0, w: 0 }
    };
    data.forEach((respondent) => {
      let x = respondent[a], y = respondent[b];
      if (typeof x === "number" && typeof y === "number") {
        if (x === 0 && y === 0) {
          region.origin++;
        } else if ([x, y].every((n) => n >= -10 && n <= 10 && n !== 0)) {
          if (x < 0 && y < 0) {
            region.quadrants.sw++;
          } else if (x > 0 && y < 0) {
            region.quadrants.se++;
          } else if (x > 0 && y > 0) {
            region.quadrants.ne++;
          } else if (x < 0 && y > 0) {
            region.quadrants.nw++;
          }
        } else if (x === 0) {
          if (y < -10) {
            region.outerAxes.s++;
          } else if (y > 10) {
            region.outerAxes.n++;
          } else if (y < 0) {
            region.axes.s++;
          } else if (y > 0) {
            region.axes.n++;
          }
        } else if (y === 0) {
          if (x < -10) {
            region.outerAxes.w++;
          } else if (x > 10) {
            region.outerAxes.e++;
          } else if (x < 0) {
            region.axes.w++;
          } else if (x > 0) {
            region.axes.e++;
          }
        } else if ([x, y].every((n) => n < -10 || n > 10)) {
          if (x < -10 && y < -10) {
            region.outerQuadrants.sw++;
          } else if (x > 10 && y < -10) {
            region.outerQuadrants.se++;
          } else if (x > 10 && y > 10) {
            region.outerQuadrants.ne++;
          } else if (x < -10 && y > 10) {
            region.outerQuadrants.nw++;
          }
        }
      }
    });
    return region;
  }
  function countStandardSetGraphRegions(data, header2) {
    const counts = {};
    for (let i = 0; i < header2.length; i += 2) {
      const a = header2[i], b = header2[i + 1];
      counts[a] = counts[b] = countGraphRegions(data, [a, b]);
    }
    return counts;
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/asyncReducer.js
  var CSV_PATH = "./assets/data/all_maps.csv";
  var jitteryData;
  async function reducer(state, action) {
    switch (action.type) {
      case "RESET":
        return (0, import_lodash2.cloneDeep)(INITIAL_STATE);
      case "FETCH_DATA": {
        let rawData = state.rawData;
        if (state.data == null) {
          const data = await parseLocalCSV(CSV_PATH);
          rawData = data;
          jitteryData = applyJitter(rawData);
        }
        const questions2 = cleanQuestions(jitteryData);
        const standardRegionCounts = countStandardSetGraphRegions(rawData, questions2);
        const standardColumnSet = getPairwiseColumns(questions2);
        const standardProportions = standardColumnSet.reduce((obj, pair) => {
          obj[pair[0]] = countGraphRegionProportions(null, null, standardRegionCounts[pair[0]]);
          return obj;
        }, {});
        const colorScale = getColorScale(state.options.color, DOMAIN);
        const vizColumns = standardColumnSet;
        return (0, import_lodash3.default)({ ...state }, {
          data: jitteryData,
          rawData,
          processedRawData: rawData,
          standardRegionCounts,
          standardProportions,
          questions: questions2,
          vizColumns,
          colorScale,
          standardColumnSet
        });
      }
      case "FILTER_DATASET": {
        const options = { ...state.options };
        options.dataset = action.payload.dataset;
        const filteredData = filterDataByDataset(state.rawData, options.dataset);
        const jittery = applyJitter(filteredData);
        const standardRegionCounts = countStandardSetGraphRegions(filteredData, state.questions);
        const standardProportions = state.standardColumnSet.reduce((obj, pair) => {
          obj[pair[0]] = countGraphRegionProportions(null, null, standardRegionCounts[pair[0]]);
          return obj;
        }, {});
        return (0, import_lodash3.default)({ ...state }, {
          data: jittery,
          processedRawData: filteredData,
          standardRegionCounts,
          standardProportions,
          options
        });
      }
      case "TOGGLE_REV_COLOR": {
        const options = (0, import_lodash3.default)(state.options, {
          reverseColor: !state.options.reverseColor
        });
        const colorScale = getColorScale(options.color, AXES_DOMAIN, options.reverseColor);
        return (0, import_lodash3.default)({ ...state }, { options, colorScale });
      }
      case "CHANGE_COLOR_SCHEME": {
        const options = (0, import_lodash3.default)(state.options, action.payload);
        const colorScale = getColorScale(options.color, AXES_DOMAIN, options.reverseColor);
        return (0, import_lodash3.default)({ ...state }, { options, colorScale });
      }
      case "CHANGE_GRAPH_TYPE":
      case "CHANGE_DOT_OPACITY":
      case "CHANGE_DOT_SIZE":
      case "CHANGE_CONTOUR_BANDWIDTH": {
        const options = (0, import_lodash3.default)(state.options, action.payload);
        return (0, import_lodash3.default)({ ...state }, { options });
      }
      case "TOGGLE_CUSTOM": {
        const customViz = !state.customViz;
        return (0, import_lodash3.default)({ ...state }, { customViz });
      }
      case "SET_X_AXIS":
      case "SET_Y_AXIS": {
        const userAxes = (0, import_lodash3.default)({ ...state.userAxes }, action.payload);
        const vizColumns = getCustomColumns(state.questions, userAxes);
        return (0, import_lodash3.default)({ ...state }, { userAxes, vizColumns });
      }
      case "BRUSH": {
        const brushMap = action.payload;
        return (0, import_lodash3.default)({ ...state }, { brushMap });
      }
      case "OLDBRUSH": {
        return (0, import_lodash3.default)({ ...state }, { newBrushing: 0 });
      }
      default:
        throw new ReferenceError(`unknown action: '${action.type}' received`);
    }
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/viz/viz.jsx
  var import_preact12 = __toModule(require_preact());
  var import_preact_i18n2 = __toModule(require_preact_i18n());
  function Viz({ state, columns, dispatch }) {
    const { data, colorScale, options, brushMap } = state;
    if (columns == null)
      return;
    let [x, y] = columns;
    const SVG = graphType2Component(options.graph);
    return /* @__PURE__ */ (0, import_preact12.h)("div", {
      class: _default2.vizContainer
    }, /* @__PURE__ */ (0, import_preact12.h)("div", {
      class: _default2.viz
    }, /* @__PURE__ */ (0, import_preact12.h)(SVG, {
      state,
      data,
      columns,
      colorScale,
      options,
      brushMap,
      dispatch
    })), /* @__PURE__ */ (0, import_preact12.h)("div", {
      class: `${_default2.label} ${_default2.right}`
    }, /* @__PURE__ */ (0, import_preact12.h)(import_preact_i18n2.Text, {
      id: `questions.${x}.fr.end`
    }, questions[x].en.end)), /* @__PURE__ */ (0, import_preact12.h)("div", {
      class: `${_default2.label} ${_default2.left}`
    }, /* @__PURE__ */ (0, import_preact12.h)(import_preact_i18n2.Text, {
      id: `questions.${x}.fr.start`
    }, questions[x].en.start)), /* @__PURE__ */ (0, import_preact12.h)("div", {
      class: `${_default2.label} ${_default2.bottom}`
    }, /* @__PURE__ */ (0, import_preact12.h)(import_preact_i18n2.Text, {
      id: `questions.${y}.fr.start`
    }, questions[y].en.start)), /* @__PURE__ */ (0, import_preact12.h)("div", {
      class: `${_default2.label} ${_default2.top}`
    }, /* @__PURE__ */ (0, import_preact12.h)(import_preact_i18n2.Text, {
      id: `questions.${y}.fr.end`
    }, questions[y].en.end)));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/knobs.jsx
  var import_preact13 = __toModule(require_preact());
  var import_preact_i18n3 = __toModule(require_preact_i18n());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/knobs.css
  var _default3 = {};

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/knobs.jsx
  var import_hooks4 = __toModule(require_hooks());
  function Knobs(props) {
    const { state, dispatch } = props.reducer;
    let [shouldShowKnobs, setShouldShowKnobs] = (0, import_hooks4.useState)(false);
    function handleShowHideClick() {
      setShouldShowKnobs(!shouldShowKnobs);
    }
    let [wantsChooseRespondents, setWantsChooseRespondents] = (0, import_hooks4.useState)(false);
    const totalRespondents = state.data?.length;
    const graphType = state.options.graph;
    const isScatterplot = graphType === GRAPH_TYPE.scatterplot;
    const isHeatmap = graphType === GRAPH_TYPE.heatmap;
    const isNumbers = graphType === GRAPH_TYPE.numbers;
    const isProportions = graphType === GRAPH_TYPE.proportions;
    const isContour = graphType === GRAPH_TYPE.contour;
    const isColorContour = graphType === GRAPH_TYPE.colorContour;
    const hasDots = graphType === GRAPH_TYPE.scatterplot || graphType === GRAPH_TYPE.contourScatterplot || graphType === GRAPH_TYPE.density;
    const shouldDisableDotSize = !isScatterplot;
    const shouldDisableDotOpacity = shouldDisableDotSize;
    const shouldDisableXAxisSelect = !state.customViz;
    const shouldDisableYAxisSelect = !state.customViz || !hasXAxis(state.userAxes);
    const handleSettingChange = (type, prop, callback = null) => (event) => {
      dispatch({ type, payload: { [prop]: event.target.value } });
      if (callback != null && typeof callback === "function")
        callback();
    };
    const handleGraphTypeChange = handleSettingChange("CHANGE_GRAPH_TYPE", "graph");
    const handleDotSizeChange = handleSettingChange("CHANGE_DOT_SIZE", "size");
    const handleDotOpacityChange = handleSettingChange("CHANGE_DOT_OPACITY", "opacity");
    const handleWantsCustomGraphClick = handleSettingChange("TOGGLE_CUSTOM");
    const handleXSelectChange = handleSettingChange("SET_X_AXIS", "x");
    const handleYSelectChange = handleSettingChange("SET_Y_AXIS", "y");
    const handleDatasetChange = (event) => {
      const clicked = event.target.value;
      let other, dataset = { ...state.options.dataset };
      if (DATASETS.form.includes(clicked))
        other = clicked === "aga" ? "ba" : "aga";
      else if (DATASETS.language.includes(clicked))
        other = clicked === "en" ? "fr" : "en";
      dataset[clicked] = !dataset[clicked];
      if (!dataset[clicked] && !dataset[other]) {
        dataset[other] = true;
      }
      dispatch({ type: "FILTER_DATASET", payload: { dataset } });
    };
    const handleResetClick = () => dispatch({ type: "RESET" });
    const axesOptions = state.questions != null && state.questions.map((option, idx) => /* @__PURE__ */ (0, import_preact13.h)("option", {
      value: `${idx}`
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: `results.knobs.questions.${idx}`
    }, option)));
    return /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3.knobs,
      style: props.visible ? "" : "opacity: 0;pointer-events: none;"
    }, /* @__PURE__ */ (0, import_preact13.h)("div", {
      style: "display: flex; justify-content: space-between; align-items: center"
    }, /* @__PURE__ */ (0, import_preact13.h)("h1", {
      class: _default3.title,
      style: "cursor: pointer",
      onClick: handleShowHideClick
    }, "Options"), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["show-hide"],
      onClick: handleShowHideClick
    }, /* @__PURE__ */ (0, import_preact13.h)("h1", {
      style: "margin: 0 2rem 0 0;"
    }, /* @__PURE__ */ (0, import_preact13.h)("strong", null, shouldShowKnobs ? "\u2212" : "+")))), shouldShowKnobs && /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["grid-container"]
    }, /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3.knob
    }, /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["labeled-input"]
    }, /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "graphselect"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.graphtype"
    }, "Graph type")), /* @__PURE__ */ (0, import_preact13.h)("select", {
      id: "graphselect",
      name: "graphselect",
      onchange: handleGraphTypeChange
    }, /* @__PURE__ */ (0, import_preact13.h)("option", {
      selected: isScatterplot,
      value: GRAPH_TYPE.scatterplot
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.scatterplot"
    }, "scatterplot")), /* @__PURE__ */ (0, import_preact13.h)("option", {
      selected: isHeatmap,
      value: GRAPH_TYPE.heatmap
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.heatmap"
    }, "heatmap")), /* @__PURE__ */ (0, import_preact13.h)("option", {
      selected: isNumbers,
      value: GRAPH_TYPE.numbers
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.numbers"
    }, "numbers")), /* @__PURE__ */ (0, import_preact13.h)("option", {
      selected: isProportions,
      value: GRAPH_TYPE.proportions
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.percentage"
    }, "percentage")), /* @__PURE__ */ (0, import_preact13.h)("option", {
      selected: isContour,
      value: GRAPH_TYPE.contour
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.contour"
    }, "contour")), /* @__PURE__ */ (0, import_preact13.h)("option", {
      selected: isColorContour,
      value: GRAPH_TYPE.colorContour
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.colorContour"
    }, "topography"))))), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3.subknob
    }, /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["labeled-input"],
      style: hasDots ? "" : "display: none"
    }, /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "dotsize"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.dotsize"
    }, "Dot size")), /* @__PURE__ */ (0, import_preact13.h)("input", {
      type: "range",
      id: "dotsize",
      min: "1",
      max: "90",
      step: "0.1",
      name: "size",
      value: state.options.size,
      onchange: handleDotSizeChange,
      disabled: shouldDisableDotSize
    })), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["labeled-input"],
      style: hasDots ? "" : "display: none"
    }, /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "dotopacity"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.dotopacity"
    }, "Dot opacity")), /* @__PURE__ */ (0, import_preact13.h)("input", {
      type: "range",
      id: "dotopacity",
      min: "0.01",
      max: "1",
      step: "0.01",
      name: "opacity",
      value: state.options.opacity,
      onchange: handleDotOpacityChange,
      disabled: shouldDisableDotOpacity
    }))), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3.knob
    }, /* @__PURE__ */ (0, import_preact13.h)("input", {
      type: "checkbox",
      id: "dataselectors-checkbox",
      checked: wantsChooseRespondents,
      onclick: () => setWantsChooseRespondents(!wantsChooseRespondents)
    }), /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "dataselectors-checkbox"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.chooseRespondents"
    }, "Show respondents from..."))), /* @__PURE__ */ (0, import_preact13.h)("div", {
      id: "dataselectors",
      class: _default3.subknob,
      style: wantsChooseRespondents ? "" : "display: none"
    }, /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["labeled-checkbox"]
    }, /* @__PURE__ */ (0, import_preact13.h)("input", {
      type: "checkbox",
      id: "aga",
      name: "aga",
      value: "aga",
      checked: state.options.dataset.aga,
      onclick: handleDatasetChange
    }), /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "aga"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.aga"
    }, "Sobey Art Award Exhibition, Art Gallery of Alberta, Edmonton, October 5, 2019 - January 5, 2020"))), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["labeled-checkbox"]
    }, /* @__PURE__ */ (0, import_preact13.h)("input", {
      type: "checkbox",
      id: "ba",
      name: "ba",
      value: "ba",
      checked: state.options.dataset.ba,
      onclick: handleDatasetChange
    }), /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "ba"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.ba"
    }, 'Exhibition "Positions", Galerie Bradley Ertaskiran, Montreal, January 24 - March 7, 2020'))), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["labeled-checkbox"]
    }, /* @__PURE__ */ (0, import_preact13.h)("input", {
      type: "checkbox",
      id: "enforms",
      name: "en",
      value: "en",
      checked: state.options.dataset.en,
      onclick: handleDatasetChange
    }), /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "enforms"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.engforms"
    }, "English questionnaires"))), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["labeled-checkbox"]
    }, /* @__PURE__ */ (0, import_preact13.h)("input", {
      type: "checkbox",
      id: "frforms",
      name: "fr",
      value: "fr",
      checked: state.options.dataset.fr,
      onclick: handleDatasetChange
    }), /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "frforms"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.frforms"
    }, "French questionnaires")))), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3.knob
    }, /* @__PURE__ */ (0, import_preact13.h)("input", {
      type: "checkbox",
      id: "customgraphcheckbox",
      value: "custom",
      checked: state.customViz,
      onclick: handleWantsCustomGraphClick
    }), /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "customgraphcheckbox"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.custom"
    }, "Combine questions into a custom diagram..."))), /* @__PURE__ */ (0, import_preact13.h)("div", {
      id: "axesselectors",
      class: _default3.subknob,
      style: state.customViz ? "" : "display: none"
    }, /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["labeled-input"]
    }, /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "xselect"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.horizontal"
    }, "Horizontal axis")), /* @__PURE__ */ (0, import_preact13.h)("select", {
      id: "xselect",
      onchange: handleXSelectChange,
      disabled: shouldDisableXAxisSelect
    }, /* @__PURE__ */ (0, import_preact13.h)("option", {
      value: ""
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.option"
    }, "choose an option")), axesOptions)), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["labeled-input"]
    }, /* @__PURE__ */ (0, import_preact13.h)("label", {
      for: "yselect"
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.vertical"
    }, "Vertical axis")), /* @__PURE__ */ (0, import_preact13.h)("select", {
      id: "yselect",
      onchange: handleYSelectChange,
      disabled: shouldDisableYAxisSelect
    }, /* @__PURE__ */ (0, import_preact13.h)("option", {
      value: ""
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.option"
    }, "choose an option")), axesOptions))), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3.knob
    }, "Total = ", totalRespondents, " ", /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.respondents"
    }, "respondents"), props.selected > 0 && /* @__PURE__ */ (0, import_preact13.h)("span", null, "\xA0(", props.selected, "\xA0", /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.selected"
    }, "selected"), ")")), /* @__PURE__ */ (0, import_preact13.h)("div", {
      class: _default3["reset-btn"]
    }, /* @__PURE__ */ (0, import_preact13.h)("button", {
      type: "button",
      onclick: handleResetClick
    }, /* @__PURE__ */ (0, import_preact13.h)(import_preact_i18n3.Text, {
      id: "results.knobs.reset"
    }, "Reset")))));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/results.css
  var _default4 = {};

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/notify.css
  var _default5 = {};

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/notify.jsx
  function Notify(props) {
    if (!props.visible)
      return;
    return /* @__PURE__ */ h("div", {
      class: _default5.notif
    }, props.children);
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/results.jsx
  var import_lodash4 = __toModule(require_lodash());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/collapsible-section.jsx
  var import_preact14 = __toModule(require_preact());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/collapsible-section.css
  var _default6 = {};

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/collapsible-section.jsx
  function CollapsibleSection({ children, title, cb, isOpen }) {
    return /* @__PURE__ */ (0, import_preact14.h)("section", {
      class: isOpen ? _default6.open : _default6.collapsed
    }, /* @__PURE__ */ (0, import_preact14.h)("div", {
      class: _default6.title,
      onclick: cb
    }, /* @__PURE__ */ (0, import_preact14.h)("h1", null, title), /* @__PURE__ */ (0, import_preact14.h)("h1", null, /* @__PURE__ */ (0, import_preact14.h)("strong", null, !isOpen ? "+" : "\u2212"))), isOpen && children, isOpen && /* @__PURE__ */ (0, import_preact14.h)("h1", {
      style: "text-align: right; cursor: pointer;",
      onclick: cb
    }, /* @__PURE__ */ (0, import_preact14.h)("strong", null, "\u2212")));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/site-menu.jsx
  var import_preact15 = __toModule(require_preact());

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/site-menu.css
  var _default7 = {};

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/site-menu.jsx
  function SiteMenu(props) {
    return /* @__PURE__ */ (0, import_preact15.h)("div", {
      class: _default7["site-menu"],
      style: props.style
    }, /* @__PURE__ */ (0, import_preact15.h)("h1", null, "Nicolas Grenier"), /* @__PURE__ */ (0, import_preact15.h)("h3", null, /* @__PURE__ */ (0, import_preact15.h)("a", {
      href: "https://nicolasgrenier.com/Exhibitions-Projects"
    }, "Exhibitions & Projects /"), /* @__PURE__ */ (0, import_preact15.h)("a", {
      href: "https://nicolasgrenier.com/Paintings"
    }, "/ Paintings /"), /* @__PURE__ */ (0, import_preact15.h)("a", {
      href: "https://nicolasgrenier.com/Research"
    }, "/ Research /"), /* @__PURE__ */ (0, import_preact15.h)("a", {
      href: "https://nicolasgrenier.com/About"
    }, "/ About\xA0")));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/components/results.jsx
  function useAsyncReducer(reducer2, initState) {
    const [state, setState] = (0, import_hooks5.useState)(initState), dispatchState = async (action) => setState(await reducer2(state, action));
    return [state, dispatchState];
  }
  function Results() {
    const [state, dispatch] = useAsyncReducer(reducer, (0, import_lodash4.cloneDeep)(INITIAL_STATE));
    const [shouldShowKnobs, setShouldShowKnobs] = (0, import_hooks5.useState)(true);
    const { swapLang } = useLanguageContext();
    (0, import_hooks5.useEffect)(() => {
      if (state.data == null)
        dispatch({ type: "FETCH_DATA" });
    });
    const shouldShowCustomViz = state.customViz && canShowCustomViz(state.userAxes);
    let [notification, setNotification] = (0, import_hooks5.useState)(null);
    const getLatestCount = (0, import_hooks5.useCallback)(() => state.brushMap != null ? Object.keys(state.brushMap).length : 0, [state.brushMap]);
    (0, import_hooks5.useEffect)(() => {
      const latestCount = getLatestCount();
      if (latestCount !== 0) {
        setNotification(null);
        setTimeout(() => setNotification(/* @__PURE__ */ (0, import_preact16.h)(Notify, {
          visible: shouldShowKnobs
        }, /* @__PURE__ */ (0, import_preact16.h)("span", null, latestCount, "\xA0", /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
          id: "results.knobs.selected"
        }, "selected")))), 1);
      } else {
        setNotification(null);
      }
    }, [state.brushMap, shouldShowKnobs, getLatestCount]);
    (0, import_hooks5.useEffect)(() => {
      if (shouldShowCustomViz && introRef.current != null) {
        const y = introRef.current.getBoundingClientRect().bottom;
        window.scrollBy(0, y);
      }
    }, [shouldShowCustomViz, state.userAxes]);
    const introRef = (0, import_hooks5.useRef)();
    const mapsRef = (0, import_hooks5.useRef)();
    const footerRef = (0, import_hooks5.useRef)();
    let [showBackToTop, setShowBackToTop] = (0, import_hooks5.useState)(false);
    let [footerSectionsState, setFooterSectionsState] = (0, import_hooks5.useState)(0);
    const footerSection = {
      COMMENTS: 1,
      ANALYSIS: 2,
      CONSIDERATIONS: 4,
      ABOUT: 8,
      CONTACT: 16
    };
    function footerSectionIsOpen(section) {
      return (footerSectionsState & section) !== 0;
    }
    function toggleFooterSectionOpenClose(section) {
      setFooterSectionsState(footerSectionsState ^= section);
    }
    function collapseFooterSections() {
      setFooterSectionsState(0);
    }
    function handleToBottomClick() {
      const footerY = footerRef.current.getBoundingClientRect().top - 20;
      window.scrollTo(0, footerY);
    }
    function handleBackToTopClick() {
      const mapsY = mapsRef.current.getBoundingClientRect().bottom;
      if (mapsY < -1) {
        window.scrollTo(0, window.pageYOffset + mapsY - 20);
        collapseFooterSections();
        return;
      }
      const introY = introRef.current.getBoundingClientRect().bottom;
      if (introY < -1) {
        window.scrollTo(0, window.pageYOffset + introY + 1);
        return;
      }
      window.scrollTo(0, 0);
    }
    (0, import_hooks5.useEffect)(() => {
      document.onscroll = () => {
        if (mapsRef.current != null) {
          const height = mapsRef.current.getBoundingClientRect().bottom;
          if (height < window.innerHeight / 2)
            setShouldShowKnobs(false);
          else {
            setShouldShowKnobs(true);
          }
        }
        if (introRef.current != null) {
          const thresholdY = introRef.current.getBoundingClientRect().bottom - 10;
          if (thresholdY < 0) {
            setShowBackToTop(true);
          } else if (thresholdY > 0) {
            setShowBackToTop(false);
          }
        }
      };
    }, []);
    console.log({ APP_BASE_URL });
    return /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.results
    }, /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4["back-to-top"],
      onclick: handleBackToTopClick,
      style: showBackToTop ? "opacity: 1;" : "opacity: 0; pointer-events: none; cursor: default;"
    }, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.back-to-top"
    }, "Go up "), /* @__PURE__ */ (0, import_preact16.h)("img", {
      style: "max-height: 1em; padding-top: 0.2em",
      src: `..${APP_BASE_URL}/assets/up-arrow.svg`
    })), /* @__PURE__ */ (0, import_preact16.h)("div", {
      ref: introRef,
      class: _default4.intro
    }, /* @__PURE__ */ (0, import_preact16.h)(SiteMenu, {
      style: "margin-top: 0;"
    }), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4["en-fr"]
    }, /* @__PURE__ */ (0, import_preact16.h)("span", {
      onclick: () => swapLang("en")
    }, "English"), "\xA0/\xA0", /* @__PURE__ */ (0, import_preact16.h)("span", {
      onclick: () => swapLang("fr")
    }, "Fran\xE7ais")), /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.MarkupText, {
      id: "results.intro"
    }, /* @__PURE__ */ (0, import_preact16.h)("h1", null, "Existential Issues:", /* @__PURE__ */ (0, import_preact16.h)("br", null), "A Mapping Exercise"), /* @__PURE__ */ (0, import_preact16.h)("p", null, "In two of my recent exhibitions, I invited visitors to participate in a \u201CMapping Exercise\u201D by taking a few minutes to fill out a questionnaire comprising a variety of existential questions. Participants were asked to mark their position with a dot on a series of diagrams."), /* @__PURE__ */ (0, import_preact16.h)("h1", null, "Results"), /* @__PURE__ */ (0, import_preact16.h)("p", null, "In total, 1222 people completed the questionnaire: 941 during the Sobey Art Award Exhibition at the Art Gallery of Alberta in Edmonton (October 5, 2019 to January 5, 2020), and 281 during my solo exhibition at Galerie Bradley Ertaskiran in Montreal (January 24 to March 7, 2020)."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "In the scatterplot graphs below, each dot corresponds to the answer of one participant. The questions appear exactly as on the original questionnaire.")), /* @__PURE__ */ (0, import_preact16.h)("p", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.intro--link-p1"
    }, "You will find more information under the graphs, at", " "), /* @__PURE__ */ (0, import_preact16.h)("a", {
      href: "#null",
      onclick: handleToBottomClick
    }, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.intro--link-p2"
    }, "the bottom of the page")), ".")), /* @__PURE__ */ (0, import_preact16.h)(Knobs, {
      reducer: { state, dispatch },
      selected: getLatestCount(),
      visible: shouldShowKnobs
    }), notification, /* @__PURE__ */ (0, import_preact16.h)("div", {
      ref: mapsRef,
      class: _default4.maps
    }, shouldShowCustomViz && /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.map
    }, /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.maptitle
    }, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.customgraph"
    }, "Custom graph")), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapviz
    }, /* @__PURE__ */ (0, import_preact16.h)(Viz, {
      state,
      columns: state.vizColumns,
      dispatch
    }))), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.map
    }, /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.maptitle
    }, /* @__PURE__ */ (0, import_preact16.h)("div", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.part"
    }, "PART"), " I"), /* @__PURE__ */ (0, import_preact16.h)("div", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.part1.title"
    }, "YOU"))), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapviz
    }, /* @__PURE__ */ (0, import_preact16.h)(Viz, {
      state,
      columns: state.standardColumnSet?.[0],
      dispatch
    })), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapviz
    }, /* @__PURE__ */ (0, import_preact16.h)(Viz, {
      state,
      columns: state.standardColumnSet?.[1],
      dispatch
    }))), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.map
    }, /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.maptitle
    }, /* @__PURE__ */ (0, import_preact16.h)("div", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.part"
    }, "Part"), " II"), /* @__PURE__ */ (0, import_preact16.h)("div", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.part2.title"
    }, "You and the world"))), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapdescription
    }, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.MarkupText, {
      id: "results.part2.description"
    }, /* @__PURE__ */ (0, import_preact16.h)("p", null, "Think of the land where you grew up. Think of its natural physical properties, such as mountains, valleys, plains, forests, wetlands, rivers, lakes, sea, desert, etc. Then try to imagine this land in relation to the totality of physical spaces all across the globe."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "In your life, how much did you get to know the physical world?"))), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapviz
    }, /* @__PURE__ */ (0, import_preact16.h)(Viz, {
      state,
      columns: state.standardColumnSet?.[2],
      dispatch
    })), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapviz
    }, /* @__PURE__ */ (0, import_preact16.h)(Viz, {
      state,
      columns: state.standardColumnSet?.[3],
      dispatch
    })), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapviz
    }, /* @__PURE__ */ (0, import_preact16.h)(Viz, {
      state,
      columns: state.standardColumnSet?.[4],
      dispatch
    }))), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.map
    }, /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.maptitle
    }, /* @__PURE__ */ (0, import_preact16.h)("div", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.part"
    }, "Part"), " III"), /* @__PURE__ */ (0, import_preact16.h)("div", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.part3.title"
    }, "You and the future"))), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapdescription
    }, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.MarkupText, {
      id: "results.part3.description"
    }, /* @__PURE__ */ (0, import_preact16.h)("p", null, "Try to picture the totality of human activities taking place on the planet today."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "Do you think that humanity as a whole is moving in a good direction, aligned with a coherent vision for the future?"))), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapviz
    }, /* @__PURE__ */ (0, import_preact16.h)(Viz, {
      state,
      columns: state.standardColumnSet?.[5],
      dispatch
    })), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapviz
    }, /* @__PURE__ */ (0, import_preact16.h)(Viz, {
      state,
      columns: state.standardColumnSet?.[6],
      dispatch
    })), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapviz
    }, /* @__PURE__ */ (0, import_preact16.h)(Viz, {
      state,
      columns: state.standardColumnSet?.[7],
      dispatch
    }))), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.map
    }, /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.maptitle
    }, /* @__PURE__ */ (0, import_preact16.h)("div", null), /* @__PURE__ */ (0, import_preact16.h)("div", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.part4.title"
    }, "You and this exercise"))), /* @__PURE__ */ (0, import_preact16.h)("div", {
      class: _default4.mapviz
    }, /* @__PURE__ */ (0, import_preact16.h)(Viz, {
      state,
      columns: state.standardColumnSet?.[8],
      dispatch
    })), /* @__PURE__ */ (0, import_preact16.h)("aside", {
      class: _default4["empty-after"]
    }, /* @__PURE__ */ (0, import_preact16.h)("p", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.footer.select"
    }, "Select & Follow Respondents"))), /* @__PURE__ */ (0, import_preact16.h)("p", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.footer.select--body"
    }, "You can draw a rectangle to select specific respondents and follow their answers from one graph to the next. (This function is not available on touchscreens.)")), /* @__PURE__ */ (0, import_preact16.h)("img", {
      style: "display: block; max-width: min(80vw, 400px); margin: 2rem auto 6rem;",
      src: "../assets/transparency_select_blue.png",
      alt: "an example of a mouse pointer selecting a rectangular section of points from a scatterplot"
    })))), /* @__PURE__ */ (0, import_preact16.h)("footer", {
      id: "footer",
      ref: footerRef
    }, /* @__PURE__ */ (0, import_preact16.h)(CollapsibleSection, {
      title: /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
        id: "results.footer.comments"
      }, "Comments left by respondents"),
      cb: () => toggleFooterSectionOpenClose(footerSection.COMMENTS),
      isOpen: footerSectionIsOpen(footerSection.COMMENTS)
    }, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.MarkupText, {
      id: "results.footer.comments--body"
    }, /* @__PURE__ */ (0, import_preact16.h)("p", null, "A space at the end of the questionnaire allowed those who wanted to leave comments."), /* @__PURE__ */ (0, import_preact16.h)("p", null, 'About 10-15% of respondents left a comment. Here is a non-exhaustive list of comments received. The most repetitive comments ("very interesting," "congrats for the great show," etc.) have been removed, and some comments were condensed or shortened during transcription..')), /* @__PURE__ */ (0, import_preact16.h)("h2", null, "Edmonton:"), /* @__PURE__ */ (0, import_preact16.h)("table", null, /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "please love me")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, 'Not sure "cosmological" was the right word.')), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "the human experiment")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "CLIMATE CHANGE IS REAL")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "ok boomer...")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "looking forward to the results,")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "beautiful show, very grounding")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "thank you for asking these questions")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "thank you for confronting us to our more realistic feeling & position about global issues")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "keep playing")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "<3")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "the axis is a western way of looking at the world")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "purpose test see people background and how they feel about past")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "you are wonderful love cherry pie")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, 'you might find "factfulness" interesting')), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "its very relaxing to write with a pencil")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "democracy is not = capitalism, this exercise is biased?")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "first question makes me sad, life is so hard")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "favorite part of the show, listened to the audio many times")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "I'm 65 years old, age is relevant")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "very confronting")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "good initiative, would love to continue")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "#bernie 2020")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "a certain worldview / fun exercise")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "egalitarian environmental passion aren't mutually inclusive")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Spectrum")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "merci")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "my 9 years old daughter and i thought about the questions a lot")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "the artist is not sociologist. your work is technically skilled but does not solve anything")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "i struggle with the questions")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "questions addressed were more relevant than I expected when done")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "my info aggregated for external use")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "super cool / question my values as a person and now society and the people")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "interesting big picture exercise")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "many supposed opposites in the questions")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "exercise is interesting as per spatial reasoning")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "made me question my life and my existence in my world")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "some concepts are tough to represent with a small dot")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Feel fucking depressed after this")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "great piece")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "did i did it right?")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "very thoughtful exercise")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "? on legitimacy because different meanings. interesting = thank you.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "took lots of effort, free labour.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "felt interesting to put emotions in grid, ppl do not understand issues of the world")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "doing this was hard in the environment, overstimulating, good luck.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "i am new media..23yo...insecure future...")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "thank you for sharing practice, exercise is curious compared to other exhibition.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "you blew my mind")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "great exercise understand where we are as person-society.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "this art is sick")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "joe mama")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "great art-thought please notify me")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "how did I read this ?!")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "doesnt represent a wide demographic...")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "doesnt represent whole society, interesting study.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "interesting, provoking, irrelevant, relevant, difficult exercise")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "cant wait to cry in bed all night long")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "what inspired you to make this art and this survey ?")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "I really loved this")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "fun exercise, chuckled out loud at last question.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "makes it less cold, great exhibition")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "ne rigole pas, tres interessant et cool.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "i feel depressed")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "deeply conflicted, question on my mind all the time...")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "thought provoking exercise")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "11 years old")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "deeep questions")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "good eye opener, seems longs")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "existentialism, good")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "thought provoking, would love to see what others have to sya")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "this is brilliant you\u2019re not alone")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "makes me feel bad, collective achievement")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "awesome, had fun")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "some questions made me thin")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "i like your art")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "don't like quadrants, too scientific")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "your paintings are meticulously crafted, waiting on news")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "intrigued, pessimistic")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "i appreciate provocation")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "axis are too western specific")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "makes me feel sad")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "this was great and important")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "suggestion: add grid")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Doesn\u2019t feel like tangible and abstraction are opposite")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Don\u2019t now difference between idealism and pragmatism")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "almost uncomfortable with the broadness of thought")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "made me thin, need to write about a piece for school project")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "excited to see how it turned out")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "seemed odd at first then I understood")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "love amalgamation of tech+visuals")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "super thought provoking")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "i find that some axis are not opposites")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "difficult and thought provoking")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "don't understand a thing")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "i am 54")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "interactive art like this makes me question my own beliefs")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "thanks, very relevant")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "good for reflection, not for science")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "very cool but very left thinking")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "pple kept saying it was too much work, but i think they're nuts. this is worth it")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "i complete the exercise in the views of my lover")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "question will be in my mind for awhile")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "interview ai clever. exercise helped me think about state of things")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "question insightful, unique, fruitful discussion, thks")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "hard question but important. is it better to be neutral or extreme?")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "too uncomfortable to take a stand, wants to know more about study"))), /* @__PURE__ */ (0, import_preact16.h)("h2", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.footer.comments--montreal"
    }, "Montreal"), ":"), /* @__PURE__ */ (0, import_preact16.h)("table", null, /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Certaines formulations dans les questions sont ambigu\xEBs, voire contradictoires. E.g. impact cosmologique de l'humanit\xE9")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "It's too cold in here!! My friend made me leave cause she's going to catch a flu")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Lovely, thoughtful exercise. Have you read any James Bridle?")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Didn't expect to statuate on my world changing beliefs at an art expo. Good work!")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "?")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Merci pour les r\xE9flexions pos\xE9es par tes oeuvres.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Exp\xE9rience pertinente \xE0 la modernit\xE9. apr\xE8s on veut voir la cartographie!")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "I found this an important exercise, making sense of what we think of each day but rarely put on paper.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Like zenkoans they were unanswerable but nice to meditate on")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "G\xE9nial, bravo :)")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "\xE0 20 ans on veut tout changer, \xE0 40 ans on observe le changement, \xE0 60 ans on se rend compte que rien ne change vraiment, \xE0 80 ans mon futur est derri\xE8re moi - good luck")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "L'important, c'est \xE7a qui compte")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Your sample is biased and way too small. trying to find a trend in a biased and elitist circle only shows the emptiness of this form")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "it was interesting to fill this out around other people, to see them thinking about their answers, erasing")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "This was a welcome change from the usual gallery experience")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "J'esp\xE8re vraiment gagner!")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "more questions, please... excellent work. keep up the research... and painting...")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Le dualisme cart\xE9sien est d\xE9pass\xE9. Il faut s'ouvrir au monde quantique (les choix de r\xE9ponse peuvent \xEAtre \xE0 la fois vrai et faux selon les cas).")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Thanks for being thoughtful + encouraging us to think")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Merci pour l'expo. Questionnaire cool. \xC0 bient\xF4t.")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "certaines questions m'ont emb\xEAt\xE9es... c'\xE9tait difficile!")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Data has the answers, it knows me better than I will ever know myself. Congrats on this amazing show my friend")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Bonne id\xE9e! J'ai h\xE2te de voir la publication. Ces questions font r\xE9fl\xE9chir")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "it was difficult to answer honestly. most questions are things I would need more time to think about... they really ask you to dig deep")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Je devine une fois encore, que je ne suis que tout noir ou tout blanc. Est-ce que le monde est une zone grise, et je suis en dehors?")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "It feels most of the questions/statements tend to push me think about those issues in rather binary point of view; I do understand this kind of mapping/survey exercise has to be polarized for its better & easier efficiency, but I've found some difficult to 'position' myself")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "I am having similar thoughts on technology and what it is truly doing to society, to our communities and our basic needs for connections and family")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "wonderful, inspiring.. thank you!")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Je me sentais observ\xE9 par moi-m\xEAme. je ne suis pas certain d'avoir \xE9t\xE9 100% honn\xEAte peut-\xEAtre 50-60% 70%")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "vraiment int\xE9ressant de se questionner dans le cadre de l'exposition. sets the mood & tone")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Parfois, il faut ??? une chose et une autre et son oppos\xE9 pour avancer")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "Congrats great show ps I like the exercise but I keep wanting to 3D it...")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "This has been a great exercise. The diagram, once I became comfortable with it did assist me in considering how it was that I actually felt. I wonder how it would look if I were to do it a second time. Thank you. I loved it")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "difficile de se positionner sans chiffres")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "difficile de se positionner exactement, enjeux compexes")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "merci pour la reflexion")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "jai 31 ans")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "bonjour j\u2019aime beaucoup")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "as an artist i did this for you, but basically wtf?")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "le monde libert\xE9 economique est different de la liberte artistique + poeme")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "when we will be able to live as one...")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "strong magnetic reaction to the exhibition")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "nice stepback from chaotic world")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "question well thought, age is irelevant")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "very engaging")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "accuracy of responses will shift")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "int\xE9ressant et pertinent - perception artiste")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "J\u2019ai pass\xE9 un tr\xE8s bon moement")), /* @__PURE__ */ (0, import_preact16.h)("tr", null, /* @__PURE__ */ (0, import_preact16.h)("td", null, "ensemble nous vaincrons le futur")))), /* @__PURE__ */ (0, import_preact16.h)(CollapsibleSection, {
      title: /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
        id: "results.footer.analysis"
      }, "Analysis"),
      cb: () => toggleFooterSectionOpenClose(footerSection.ANALYSIS),
      isOpen: footerSectionIsOpen(footerSection.ANALYSIS)
    }, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.MarkupText, {
      id: "results.footer.analysis--body"
    }, /* @__PURE__ */ (0, import_preact16.h)("p", null, "(Data analysis by Group Leger Analytics, with further interpretation and comments by Nicolas Grenier.)"), /* @__PURE__ */ (0, import_preact16.h)("h2", null, "PART I - YOU"), /* @__PURE__ */ (0, import_preact16.h)("h3", null, "Graph 1"), /* @__PURE__ */ (0, import_preact16.h)("ul", null, /* @__PURE__ */ (0, import_preact16.h)("li", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, "Most respondents situate themselves in the first half of their life and find it rather \u201Ceasy to exist in this world.\u201D")), /* @__PURE__ */ (0, import_preact16.h)("li", null, "Overall, about a third (360 respondents, or 32%) find it rather \u201Chard to exist in this world.\u201D")), /* @__PURE__ */ (0, import_preact16.h)("h3", null, "Graph 2"), /* @__PURE__ */ (0, import_preact16.h)("ul", null, /* @__PURE__ */ (0, import_preact16.h)("li", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, "The vast majority of respondents"), " (782 individuals, or 66%)", " ", /* @__PURE__ */ (0, import_preact16.h)("strong", null, "want their life to have greater meaning beyond their small existence.", " "), "Among these, a majority believes that morality and social norms are human universals."), /* @__PURE__ */ (0, import_preact16.h)("li", null, "However,", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", "there is no overall consensus as to whether morality is universal or cultural.", " "), "Slightly more respondents (535, or 45%) believe that morality is subjective and cultural rather than human universals (486, or 41%), and a significant proportion are neutral or ambivalent (146, or 13%).")), /* @__PURE__ */ (0, import_preact16.h)("h2", null, "PART II - YOU AND THE WORLD"), /* @__PURE__ */ (0, import_preact16.h)("h3", null, "Graph 3"), /* @__PURE__ */ (0, import_preact16.h)("ul", null, /* @__PURE__ */ (0, import_preact16.h)("li", null, "There is a strong concentration in the top right quadrant, where", /* @__PURE__ */ (0, import_preact16.h)("strong", null, "a majority of respondents"), " (657, or 56%)", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", "indicate that they both feel a deep connexion to the land and keep moving far and wide."))), /* @__PURE__ */ (0, import_preact16.h)("h3", null, "Graph 4"), /* @__PURE__ */ (0, import_preact16.h)("ul", null, /* @__PURE__ */ (0, import_preact16.h)("li", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, "A clear majority of respondents"), " (665, or 57%)", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", "does not accept the legitimacy of the current world order."), " ", "Among these, most respondents (371) indicate that they care more about larger questions and abstractions than the tangible reality of life."), /* @__PURE__ */ (0, import_preact16.h)("li", null, "Overall, answers are scattered on all quadrants, and a large proportion (332, or 28%) is neutral or ambivalent when given the choice between caring more about the \u201Ctangible reality of life\u201D or \u201Clarger questions and abstractions.\u201D")), /* @__PURE__ */ (0, import_preact16.h)("h3", null, "Graph 5"), /* @__PURE__ */ (0, import_preact16.h)("ul", null, /* @__PURE__ */ (0, import_preact16.h)("li", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, "There is almost complete unanimity"), " (1049 respondents, or 92%):", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", "exposure to different beliefs and value systems leads to increased tolerance and mutual understanding.")), /* @__PURE__ */ (0, import_preact16.h)("li", null, "A majority of respondents (589 or 51%) indicate that they define themselves and their convictions on their own, but many also define themselves in relation to groups with whom they belong (380, or 33%) and a good proportion is neutral or ambivalent (182, or 16%).")), /* @__PURE__ */ (0, import_preact16.h)("h2", null, "PART III - YOU AND THE FUTURE"), /* @__PURE__ */ (0, import_preact16.h)("h3", null, "Graph 6"), /* @__PURE__ */ (0, import_preact16.h)("ul", null, /* @__PURE__ */ (0, import_preact16.h)("li", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, "There is a very strong consensus"), " (938 respondents, or 83%)", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", "that we, humans living today, will have an impact of cosmological importance for the future of humanity.")), /* @__PURE__ */ (0, import_preact16.h)("li", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, "A strong majority"), " (653 respondents, or 57%)", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", "believes that \u201Cwe\u2019re going toward self-destruction,\u201D"), " ", "while a small minority (266, or 23%) believes that we\u2019re making constant progress, and almost as many (223, or 20%) are neutral or ambivalent.")), /* @__PURE__ */ (0, import_preact16.h)("h3", null, "Graph 7"), /* @__PURE__ */ (0, import_preact16.h)("ul", null, /* @__PURE__ */ (0, import_preact16.h)("li", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, "A strong majority"), " (847 respondents, or 75%)", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", "wants to protect the planet and reinvent a more egalitarian world"), ", and withink this majority most respondents", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", "are willing to dedicate themselves to the cause.", " ")), /* @__PURE__ */ (0, import_preact16.h)("li", null, "By contrast, a tiny minority affirms being strongly committed to defending \u201Cprivate property, the free market economy, and the freedom of the individual\u201D (70 respondents or 6%). A more significant proportion is neutral or ambivalent (161 respondents, or 15%).")), /* @__PURE__ */ (0, import_preact16.h)("h3", null, "Graph 8"), /* @__PURE__ */ (0, import_preact16.h)("ul", null, /* @__PURE__ */ (0, import_preact16.h)("li", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", "Answers are scattered across all four quadrants.", " ")), /* @__PURE__ */ (0, import_preact16.h)("li", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, "A small majority of people"), " (586 respondents, or 51%)", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", "feel that they have the power to change things on a structural level"), ", while about one third feels powerless (386, or 34%)."), /* @__PURE__ */ (0, import_preact16.h)("li", null, "A small majority believes that idealism is more important than pragmatism, and a third of all respondents (351, or 31%) are neutral or ambivalent.")), /* @__PURE__ */ (0, import_preact16.h)("h2", null, "YOU AND THIS EXERCISE"), /* @__PURE__ */ (0, import_preact16.h)("h3", null, "Graph 9"), /* @__PURE__ */ (0, import_preact16.h)("ul", null, /* @__PURE__ */ (0, import_preact16.h)("li", null, "Thankfully,", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " there is a strong consensus among respondents "), "(871, or 76%):", /* @__PURE__ */ (0, import_preact16.h)("strong", null, "they estimate that the questions were well-balanced and relevant, and that their answers truly represent how they feel.")), /* @__PURE__ */ (0, import_preact16.h)("li", null, "A small proportion of respondents (100, or 8%) consider the questions rather biased and / or moralizing and / or annoying."), /* @__PURE__ */ (0, import_preact16.h)("li", null, "A tiny proportion affirms that their answers to the questionnaire are rather meaningless (19 respondents, or less than 2%).")))), /* @__PURE__ */ (0, import_preact16.h)(CollapsibleSection, {
      title: /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
        id: "results.footer.considerations"
      }, "Considerations"),
      cb: () => toggleFooterSectionOpenClose(footerSection.CONSIDERATIONS),
      isOpen: footerSectionIsOpen(footerSection.CONSIDERATIONS)
    }, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.MarkupText, {
      id: "results.footer.considerations--body"
    }, /* @__PURE__ */ (0, import_preact16.h)("h2", null, "Extras: drawings, lines and other"), /* @__PURE__ */ (0, import_preact16.h)("p", null, "About 5-10% of the questionnaires included marks other than dots. Unfortunately, due to the most boring pragmatic limitations (time and budget), it is impossible to reproduce all of this here."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "In the majority of cases, the marks consist in one or more additional dots, one or several lines, or a shape enclosing an area of a graph. Sometimes (in about 1 or 2% of cases), it is a drawing or an inscription. Usually, when possible, we simply considered the location of these marks on the graph as if it was a dot."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "In almost all cases, these marks express a clear desire not to be limited to Cartesian logic and to a single response\xA0\u2014 which of course can be reductive. This critique comes up in the comments as well."), /* @__PURE__ */ (0, import_preact16.h)("h2", null, "Why are there so many dots in the center?"), /* @__PURE__ */ (0, import_preact16.h)("p", null, "On average, 5.5% of all answers are found at the center of the graphs (it oscillates between 3% and 11% from one graph to the next), which is not as much as it may seem. Still, it remains significant."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "Given the X/Y-axis structure of the graphs and the existential nature of the questions, the center was probably used as the default position whenever someone wanted to express neutrality and/or ambivalence, and/or the actual position where respondents see themselves, and/or a way to express \u201Cnone of the above\u201D or \u201Call of the above.\u201D (Among the respondents who left comments in the questionnaire, several wrote that only one dot could not adequately express their position.)"), /* @__PURE__ */ (0, import_preact16.h)("h2", null, "Respondent categories"), /* @__PURE__ */ (0, import_preact16.h)("p", null, /* @__PURE__ */ (0, import_preact16.h)("strong", null, "This analysis considers all respondents together.", " "), "Overall, there are no major differences between the responses of the populations of Montreal and Edmonton, nor between Francophones and Anglophones. However, to compare the different categories of respondents (Edmonton or Montreal, questionnaires in French or in English), go to \u201CVisualization options,\u201D click \u201CShow respondents from\u2026\u201D and pick the groups you want. In \u201CGraph type\u201D you can select percentage to make it easier to compare."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "The respondents are museum and gallery goers, and as such are not necessarily representative of the general population."), /* @__PURE__ */ (0, import_preact16.h)("h2", null, "Dates"), /* @__PURE__ */ (0, import_preact16.h)("p", null, "It must be noted that the last questionnaires were handed on March 7, 2020, just one week before the pandemic changed our lives. (How different would the answers be if the survey was to be conducted today? Given the nature of the questionnaire, would the pandemic be more of a distraction, or would it fundamentally alter how people think about these issues?)"), /* @__PURE__ */ (0, import_preact16.h)("h2", null, "Representation of the dots"), /* @__PURE__ */ (0, import_preact16.h)("p", null, "In order to better show each individual dot on the scatterplot graphs, an algorithm was applied to slightly separate the dots from one another. (For example, if 35 respondents placed a dot exactly in the center, these dots are here presented not as a single dot but as a cluster of dots.)"), /* @__PURE__ */ (0, import_preact16.h)("h2", null, "Beware of numbers"), /* @__PURE__ */ (0, import_preact16.h)("p", null, "The raison d'\xEAtre of this questionnaire is above all to exist visually, and to question the way in which we consider issues of a qualitative nature. We live in a data-driven world, and numbers are often used to create a sense of knowledge, expertise, and predictability that hides the fundamental and radical uncertainty that defines the human condition. Here, we tried to balance the use of numbers and visuals to give you the best possible portrait of the results. But numbers can only give you the simplified portrait; always refer to the scatterplot graphs to interpret the numbers."))), /* @__PURE__ */ (0, import_preact16.h)(CollapsibleSection, {
      title: /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
        id: "results.footer.objectives"
      }, "Objectives"),
      cb: () => toggleFooterSectionOpenClose(footerSection.ABOUT),
      isOpen: footerSectionIsOpen(footerSection.ABOUT)
    }, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.MarkupText, {
      id: "results.footer.objectives--body"
    }, /* @__PURE__ */ (0, import_preact16.h)("p", null, "The goal of this project was not to collect data with the aim of publishing it, but rather to include an active experience of questioning as an integral part of the exhibitions."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "This questionnaire was originally designed as part of my installation for the Sobey Art Award Exhibition, which took place at the Art Gallery of Alberta, Edmonton, Canada from October 5, 2019 to January 5, 2020."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "The diagrammatic structure of the questionnaire mirrors some of my paintings. I wanted to create an experience in which visitors could immerse themselves in the works not only by looking, but also by positioning themselves in relation to the same existential issues that I address in my work. Taking a position involves choosing this over that, which is to say, it implies a form of measurement. But a quantitative framework is inherently inappropriate to ponder on qualitative notions such as morality or progress. So I used a cartesian plane with X and Y axes (for its simplicity and familiarity), but I deliberately avoided presenting participants with precise grids, numbers and metrics. I didn\u2019t want the focus to be on quantification, but on navigation \u2014 I wanted participants to navigate through different sets of issues put in relation with one another and find their own position as intuitively as possible. That is why this questionnaire, as opposed to most polls or surveys, deliberately avoided anything that can be measured objectively, such as age, income, ethnicity, and any question that can be answered by yes or no. The goal was to try to concretize, however modestly, the structure within which we consider big existential questions.", /* @__PURE__ */ (0, import_preact16.h)("br", null), "To make visitors engage in this experience was the essence of the project."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "Of course, legitimate criticism can be made about several aspects of the project \u2014 the binary nature of the questions, the choice of issues, my own biases as a white man, the loftiness inherent in asking big questions, and the tendency of such questions to bring back the old pitfalls of universalism. Despite these shortcomings, many more people than I expected took the time to complete the questionnaire and provided positive feedback, which signals that it might be worth pushing the experience further. I hope to develop a funkier questionnaire, where respondents could give multidimensional answers, express contradicting positions, critique the questions, etc. It seems relevant to develop experimental alternatives to conventional measurement systems and see what can be done with such methods."))), /* @__PURE__ */ (0, import_preact16.h)(CollapsibleSection, {
      title: /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
        id: "results.footer.contact"
      }, "Contact & Feedback"),
      cb: () => toggleFooterSectionOpenClose(footerSection.CONTACT),
      isOpen: footerSectionIsOpen(footerSection.CONTACT)
    }, /* @__PURE__ */ (0, import_preact16.h)("p", null, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.footer.contact--body"
    }, "For any questions, comments or other, feel free to contact me at grenier.nicolas@gmail.com"))), /* @__PURE__ */ (0, import_preact16.h)("section", {
      class: _default4.acknowledgements
    }, /* @__PURE__ */ (0, import_preact16.h)("h1", {
      lang: "en"
    }, /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.Text, {
      id: "results.footer.acknowledgements"
    }, "Acknowledge\xADments")), /* @__PURE__ */ (0, import_preact16.h)(import_preact_i18n4.MarkupText, {
      id: "results.footer.acknowledgements--body"
    }, /* @__PURE__ */ (0, import_preact16.h)("p", null, "The questionnaire was conceived with help from", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Tyson Atkings, David Elliott"), ", and", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Chantal Gevrey"), "."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "The paper questionnaires were collected by the team at the", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Art Gallery of Alberta"), " (thanks to curator", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Lindsey Sharman"), ") and by the team at", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Galerie Bradley Ertaskiran"), " (thanks to", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Soad Carrier"), ", ", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " C\xE9cile Bert\xE9vas"), ",", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Mark Lowe"), ", ", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Russell Banx"), ", ", /* @__PURE__ */ (0, import_preact16.h)("strong", null, "Megan Bradley"), " and ", /* @__PURE__ */ (0, import_preact16.h)("strong", null, "Antoine Ertaskiran"), ")."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "Data from the paper questionnaires were compiled by", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Loucas Braconnier"), ", with help from", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " William Sabourin"), ", ", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Sarah Boutin"), ", and", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Mathieu Reed"), "."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "The data analysis was conducted by ", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Bich Tran"), " and", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Am\xE9lie B\xE9riault-Poirier"), " from", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " Group Leger Analytics"), "."), /* @__PURE__ */ (0, import_preact16.h)("p", null, "This interface for data visualisation was built by", /* @__PURE__ */ (0, import_preact16.h)("strong", null, " ", /* @__PURE__ */ (0, import_preact16.h)("a", {
      style: "background: inherit; color: inherit;",
      href: "https://nilueps.net"
    }, "Nicolas\xA0Epstein")), "."), /* @__PURE__ */ (0, import_preact16.h)("h1", {
      style: "margin-top: 3rem;"
    }, "The project was made possible thanks to the support of:")), /* @__PURE__ */ (0, import_preact16.h)("img", {
      src: `..${APP_BASE_URL}/assets/logo-conseil-des-arts-du-canada.png`,
      alt: "logo of the canada council for the arts"
    }), /* @__PURE__ */ (0, import_preact16.h)("img", {
      src: `..${APP_BASE_URL}/assets/national-gallery-of-canada-logo-vector.png`,
      alt: "logo of the national art gallery of canada"
    }), /* @__PURE__ */ (0, import_preact16.h)("img", {
      src: `..${APP_BASE_URL}/assets/AGA_BW_Vrt.jpg`,
      alt: "logo of the art gallery of alberta"
    }), /* @__PURE__ */ (0, import_preact16.h)("img", {
      src: `..${APP_BASE_URL}/assets/hero-text-sobeys-en_0.png`,
      alt: "logo of the sobey art award"
    })), /* @__PURE__ */ (0, import_preact16.h)("section", {
      style: "border: none; background: white; padding-bottom: 0"
    }, /* @__PURE__ */ (0, import_preact16.h)(SiteMenu, {
      style: "padding-bottom: 2.5rem; margin-bottom: 0"
    }))));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/index.jsx
  function App() {
    return /* @__PURE__ */ (0, import_preact17.h)(LanguageContextProvider, null, /* @__PURE__ */ (0, import_preact17.h)(MobileContextProvider, null, /* @__PURE__ */ (0, import_preact17.h)("div", {
      id: "app"
    }, /* @__PURE__ */ (0, import_preact17.h)(Results, null))));
  }

  // pnp:/home/nilueps/Sync/ngrenier/pluralism.xyz/packages/results2019-2020/src/app.jsx
  var import_preact18 = __toModule(require_preact());
  (0, import_preact18.render)(/* @__PURE__ */ h(App, null), document.body);
})();
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
